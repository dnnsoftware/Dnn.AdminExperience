!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=143)}([function(e,t){e.exports=window.dnn.nodeModules.React},function(e,t,r){e.exports=r(72)()},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.GridCell},function(e,t){e.exports=window.dnn.nodeModules.ReactRedux},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.GridSystem},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.SingleLineInputWithError},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var o=(a=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),s=n.sources.map(function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"});return[r].concat(s).concat([o]).join("\n")}var a;return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+r+"}":r}).join("")},t.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(n[s]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&n[a[0]]||(r&&!a[2]?a[2]=r:r&&(a[2]="("+a[2]+") and ("+r+")"),t.push(a))}},t}},function(e,t,r){var n,o,s={},a=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),i=function(e){var t={};return function(e,r){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,d=[],c=r(71);function p(e,t){for(var r=0;r<e.length;r++){var n=e[r],o=s[n.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](n.parts[a]);for(;a<n.parts.length;a++)o.parts.push(b(n.parts[a],t))}else{var i=[];for(a=0;a<n.parts.length;a++)i.push(b(n.parts[a],t));s[n.id]={id:n.id,refs:1,parts:i}}}}function f(e,t){for(var r=[],n={},o=0;o<e.length;o++){var s=e[o],a=t.base?s[0]+t.base:s[0],i={css:s[1],media:s[2],sourceMap:s[3]};n[a]?n[a].parts.push(i):r.push(n[a]={id:a,parts:[i]})}return r}function h(e,t){var r=i(e.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=d[d.length-1];if("top"===e.insertAt)n?n.nextSibling?r.insertBefore(t,n.nextSibling):r.appendChild(t):r.insertBefore(t,r.firstChild),d.push(t);else if("bottom"===e.insertAt)r.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertAt.before,r);r.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var n=function(){0;return r.nc}();n&&(e.attrs.nonce=n)}return v(t,e.attrs),h(e,t),t}function v(e,t){Object.keys(t).forEach(function(r){e.setAttribute(r,t[r])})}function b(e,t){var r,n,o,s;if(t.transform&&e.css){if(!(s="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=s}if(t.singleton){var a=u++;r=l||(l=g(t)),n=x.bind(null,r,a,!1),o=x.bind(null,r,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),h(e,t),t}(t),n=function(e,t,r){var n=r.css,o=r.sourceMap,s=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||s)&&(n=c(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([n],{type:"text/css"}),i=e.href;e.href=URL.createObjectURL(a),i&&URL.revokeObjectURL(i)}.bind(null,r,t),o=function(){m(r),r.href&&URL.revokeObjectURL(r.href)}):(r=g(t),n=function(e,t){var r=t.css,n=t.media;n&&e.setAttribute("media",n);if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){m(r)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var r=f(e,t);return p(r,t),function(e){for(var n=[],o=0;o<r.length;o++){var a=r[o];(i=s[a.id]).refs--,n.push(i)}e&&p(f(e,t),t);for(o=0;o<n.length;o++){var i;if(0===(i=n[o]).refs){for(var l=0;l<i.parts.length;l++)i.parts[l]();delete s[i.id]}}}};var y,w=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function x(e,t,r,n){var o=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var s=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(s,a[t]):e.appendChild(s)}}},function(e,t,r){var n;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var s=typeof n;if("string"===s||"number"===s)e.push(n);else if(Array.isArray(n)&&n.length){var a=o.apply(null,n);a&&e.push(a)}else if("object"===s)for(var i in n)r.call(n,i)&&n[i]&&e.push(i)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Button},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.SvgIcons},function(e,t){e.exports=window.dnn.nodeModules.ReactDOM},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=n,e.exports=t.default},function(e,t){e.exports=window.dnn.nodeModules.Redux},function(e,t,r){"use strict";t.a={init:function(e){e||(this.applicationSettings={}),this.applicationSettings=e},applicationSettings:null}},function(e,t){e.exports=window.dnn.Users.CommonActions},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Checkbox},function(e,t,r){"use strict";t.__esModule=!0,t.message=t.accessor=t.disabled=t.dateFormat=t.numberFormat=void 0;var n=i(r(1)),o=i(r(95));t.elementType=o.default;var s=i(r(35)),a=r(98);function i(e){return e&&e.__esModule?e:{default:e}}var l=(0,s.default)(function(){return a.number.propType.apply(a.number,arguments)});t.numberFormat=l;var u=(0,s.default)(function(){return a.date.propType.apply(a.date,arguments)});t.dateFormat=u;var d=(0,s.default)(function(){return n.default.bool.apply(n.default,arguments)});t.disabled=d,d.acceptsArray=n.default.oneOfType([d,n.default.array]);var c=n.default.oneOfType([n.default.string,n.default.func]);t.accessor=c;var p=n.default.oneOfType([n.default.node,n.default.string,n.default.func]);t.message=p},function(e,t,r){"use strict";t.__esModule=!0,t.isShallowEqual=function(e,t){if(e===t)return!0;if(e instanceof Date&&t instanceof Date)return+e==+t;if("object"!=typeof e&&"object"!=typeof t)return e===t;if(typeof e!=typeof t)return!1;if(null==e||null==t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var s=0;s<r.length;s++)if(!o(t,r[s])||e[r[s]]!==t[r[s]])return!1;return!0},t.chunk=function(e,t){var r=0,n=e?e.length:0,o=[];t=Math.max(+t||1,1);for(;r<n;)o.push(e.slice(r,r+=t));return o},t.groupBySortedKeys=function(e,t,r){var n="function"==typeof e?e:function(t){return t[e]};return r=r||[],t.reduce(function(e,t){var s=n(t);return o(e,s)?e[s].push(t):(r.push(s),e[s]=[t]),e},{})},t.has=t.makeArray=void 0;var n;(n=r(99))&&n.__esModule;t.makeArray=function(e){return null==e?[]:[].concat(e)};var o=function(e,t){return!!e&&Object.prototype.hasOwnProperty.call(e,t)};t.has=o},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t){var r={componentWillMount:!0,componentDidMount:!0,componentWillReceiveProps:!0,getSnapshotBeforeUpdate:!0,shouldComponentUpdate:!0,componentWillUpdate:!0,componentDidUpdate:!0,componentWillUnmount:!0},n={getDerivedStateFromProps:!0};function o(e,t,r){var n=!0;return Array.isArray(t)&&(n="after"!==t[0],t=t[1]),e?function(){var o=r?null:this;n&&t.apply(o,arguments),e.apply(o,arguments),!n&&t.apply(o,arguments)}:t}e.exports=function(e,t){var s=Object.create(null);for(var a in t)n[a]&&(e.constructor[a]=o(s[a]=e.constructor[a],t[a],!0));for(var a in t)r[a]&&(e[a]=o(s[a]=e[a],t[a]));return function(t){var r=n[t]?e.constructor:e;if(t&&t in s)r[t]=s[t];else for(var t in s)r[t]=s[t]}},e.exports.mixin=function(e,t){return spyOnComponent(e.prototype,t),e}},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Pager},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o,s,a,i){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[r,n,o,s,a,i],d=0;(l=new Error(t.replace(/%s/g,function(){return u[d++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,r){"use strict";t.__esModule=!0,t.pick=function(e,t){var r=Object.keys(t.propTypes),n={};return Object.keys(e).forEach(function(t){-1!==r.indexOf(t)&&(n[t]=e[t])}),n},t.pickElementProps=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),a=1;a<t;a++)r[a-1]=arguments[a];var i=s.apply(void 0,[e].concat(r)),l={};return Object.keys(i).forEach(function(e){(-1!==n.indexOf(e)||o.some(function(t){return!!e.match(t)}))&&(l[e]=i[e])}),l},t.omitOwn=s;var n=["style","className","role","id","autocomplete","size","tabIndex","maxLength","name"],o=[/^aria-/,/^data-/,/^on[A-Z]\w+/];function s(e){for(var t=Object.keys(e.constructor.propTypes),r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];var s=n.reduce(function(e,t){return e.concat(Object.keys(t.propTypes))},t),a={};return Object.keys(e.props).forEach(function(t){-1===s.indexOf(t)&&(a[t]=e.props[t])}),a}},function(e,t,r){"use strict";t.__esModule=!0,t.notify=function(e,t){e&&e.apply(null,[].concat(t))},t.instanceId=function(e,t){void 0===t&&(t="");return e.__id||(e.__id=(r="rw_",""+((null==r?"":r)+ ++n))),(e.props.id||e.__id)+t;var r},t.isFirstFocusedRender=function(e){return e._firstFocus||(e.state.focused||!!e.props.open)&&(e._firstFocus=!0)};var n=0},function(e,t,r){"use strict";t.__esModule=!0,t.dataIndexOf=s,t.valueMatcher=a,t.dataItem=function(e,t,r){var n=s(e,t,r);return-1!==n?e[n]:t},t.dataText=t.dataValue=void 0;var n=r(19),o=function(e,t){var r=e;return"function"==typeof t?r=t(e):null==e?r=e:"string"==typeof t&&"object"==typeof e&&t in e&&(r=e[t]),r};t.dataValue=o;function s(e,t,r){for(var n=-1,o=function(e){return a(t,e,r)};++n<e.length;){var s=e[n];if(s===t||o(s))return n}return-1}function a(e,t,r){return(0,n.isShallowEqual)(o(e,r),o(t,r))}t.dataText=function(e,t){var r=o(e,t);return null==r?"":r+""}},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e,t){var r=(0,s.default)(e);return r?r.innerHeight:t?e.clientHeight:(0,o.default)(e).height};var o=n(r(46)),s=n(r(20));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){var t=!0;return(0,o.default)(e,{componentWillUnmount:function(){t=!1}}),function(){return t}};var n,o=(n=r(21))&&n.__esModule?n:{default:n};e.exports=t.default},function(e,t){e.exports=window.dnn.nodeModules.ReduxThunk},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.TextOverflowWrapper},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Switch},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.DatePicker},function(e,t,r){var n=r(77);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){"use strict";function n(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var r=this.constructor.getDerivedStateFromProps(e,t);return null!=r?r:null}.bind(this))}function s(e,t){try{var r=this.props,n=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(r,n)}finally{this.props=r,this.state=n}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var r=null,a=null,i=null;if("function"==typeof t.componentWillMount?r="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(r="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?i="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(i="UNSAFE_componentWillUpdate"),null!==r||null!==a||null!==i){var l=e.displayName||e.name,u="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+u+" but also contains the following legacy lifecycles:"+(null!==r?"\n  "+r:"")+(null!==a?"\n  "+a:"")+(null!==i?"\n  "+i:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=n,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=s;var d=t.componentDidUpdate;t.componentDidUpdate=function(e,t,r){var n=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:r;d.call(this,e,t,n)}}return e}r.r(t),r.d(t,"polyfill",function(){return a}),n.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,s.__suppressDeprecationWarning=!0},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,r,n,o,s,a){var i=o||"<<anonymous>>",l=a||n;if(null==r[n])return t?new Error("Required "+s+" `"+l+"` was not specified in `"+i+"`."):null;for(var u=arguments.length,d=Array(u>6?u-6:0),c=6;c<u;c++)d[c-6]=arguments[c];return e.apply(void 0,[r,n,i,s,l].concat(d))}var r=t.bind(null,!1);return r.isRequired=t.bind(null,!0),r},e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.defaultGetDataState=u,t.getCommonListProps=function(e,t,r){var n=r.groupBy,o=r.optionComponent,s=r.itemComponent,i=r.groupComponent,l=r.searchTerm,u=r.listProps;return a({searchTerm:l,groupBy:n,groupComponent:i,itemComponent:s,optionComponent:o},u,{data:e.data,dataState:e.state,textAccessor:t.text,valueAccessor:t.value})},t.default=function(e,t,r){var o=void 0===r?{}:r,a=o.nextProps,l=o.getDataState,p=a.disabled,f=a.valueField,h=a.textField,m=(l=l||d(a)||u)(e,a,t&&t.dataState),g=m&&m.sequentialData||e,v=c(p,f),b=function(e,t){return v(e)||t&&!n.presets.startsWith((0,s.dataText)(e,h).toLowerCase(),t.toLowerCase())},y={dataState:m,isDisabled:v,first:function(){return y.next(i)},last:function(){return y.prevEnabled(g[g.length-1])},prev:function(e,t){for(var r=Math.max(0,g.indexOf(e))-1;r>-1&&b(g[r],t);)r--;return r>=0?g[r]:v(e)?null:e},next:function(e,t){for(var r=g.indexOf(e)+1;r<g.length&&b(g[r],t);)r++;return r<g.length?g[r]:v(e)?null:e},prevEnabled:function(e){return v(e)?y.prev(e):e},nextEnabled:function(e){return v(e)?y.next(e):e}};return y};var n=r(37),o=r(19),s=r(26);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var i={},l=function(){return!1};function u(e,t,r){var n=t.groupBy;if(void 0===r&&(r={}),r.data!==e||r.groupBy!==n){if(!n)return{};var s=[],a=(0,o.groupBySortedKeys)(n,e,s);return{data:e,groupBy:n,groups:a,sortedKeys:s,sequentialData:Object.keys(a).reduce(function(e,t){return e.concat(a[t])},[])}}return r}var d=function(e){var t=e.listComponent;return t&&t.getDataState},c=function(e,t){return Array.isArray(e)?function(r){return e.some(function(e){return(0,s.dataValue)(r,t)===(0,s.dataValue)(e,t)})}:l}},function(e,t,r){"use strict";t.__esModule=!0,t.indexOf=function(e,t){var r=t.searchTerm,n=void 0===r?"":r,o=d(i(t,["searchTerm"])),s=o.filter,a=o.minLength;if(!s||!n||!n.trim()||n.length<a)return-1;for(var l=0;l<e.length;l++)if(s(e[l],n,l))return l;return-1},t.filter=function(e,t){var r=t.searchTerm,n=void 0===r?"":r,o=d(i(t,["searchTerm"])),s=o.filter,a=o.minLength;return!s||!n||!n.trim()||n.length<a?e:e.filter(function(e,t){return s(e,n,t)})},t.suggest=function(e,t){var r=t.searchTerm,n=void 0===r?"":r,o=d(i(t,["searchTerm"])),s=o.filter,a=o.minLength;if(!s||!n||!n.trim()||n.length<a)return n;for(var l=0;l<e.length;l++)if(s(e[l],n,l))return e[l];return n},t.propTypes=t.presets=void 0;var n,o=(n=r(1))&&n.__esModule?n:{default:n},s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(18)),a=r(26);function i(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var u={eq:function(e,t){return e===t},neq:function(e,t){return e!==t},gt:function(e,t){return e>t},gte:function(e,t){return e>=t},lt:function(e,t){return e<t},lte:function(e,t){return e<=t},contains:function(e,t){return-1!==e.indexOf(t)},startsWith:function(e,t){return 0===e.lastIndexOf(t,0)},endsWith:function(e,t){var r=e.length-t.length,n=e.indexOf(t,r);return-1!==n&&n===r}};function d(e){var t,r,n,o,s,i,d=l({},e);return d.minLengh=d.minLengh||0,d.filter=(n=(t=d).filter,o=t.caseSensitive,s=void 0!==o&&o,i=t.textField,"function"!=typeof(n=!1===(r=n)?null:!0===r?"startsWith":r||"eq")&&n?(n=u[n],function(e,t){var r=(0,a.dataText)(e,i);return s||(r=r.toLowerCase(),t=t.toLowerCase()),n(r,t)}):n),d}t.presets=u;var c={textField:s.accessor,caseSensitive:o.default.bool,minLength:o.default.number,filter:o.default.oneOfType([o.default.func,o.default.bool,o.default.oneOf(Object.keys(u))])};t.propTypes=c},function(e,t,r){"use strict";t.__esModule=!0,t.getMessages=function(e){void 0===e&&(e={});var t={};return Object.keys(s).forEach(function(r){var n=e[r];null==n&&(n=s[r]),t[r]="function"==typeof n?n:function(){return n}}),t};var n,o=(n=r(0))&&n.__esModule?n:{default:n};var s={moveBack:"Navigate back",moveForward:"Navigate forward",dateButton:"Select date",timeButton:"Select time",openCombobox:"open combobox",openDropdown:"open dropdown",placeholder:"",filterPlaceholder:"",emptyList:"There are no items in this list",emptyFilter:"The filter returned no results",createOption:function(e){var t=e.searchTerm;return[" Create option",t&&" ",t&&o.default.createElement("strong",{key:"_"},'"'+t+'"')]},tagsLabel:"Selected items",removeLabel:"Remove selected item",noneSelected:"no selected items",selectedItems:function(e){return"Selected items: "+e.join(", ")},increment:"Increment value",decrement:"Decrement value"}},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=void 0;var o=function(){};n(r(13)).default&&(o=document.addEventListener?function(e,t,r,n){return e.addEventListener(t,r,n||!1)}:document.attachEvent?function(e,t,r){return e.attachEvent("on"+t,function(t){(t=t||window.event).target=t.target||t.srcElement,t.currentTarget=e,r.call(e,t)})}:void 0);var s=o;t.default=s,e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=void 0;var o=function(){};n(r(13)).default&&(o=document.addEventListener?function(e,t,r,n){return e.removeEventListener(t,r,n||!1)}:document.attachEvent?function(e,t,r){return e.detachEvent("on"+t,r)}:void 0);var s=o;t.default=s,e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=void 0;var o=n(r(13)).default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):s(e,t)}:s;function s(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}t.default=o,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){var r,s="#"===t[0],a="."===t[0],i=s||a?t.slice(1):t;if(n.test(i))return s?(e=e.getElementById?e:document,(r=e.getElementById(i))?[r]:[]):e.getElementsByClassName&&a?o(e.getElementsByClassName(i)):o(e.getElementsByTagName(t));return o(e.querySelectorAll(t))};var n=/^[\w-]*$/,o=Function.prototype.bind.call(Function.prototype.call,[].slice);e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e,t,r){var n="",d="",c=t;if("string"==typeof t){if(void 0===r)return e.style[(0,o.default)(t)]||(0,a.default)(e).getPropertyValue((0,s.default)(t));(c={})[t]=r}Object.keys(c).forEach(function(t){var r=c[t];r||0===r?(0,u.default)(t)?d+=t+"("+r+") ":n+=(0,s.default)(t)+": "+r+";":(0,i.default)(e,(0,s.default)(t))}),d&&(n+=l.transform+": "+d+";");e.style.cssText+=";"+n};var o=n(r(44)),s=n(r(109)),a=n(r(111)),i=n(r(112)),l=r(45),u=n(r(113));e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e){return(0,o.default)(e.replace(s,"ms-"))};var o=n(r(108)),s=/^-ms-/;e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,s,a,i,l,u,d,c,p,f,h,m=n(r(13)),g="transform";if(t.transform=g,t.animationEnd=a,t.transitionEnd=s,t.transitionDelay=d,t.transitionTiming=u,t.transitionDuration=l,t.transitionProperty=i,t.animationDelay=h,t.animationTiming=f,t.animationDuration=p,t.animationName=c,m.default){var v=function(){for(var e,t,r=document.createElement("div").style,n={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(n),s="",a=0;a<o.length;a++){var i=o[a];if(i+"TransitionProperty"in r){s="-"+i.toLowerCase(),e=n[i]("TransitionEnd"),t=n[i]("AnimationEnd");break}}!e&&"transitionProperty"in r&&(e="transitionend");!t&&"animationName"in r&&(t="animationend");return r=null,{animationEnd:t,transitionEnd:e,prefix:s}}();o=v.prefix,t.transitionEnd=s=v.transitionEnd,t.animationEnd=a=v.animationEnd,t.transform=g=o+"-"+g,t.transitionProperty=i=o+"-transition-property",t.transitionDuration=l=o+"-transition-duration",t.transitionDelay=d=o+"-transition-delay",t.transitionTiming=u=o+"-transition-timing-function",t.animationName=c=o+"-animation-name",t.animationDuration=p=o+"-animation-duration",t.animationTiming=f=o+"-animation-delay",t.animationDelay=h=o+"-animation-timing-function"}var b={transform:g,end:s,property:i,timing:u,delay:d,duration:l};t.default=b},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e){var t=(0,a.default)(e),r=(0,s.default)(t),n=t&&t.documentElement,i={top:0,left:0,height:0,width:0};if(!t)return;if(!(0,o.default)(n,e))return i;void 0!==e.getBoundingClientRect&&(i=e.getBoundingClientRect());return i={top:i.top+(r.pageYOffset||n.scrollTop)-(n.clientTop||0),left:i.left+(r.pageXOffset||n.scrollLeft)-(n.clientLeft||0),width:(null==i.width?e.offsetWidth:i.width)||0,height:(null==i.height?e.offsetHeight:i.height)||0}};var o=n(r(41)),s=n(r(20)),a=n(r(114));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0;var n=u(r(21));t.spyOnComponent=n.default;var o=u(r(122));t.autoFocus=o.default;var s=u(r(123));t.focusManager=s.default;var a=u(r(28));t.mountManager=a.default;var i=u(r(48));t.timeoutManager=i.default;var l=u(r(124));function u(e){return e&&e.__esModule?e:{default:e}}t.mixin=l.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){var t,r=(0,o.default)(e),s=Object.create(null);return(0,n.default)(e,{componentWillUnmount:function(){for(var e in s)clearTimeout(s[e]);s=null}}),t={clear:function(e){clearTimeout(s[e])},set:function(e,n,o){r()&&(t.clear(e),s[e]=setTimeout(n,o))}}};var n=s(r(21)),o=s(r(28));function s(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.widgetEditable=t.widgetEnabled=t.isInDisabledFieldset=void 0;var n,o=r(12),s=(n=r(125))&&n.__esModule?n:{default:n};var a=function(e){var t;try{t=(0,o.findDOMNode)(e)}catch(e){}return!!t&&(0,s.default)(t,"fieldset[disabled] *")};t.isInDisabledFieldset=a;var i=u(!0);t.widgetEnabled=i;var l=u(!1);function u(e){function t(t){return function(){var r=this.props,n=r.disabled,o=r.readOnly;n=a(this)||1==n||!e&&!0===o;for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];if(!n)return t.apply(this,i)}}return function(e,r,n){if(n.initializer){var o=n.initializer;n.initializer=function(){return t(o.call(this)).bind(this)}}else n.value=t(n.value);return n}}t.widgetEditable=l},function(e,t){e.exports=window.dnn.nodeModules.ReduxImmutableStateInvariant},function(e,t){e.exports=window.dnn.Users.CommonReducers},function(e,t){e.exports=window.dnn.nodeModules.ReduxDevTools},function(e,t){e.exports=window.dnn.nodeModules.ReduxDevToolsLogMonitor},function(e,t){e.exports=window.dnn.nodeModules.ReduxDevToolsDockMonitor},function(e,t,r){e.exports=r(142)},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.PersonaBarPageHeader},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.PersonaBarPageBody},function(e,t,r){var n=r(76);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t){e.exports=window.dnn.nodeModules.Moment},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Collapsible},function(e,t,r){var n=r(84);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){var n=r(87);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t){e.exports=window.dnn.nodeModules.ThrottleDebounce},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,o,s,a,i,l,u,d=k(r(0)),c=k(r(1)),p=k(r(9)),f=r(34),h=k(r(90)),m=k(r(92)),g=k(r(93)),v=k(r(94)),b=k(r(103)),y=k(r(117)),w=k(r(119)),x=r(38),E=k(r(121)),S=k(r(36)),C=k(r(126)),O=M(r(18)),_=k(r(127)),D=r(19),U=M(r(24)),I=M(r(37)),P=r(49),R=r(25),T=r(132);function M(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}function k(e){return e&&e.__esModule?e:{default:e}}function N(e,t,r,n){r&&Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(e,t,r,n,o){var s={};return Object.keys(n).forEach(function(e){s[e]=n[e]}),s.enumerable=!!s.enumerable,s.configurable=!!s.configurable,("value"in s||s.initializer)&&(s.writable=!0),s=r.slice().reverse().reduce(function(r,n){return n(e,t,r)||r},s),o&&void 0!==s.initializer&&(s.value=s.initializer?s.initializer.call(o):void 0,s.initializer=void 0),void 0===s.initializer&&(Object.defineProperty(e,t,s),s=null),s}function L(){return(L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var F=L({},I.propTypes,{value:c.default.any,onChange:c.default.func,open:c.default.bool,onToggle:c.default.func,itemComponent:O.elementType,listComponent:O.elementType,groupComponent:O.elementType,groupBy:O.accessor,data:c.default.array,valueField:O.accessor,textField:O.accessor,name:c.default.string,onSelect:c.default.func,autoFocus:c.default.bool,disabled:O.disabled.acceptsArray,readOnly:O.disabled,suggest:I.propTypes.filter,busy:c.default.bool,selectIcon:c.default.node,busySpinner:c.default.node,delay:c.default.number,dropUp:c.default.bool,popupTransition:O.elementType,placeholder:c.default.string,containerClassName:c.default.string,inputProps:c.default.object,listProps:c.default.object,isRtl:c.default.bool,messages:c.default.shape({openCombobox:O.message,emptyList:O.message,emptyFilter:O.message})}),z=(0,f.polyfill)((u=l=function(e){var t,r;function n(t,r){var n;return(n=e.call(this,t,r)||this).handleFocusWillChange=function(e){!e&&n.inputRef&&n.inputRef.accept(),e&&n.focus()},n.handleFocusChanged=function(e){e||n.close()},N(n,"handleSelect",s,j(j(n))),n.handleInputKeyDown=function(e){var t=e.key;n._deleting="Backspace"===t||"Delete"===t,n._isTyping=!0},n.handleInputChange=function(e){var t=n.suggest(e.target.value);n.change(t,!0,e),n.open()},N(n,"handleKeyDown",a,j(j(n))),n.attachListRef=function(e){n.listRef=e},n.attachInputRef=function(e){n.inputRef=e},N(n,"toggle",i,j(j(n))),n.inputId=(0,R.instanceId)(j(j(n)),"_input"),n.listId=(0,R.instanceId)(j(j(n)),"_listbox"),n.activeId=(0,R.instanceId)(j(j(n)),"_listbox_active_option"),n.handleScroll=(0,_.default)(j(j(n))),n.focusManager=(0,E.default)(j(j(n)),{willHandle:n.handleFocusWillChange,didHandle:n.handleFocusChanged}),n.state={isSuggesting:function(){return n.inputRef&&n.inputRef.isSuggesting()}},n}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var o=n.prototype;return o.shouldComponentUpdate=function(e,t){var r=t.isSuggesting(),n=!(0,D.isShallowEqual)(t,this.state),o=!(0,D.isShallowEqual)(e,this.props);return r||n||o},n.getDerivedStateFromProps=function(e,t){var r,n=e.value,o=e.data,s=e.messages,a=e.filter,i=e.minLength,l=e.caseSensitive,u=t.focusedItem,d=(0,C.default)(e),c=n!==t.lastValue,p=d.indexOf(o,n),f=-1===p?n:o[p];(-1===p||t.isSuggesting())&&(r=d.text(f)),o=o=I.filter(o,{filter:a,searchTerm:r,minLength:i,caseSensitive:l,textField:d.text});var h=(0,S.default)(o,t.list,{nextProps:e}),m=p;m=-1!==p?p=d.indexOf(o,n):I.indexOf(o,{searchTerm:r,textField:d.text,filter:a||!0});var g=o[p],v=~m?u:o[0];return{data:o,list:h,accessors:d,lastValue:n,messages:(0,x.getMessages)(s),selectedItem:c?h.nextEnabled(g):t.selectedItem,focusedItem:c||!u?h.nextEnabled(g||v):v}},o.renderInput=function(){var e=this.props,t=e.suggest,r=e.filter,n=e.busy,o=e.name,s=e.data,a=e.value,i=e.autoFocus,l=e.tabIndex,u=e.placeholder,c=e.inputProps,p=e.disabled,f=e.readOnly,h=e.open,m=this.state.accessors,g=m.findOrSelf(s,a),v=t?r?"both":"inline":r?"list":"";return d.default.createElement(w.default,L({},c,{role:"combobox",name:o,id:this.inputId,autoFocus:i,tabIndex:l,suggest:t,disabled:!0===p,readOnly:!0===f,"aria-busy":!!n,"aria-owns":this.listId,"aria-autocomplete":v,"aria-activedescendant":h?this.activeId:null,"aria-expanded":h,"aria-haspopup":!0,placeholder:u,value:m.text(g),onChange:this.handleInputChange,onKeyDown:this.handleInputKeyDown,ref:this.attachInputRef}))},o.renderList=function(e){var t=this.activeId,r=this.inputId,n=this.listId,o=this.props,s=o.open,a=o.data,i=o.value,l=o.listProps,u=o.optionComponent,c=o.itemComponent,p=o.groupComponent,f=this.state,h=f.list,m=f.accessors,g=f.focusedItem,v=f.selectedItem,b=f.data,y=this.props.listComponent;return d.default.createElement(y,L({},l,{id:n,activeId:t,data:b,dataState:h.dataState,isDisabled:h.isDisabled,textAccessor:m.text,valueAccessor:m.value,itemComponent:c,groupComponent:p,optionComponent:u,selectedItem:v,focusedItem:s?g:null,searchTerm:m.text(i)||"","aria-hidden":!s,"aria-labelledby":r,"aria-live":s&&"polite",onSelect:this.handleSelect,onMove:this.handleScroll,ref:this.attachListRef,messages:{emptyList:a.length?e.emptyFilter:e.emptyList}}))},o.render=function(){var e=this,t=this.props,r=t.isRtl,n=t.className,o=t.popupTransition,s=t.busy,a=t.dropUp,i=t.open,l=t.selectIcon,u=t.busySpinner,c=t.containerClassName,f=this.state,h=f.focused,v=f.messages,w=!0===this.props.disabled,x=!0===this.props.readOnly,E=U.pickElementProps(this),S=(0,R.isFirstFocusedRender)(this);return d.default.createElement(m.default,L({},E,{open:i,isRtl:r,dropUp:a,focused:h,disabled:w,readOnly:x,onBlur:this.focusManager.handleBlur,onFocus:this.focusManager.handleFocus,onKeyDown:this.handleKeyDown,className:(0,p.default)(n,"rw-combobox")}),d.default.createElement(g.default,{className:c},this.renderInput(),d.default.createElement(y.default,{bordered:!0,busy:s,icon:l,spinner:u,onClick:this.toggle,disabled:w||x,label:v.openCombobox(this.props)})),S&&d.default.createElement(b.default,{open:i,dropUp:a,transition:o,onEntering:function(){return e.listRef.forceUpdate()}},d.default.createElement("div",null,this.renderList(v))))},o.focus=function(){this.inputRef&&this.inputRef.focus()},o.change=function(e,t,r){var n=this.props,o=n.onChange,s=n.value;this._typedChange=!!t,(0,R.notify)(o,[e,{lastValue:s,originalEvent:r}])},o.open=function(){this.props.open||(0,R.notify)(this.props.onToggle,!0)},o.close=function(){this.props.open&&(0,R.notify)(this.props.onToggle,!1)},o.suggest=function(e){var t=this.props,r=t.textField,n=t.suggest,o=t.minLength,s=this.state.data;return this._deleting?e:I.suggest(s,{minLength:o,textField:r,searchTerm:e,filter:n,caseSensitive:!1})},n}(d.default.Component),l.propTypes=F,l.defaultProps={data:[],value:"",open:!1,suggest:!1,filter:!1,delay:500,selectIcon:T.caretDown,listComponent:v.default},s=A((o=u).prototype,"handleSelect",[P.widgetEditable],{enumerable:!0,initializer:function(){var e=this;return function(t,r){e.close(),(0,R.notify)(e.props.onSelect,[t,{originalEvent:r}]),e.change(t,!1,r),e.inputRef&&e.inputRef.accept(!0),e.focus()}}}),a=A(o.prototype,"handleKeyDown",[P.widgetEditable],{enumerable:!0,initializer:function(){var e=this;return function(t){var r=t.key,n=t.altKey,o=e.props,s=o.open,a=o.onKeyDown,i=e.state,l=i.focusedItem,u=i.selectedItem,d=i.list;if((0,R.notify)(a,[t]),!t.defaultPrevented){var c=function(r){return null!=r&&e.handleSelect(r,t)},p=function(t){return e.setState({focusedItem:t})};if("End"===r&&s)t.preventDefault(),p(d.last());else if("Home"===r&&s)t.preventDefault(),p(d.first());else if("Escape"===r&&s)t.preventDefault(),e.close();else if("Enter"===r&&s)t.preventDefault(),c(e.state.focusedItem);else if("Tab"===r)e.inputRef.accept();else if("ArrowDown"===r){if(t.preventDefault(),n)return e.open();s?p(d.next(l)):c(d.next(u))}else if("ArrowUp"===r){if(t.preventDefault(),n)return e.close();s?p(d.prev(l)):c(d.prev(u))}}}}}),i=A(o.prototype,"toggle",[P.widgetEditable],{enumerable:!0,initializer:function(){var e=this;return function(){e.focus(),e.props.open?e.close():e.open()}}}),n=o))||n,q=(0,h.default)(z,{open:"onToggle",value:"onChange"},["focus"]);t.default=q,e.exports=t.default},function(e,t,r){var n=r(137);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Dropdown},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.SearchBox},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.PersonaBarPage},function(e,t,r){var n=r(70);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var r=t.protocol+"//"+t.host,n=r+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,s=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?r+s:n+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,r){"use strict";var n=r(73);function o(){}e.exports=function(){function e(e,t,r,o,s,a){if(a!==n){var i=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw i.name="Invariant Violation",i}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return r.checkPropTypes=o,r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,r){var n=r(75);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.header-row{padding:10px 0 10px;border-bottom:1px solid #C8C8C8;text-transform:uppercase}.header-row .dnn-grid-cell{padding:0 15px}.header-row .dnn-grid-cell.empty{text-indent:-100px;overflow:hidden}",""])},function(e,t,r){(t=e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.collapsible-component-users .collapsible-header-users.false{border-top:2px solid #1E88C3;border-bottom:2px solid #1E88C3;margin-top:-2px}._1p8jYUkN2IDoiqPm0iV_fC{padding:15px 0 7.5px;border-bottom:1px solid #C8C8C8}._1p8jYUkN2IDoiqPm0iV_fC.closed{padding:0;border-bottom:none}._1p8jYUkN2IDoiqPm0iV_fC .user-avatar{text-align:center}._1p8jYUkN2IDoiqPm0iV_fC .user-avatar img{border-radius:25px;width:40px}._1p8jYUkN2IDoiqPm0iV_fC .user-detail-row{float:left;width:100%}._1p8jYUkN2IDoiqPm0iV_fC .user-detail-row>div{width:100%;float:left}._1p8jYUkN2IDoiqPm0iV_fC .user-emails{padding-left:11px !important}._1p8jYUkN2IDoiqPm0iV_fC .email-link>a{color:#1E88C3;text-decoration:none}._1p8jYUkN2IDoiqPm0iV_fC .user-names{padding-left:2px !important}._1p8jYUkN2IDoiqPm0iV_fC .user-names h6{font-size:15px}._1p8jYUkN2IDoiqPm0iV_fC .user-names p{text-transform:lowercase}._1p8jYUkN2IDoiqPm0iV_fC .user-joined{padding-left:22px !important}._1p8jYUkN2IDoiqPm0iV_fC .deleted{text-decoration:line-through}._1p8jYUkN2IDoiqPm0iV_fC .extension-action{margin-left:5px;float:right;cursor:pointer}._1p8jYUkN2IDoiqPm0iV_fC .extension-action svg{width:20px;float:left;height:20px}._1p8jYUkN2IDoiqPm0iV_fC .extension-action.false svg{fill:#1E88C3}._1p8jYUkN2IDoiqPm0iV_fC .extension-action.false svg:hover{fill:#4B4E4F}._1p8jYUkN2IDoiqPm0iV_fC .extension-action.more-menu{position:relative}._1p8jYUkN2IDoiqPm0iV_fC .dnn-grid-cell{padding:0 15px}._1p8jYUkN2IDoiqPm0iV_fC .dnn-grid-cell p{word-wrap:break-word}._1p8jYUkN2IDoiqPm0iV_fC .package-name{word-wrap:break-word;display:inline;vertical-align:top}",""]),t.locals={extensionDetailRow:"_1p8jYUkN2IDoiqPm0iV_fC"}},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-menu.menu-item{padding:10px 20px;cursor:pointer;color:black}.dnn-user-menu.menu-item:hover{background-color:#EFF0F0;color:#1E88C3}.dnn-user-menu.menu{position:absolute;right:-18px;top:35px;text-align:left;min-width:200px;border:1px solid #C8C8C8;border-radius:3px;background-color:#FFFFFF;list-style:none;padding:10px 0px;box-shadow:0 0 30px 0 rgba(0,0,0,0.1);z-index:1000}",""])},function(e,t,r){var n=r(79);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-change-password{background-color:#FFFFFF;position:absolute;width:47%;left:30px;z-index:100;box-sizing:border-box;float:left;border:1px solid #C8C8C8;box-shadow:0 0 17px 2px rgba(0,0,0,0.2)}.dnn-user-change-password .dnn-grid-cell{padding:15px;margin:0px;float:left;text-align:left}.dnn-user-change-password .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell{padding:0px 15px;margin:0px}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell .right{float:right}.dnn-user-change-password .buttons .dnn-grid-cell.leftBtn{padding-right:0px;text-align:right}.dnn-user-change-password .buttons .dnn-grid-cell.rightBtn{padding-left:30px}",""])},function(e,t,r){var n=r(81);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .dnn-user-menu.menu-popup{position:absolute}#users-container .dnn-user-menu .dnn-user-change-password{width:400px;right:-18px;top:35px;left:auto}",""])},function(e,t,r){var n=r(83);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"",""])},function(e,t,r){(t=e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._2Vvoybq9n9Ee0sL7GsKDnV{box-sizing:border-box;margin-top:10px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box{width:100%;background-color:white;padding:10px 0}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .box-title{margin-bottom:15px;text-transform:uppercase}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-system.with-right-border.bottom-half{padding-top:25px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-switch-container{width:100%}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-switch-container .dnn-switch{float:right}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-single-line-input-with-error .__react_component_tooltip{max-width:200px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell{padding:10px 15px;box-sizing:border-box}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell>hr{border:none;height:1px;color:#C8C8C8;background-color:#C8C8C8}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell .version-dropdown{width:31.1%;box-sizing:border-box;margin-right:10px;vertical-align:bottom}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell .version-dropdown:last-child{margin-right:0}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell.modal-footer{text-align:center}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell.modal-footer button{min-width:100px;margin-right:10px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .email-notification-line{text-align:center}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .email-notification-line .dnn-checkbox-container.right{float:none}",""]),t.locals={newExtensionModal:"_2Vvoybq9n9Ee0sL7GsKDnV"}},function(e,t,r){var n=r(86);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.passwordStrength{line-height:1.5pt;height:1.5pt;position:relative;top:-18px}.passwordStrength.weak{background-color:red;width:25%}.passwordStrength.fair{background-color:#f6d500;width:75%}.passwordStrength.strong{background-color:green;width:100%}.passwordStrengthLabel{position:relative;top:-45px;left:308px;font-weight:700}.passwordStrengthLabel.weak{color:red}.passwordStrengthLabel.fair{color:#f6d500}.passwordStrengthLabel.strong{color:green}",""])},function(e,t,r){(t=e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._2-0Lsyw3Ot-QiEaQ7AgZbm{box-sizing:border-box;float:left;margin:15px 0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell{margin:5px 0px;float:left;text-align:left}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box{padding:10px 30px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right{border-left:1px solid #C8C8C8}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right .dnn-grid-system{margin:10px 0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right .dnn-grid-system.first{margin-bottom:4.5px;margin-right:0px;margin-left:0px;margin-top:0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right .dnn-grid-system .dnn-grid-cell{padding:0px;margin:0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell.no-padding{padding:0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link{padding:0px;font-weight:bold;cursor:pointer;color:#1E88C3}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link:active,._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link:hover{color:#21A3DA}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link.disabled{color:#C8C8C8;cursor:default}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link:visited{color:#226F9B}._2-0Lsyw3Ot-QiEaQ7AgZbm .buttons .dnn-grid-cell.leftBtn{padding-right:5px;text-align:right}._2-0Lsyw3Ot-QiEaQ7AgZbm .buttons .dnn-grid-cell.rightBtn{padding-left:10px}._2-0Lsyw3Ot-QiEaQ7AgZbm .isloading .input-tooltip-container input{pointer-events:none;border-color:#C8C8C8}",""]),t.locals={userSettings:"_2-0Lsyw3Ot-QiEaQ7AgZbm"}},function(e,t,r){var n=r(89);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.user-detail-row .edit-profile{float:left;padding:0px;width:100%;border:0px;min-height:700px;padding:10px 25px}",""])},function(e,t,r){"use strict";t.__esModule=!0,t.default=function e(t,r,s){void 0===s&&(s=[]);var i=t.displayName||t.name||"Component";var l=o.isReactComponent(t);var u=Object.keys(r);var d=u.map(o.defaultKey);!l&&s.length&&invariant(!1);var c=function(e){var s,i;function c(){for(var t,n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return(t=e.call.apply(e,[this].concat(o))||this).handlers=Object.create(null),u.forEach(function(e){var n=r[e];t.handlers[n]=function(r){if(t.props[n]){var o;t._notifying=!0;for(var s=arguments.length,a=new Array(s>1?s-1:0),i=1;i<s;i++)a[i-1]=arguments[i];(o=t.props)[n].apply(o,[r].concat(a)),t._notifying=!1}t._values[e]=r,t.unmounted||t.forceUpdate()}}),l&&(t.attachRef=function(e){t.inner=e}),t}i=e,(s=c).prototype=Object.create(i.prototype),s.prototype.constructor=s,s.__proto__=i;var p=c.prototype;return p.shouldComponentUpdate=function(){return!this._notifying},p.componentWillMount=function(){var e=this,t=this.props;this._values=Object.create(null),u.forEach(function(r){e._values[r]=t[o.defaultKey(r)]})},p.componentWillReceiveProps=function(e){var t=this,r=this.props;u.forEach(function(n){!o.isProp(e,n)&&o.isProp(r,n)&&(t._values[n]=e[o.defaultKey(n)])})},p.componentWillUnmount=function(){this.unmounted=!0},p.getControlledInstance=function(){return this.inner},p.render=function(){var e=this,r=a({},this.props);d.forEach(function(e){delete r[e]});var o={};return u.forEach(function(t){var r=e.props[t];o[t]=void 0!==r?r:e._values[t]}),n.default.createElement(t,a({},r,o,this.handlers,{ref:this.attachRef}))},c}(n.default.Component);c.displayName="Uncontrolled("+i+")";c.propTypes=o.uncontrolledPropTypes(r,i);s.forEach(function(e){c.prototype[e]=function(){var t;return(t=this.inner)[e].apply(t,arguments)}});c.ControlledComponent=t;c.deferControlTo=function(t,n,o){return void 0===n&&(n={}),e(t,a({},r,n),o)};return c};var n=s(r(0)),o=(s(r(23)),function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(91)));function s(e){return e&&e.__esModule?e:{default:e}}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.uncontrolledPropTypes=function(e,t){var r={};return Object.keys(e).forEach(function(e){r[s(e)]=o}),r},t.isProp=function(e,t){return void 0!==e[t]},t.defaultKey=s,t.isReactComponent=function(e){return!!(e&&e.prototype&&e.prototype.isReactComponent)};var n;(n=r(23))&&n.__esModule;var o=function(){};function s(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=a(r(0)),o=a(r(1)),s=a(r(9));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var l=function(e){var t,r;function o(){return e.apply(this,arguments)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,o.prototype.render=function(){var e=this.props,t=e.className,r=e.tabIndex,o=e.focused,a=e.open,l=e.dropUp,u=e.disabled,d=e.readOnly,c=e.autofilling,p=e.isRtl,f=void 0===p?this.context.isRtl:p,h=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["className","tabIndex","focused","open","dropUp","disabled","readOnly","autofilling","isRtl"]);return r=null!=r?r:"-1",n.default.createElement("div",i({},h,{tabIndex:r,className:(0,s.default)(t,"rw-widget",f&&"rw-rtl",u&&"rw-state-disabled",d&&"rw-state-readonly",o&&"rw-state-focus",c&&"rw-webkit-autofill",a&&"rw-open"+(l?"-up":""))}))},o}(n.default.Component);l.contextTypes={isRtl:o.default.bool},l.propTypes={tabIndex:o.default.node,focused:o.default.bool,disabled:o.default.bool,readOnly:o.default.bool,autofilling:o.default.bool,open:o.default.bool,dropUp:o.default.bool,isRtl:o.default.bool};var u=l;t.default=u,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=a(r(0)),o=a(r(1)),s=a(r(9));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var l=function(e){var t,r;function o(){return e.apply(this,arguments)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,o.prototype.render=function(){var e=this.props,t=e.open,r=e.dropUp,o=e.className,a=e.disabled,l=e.readOnly,u=e.focused,d=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["open","dropUp","className","disabled","readOnly","focused"]),c="rw-open"+(r?"-up":"");return n.default.createElement("div",i({},d,{className:(0,s.default)(o,"rw-widget-picker","rw-widget-container",t&&c,a&&"rw-state-disabled",l&&"rw-state-readonly",u&&"rw-state-focus")}))},o}(n.default.Component);l.propTypes={tabIndex:o.default.node,focused:o.default.bool,disabled:o.default.bool,readOnly:o.default.bool,open:o.default.bool,dropUp:o.default.bool,picker:o.default.bool};var u=l;t.default=u,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=m(r(1)),o=m(r(0)),s=r(12),a=h(r(18)),i=h(r(24)),l=r(25),u=r(36),d=m(r(100)),c=m(r(101)),p=m(r(102)),f=r(38);function h(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}function m(e){return e&&e.__esModule?e:{default:e}}function g(){return(g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var v={data:n.default.array,dataState:n.default.shape({sortedKeys:n.default.array,groups:n.default.object,data:n.default.array,sequentialData:n.default.array}),valueAccessor:a.accessor,textAccessor:a.accessor,onSelect:n.default.func,onMove:n.default.func,activeId:n.default.string,itemComponent:a.elementType,groupComponent:a.elementType,optionComponent:a.elementType,renderItem:n.default.func,renderGroup:n.default.func,focusedItem:n.default.any,selectedItem:n.default.any,searchTerm:n.default.string,isDisabled:n.default.func.isRequired,messages:n.default.shape({emptyList:n.default.func.isRequired})},b={onSelect:function(){},data:[],dataState:{},optionComponent:c.default},y=function(e){var t,r;function n(){for(var t,r=arguments.length,n=new Array(r),s=0;s<r;s++)n[s]=arguments[s];return(t=e.call.apply(e,[this].concat(n))||this).renderItem=function(e){var r=e.item,n=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["item"]),s=t.props,a=s.isDisabled,i=s.renderItem,l=s.textAccessor,u=s.valueAccessor,d=t.props.itemComponent;return i?i(g({item:r},n)):d?o.default.createElement(d,g({item:r,value:u(r),text:l(r),disabled:a(r)},n)):l(r)},t.renderGroup=function(e){var r=t.props,n=r.renderGroup,s=r.groupComponent;return n?n({group:e}):s?o.default.createElement(s,{item:e}):e},t}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var a=n.prototype;return a.componentDidMount=function(){this.move()},a.componentDidUpdate=function(){this.move()},a.mapItems=function(e){var t=this.props,r=t.data,n=t.dataState,o=n.sortedKeys,s=n.groups;if(!s)return r.map(function(t,r){return e(t,r,!1)});var a=-1;return o.reduce(function(t,r){var n=s[r];return t.concat(e(r,a,!0),n.map(function(t){return e(t,++a,!1)}))},[])},a.move=function(){var e=this.props,t=e.focusedItem,r=e.onMove,n=e.data,o=e.dataState,a=(0,s.findDOMNode)(this),i=function(e,t,r,n){var o=n.groups,s=n.sortedKeys;if(!o)return r.indexOf(e);var a=-1,i=-1;return s.some(function(t){var r=o[t].indexOf(e);if(a++,-1!==r)return i=a+r+1,!0;a+=o[t].length}),i}(t,0,n,o),u=a.children[i];u&&(0,l.notify)(r,[u,a,t])},a.renderOption=function(e,t){var r=this.props,n=r.activeId,s=r.focusedItem,a=r.selectedItem,i=r.onSelect,l=r.isDisabled,u=r.searchTerm,d=r.optionComponent,c=s===e;return o.default.createElement(d,{dataItem:e,key:"item_"+t,index:t,activeId:n,focused:c,onSelect:i,disabled:l(e),selected:a===e},this.renderItem({item:e,index:t,searchTerm:u}))},a.render=function(){var e=this,t=this.props,r=t.className,n=t.messages,s=i.pickElementProps(this),a=(0,f.getMessages)(n).emptyList;return o.default.createElement(d.default,g({},s,{className:r,emptyListMessage:a(this.props)}),this.mapItems(function(t,r,n){return n?o.default.createElement(p.default,{key:"group_"+t,group:t},e.renderGroup(t)):e.renderOption(t,r)}))},n}(o.default.Component);y.getDataState=u.defaultGetDataState,y.propTypes=v,y.defaultProps=b;var w=y;t.default=w,e.exports=t.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a(r(0)),o=r(96),s=a(r(35));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,s.default)(function(e,t,r,s,a){var i=e[t];return n.default.isValidElement(i)?new Error("Invalid "+s+" `"+a+"` of type ReactElement supplied to `"+r+"`,expected an element type (a string , component class, or function component)."):(0,o.isValidElementType)(i)?null:new Error("Invalid "+s+" `"+a+"` of value `"+i+"` supplied to `"+r+"`, expected an element type (a string , component class, or function component).")}),e.exports=t.default},function(e,t,r){"use strict";e.exports=r(97)},function(e,t,r){"use strict";
/** @license React v16.6.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&Symbol.for,o=n?Symbol.for("react.element"):60103,s=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,d=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,p=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,h=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116;function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case c:case p:case a:case l:case i:return e;default:switch(e=e&&e.$$typeof){case d:case f:case u:return e;default:return t}}case s:return t}}}function b(e){return v(e)===p}t.typeOf=v,t.AsyncMode=c,t.ConcurrentMode=p,t.ContextConsumer=d,t.ContextProvider=u,t.Element=o,t.ForwardRef=f,t.Fragment=a,t.Profiler=l,t.Portal=s,t.StrictMode=i,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===p||e===l||e===i||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===u||e.$$typeof===d||e.$$typeof===f)},t.isAsyncMode=function(e){return b(e)||v(e)===c},t.isConcurrentMode=b,t.isContextConsumer=function(e){return v(e)===d},t.isContextProvider=function(e){return v(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return v(e)===f},t.isFragment=function(e){return v(e)===a},t.isProfiler=function(e){return v(e)===l},t.isPortal=function(e){return v(e)===s},t.isStrictMode=function(e){return v(e)===i}},function(e,t,r){"use strict";t.__esModule=!0,t.setNumber=function(e){var t=e.format,r=e.parse,n=e.formats,o=e.propType,i=void 0===o?s:o,u=e.decimalChar,d=void 0===u?function(){return"."}:u,c=e.precision,h=void 0===c?function(){return null}:c;f(a,n),l={formats:n,precision:h,decimalChar:d,propType:i,format:p(t),parse:function(e,t,n){var o=r.call(this,e,t,n);return null!=o&&"number"!=typeof o&&invariant(!1),o}}},t.setDate=function(e){var t=e.formats,r=e.format,n=e.parse,o=e.firstOfWeek,a=e.propType,l=void 0===a?s:a;f(i,t),d={formats:t,propType:l,firstOfWeek:o,format:p(r),parse:function(e,t,r){var o=n.call(this,e,t,r);return null==o||o instanceof Date&&!isNaN(o.getTime())||invariant(!1),o}}},t.date=t.number=void 0;o(r(23)),r(19);var n=o(r(1));function o(e){return e&&e.__esModule?e:{default:e}}var s=n.default.oneOfType([n.default.string,n.default.func]),a=["default"],i=["default","date","time","header","footer","weekday","dayOfMonth","month","year","decade","century"],l=h(),u={propType:function(){var e;return(e=l).propType.apply(e,arguments)},getFormat:function(e,t){return t||l.formats[e]},parse:function(){var e;return(e=l).parse.apply(e,arguments)},format:function(){var e;return(e=l).format.apply(e,arguments)},decimalChar:function(){var e;return(e=l).decimalChar.apply(e,arguments)},precision:function(){var e;return(e=l).precision.apply(e,arguments)}};t.number=u;var d=h(),c={propType:function(){var e;return(e=d).propType.apply(e,arguments)},getFormat:function(e,t){return t||d.formats[e]},parse:function(){var e;return(e=d).parse.apply(e,arguments)},format:function(){var e;return(e=d).format.apply(e,arguments)},firstOfWeek:function(){var e;return(e=d).firstOfWeek.apply(e,arguments)}};t.date=c;var p=function(e){return function(t,r,n){var o="function"==typeof r?r(t,n,this):e.call(this,t,r,n);return null!=o&&"string"!=typeof o&&invariant(!1),o}};function f(e,t){0}function h(){return{}}},function(e,t,r){"use strict";e.exports=function(){}},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=i(r(0)),o=i(r(1)),s=i(r(9)),a=r(25);function i(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var u={className:o.default.string,role:o.default.string,nodeRef:o.default.func,emptyListMessage:o.default.node},d=function(e){var t,r;function o(){return e.apply(this,arguments)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,o.prototype.render=function(){var e=this.props,t=e.className,r=e.role,o=e.children,i=e.emptyListMessage,u=e.nodeRef,d=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["className","role","children","emptyListMessage","nodeRef"]),c=(0,a.instanceId)(this);return n.default.createElement("ul",l({id:c,tabIndex:"-1",ref:u,className:(0,s.default)(t,"rw-list"),role:void 0===r?"listbox":r},d),n.default.Children.count(o)?o:n.default.createElement("li",{className:"rw-list-empty"},i))},o}(n.default.Component);d.propTypes=u;var c=d;t.default=c,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=i(r(0)),o=i(r(1)),s=i(r(9)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(24));function i(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var u=function(e){var t,r;function o(){for(var t,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(t=e.call.apply(e,[this].concat(n))||this).handleSelect=function(e){var r=t.props,n=r.onSelect,o=r.disabled,s=r.dataItem;n&&!o&&n(s,e)},t}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,o.prototype.render=function(){var e=this.props,t=e.className,r=e.children,o=e.focused,i=e.selected,u=e.disabled,d=e.activeId,c=this.props.component||"li",p=a.omitOwn(this),f={"rw-state-focus":o,"rw-state-selected":i,"rw-state-disabled":u},h=o?d:void 0;return n.default.createElement(c,l({id:h,role:"option",tabIndex:u?void 0:"-1","aria-selected":!!i,className:(0,s.default)("rw-list-option",t,f),onClick:this.handleSelect},p),r)},o}(n.default.Component);u.propTypes={activeId:o.default.string,dataItem:o.default.any,index:o.default.number,focused:o.default.bool,selected:o.default.bool,disabled:o.default.bool,onSelect:o.default.func,component:o.default.string};var d=u;t.default=d,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=a(r(9)),o=a(r(0)),s=a(r(1));function a(e){return e&&e.__esModule?e:{default:e}}var i={className:s.default.string,component:s.default.string};function l(e){var t=e.children,r=e.className,s=e.component,a=void 0===s?"li":s;return o.default.createElement(a,{tabIndex:"-1",role:"separator",className:(0,n.default)(r,"rw-list-optgroup")},t)}l.propTypes=i;var u=l;t.default=u,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=l(r(9)),o=l(r(1)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),a=l(r(104)),i=r(18);function l(e){return e&&e.__esModule?e:{default:e}}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function c(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var p=function(e){function t(){return e.apply(this,arguments)||this}c(t,e);var r=t.prototype;return r.shouldComponentUpdate=function(e){return!!e.shouldUpdate},r.render=function(){var e=this.props,t=e.className,r=e.children,o=d(e,["className","children"]);return delete o.shouldUpdate,(0,s.cloneElement)(r,u({},o,{className:(0,n.default)(t,r.props.className,"rw-popup")}))},t}(s.default.Component);p.propTypes={shouldUpdate:function(){}};var f=function(e){function t(){return e.apply(this,arguments)||this}return c(t,e),t.prototype.render=function(){var e=this.props,t=e.className,r=e.dropUp,o=e.open,a=e.transition,i=d(e,["className","dropUp","open","transition"]);return s.default.createElement(a,u({},i,{in:o,dropUp:r,className:(0,n.default)(t,"rw-popup-container")}),s.default.createElement(p,{shouldUpdate:o},s.default.Children.only(this.props.children)))},t}(s.default.Component);f.defaultProps={open:!1,transition:a.default},f.propTypes={open:o.default.bool,dropUp:o.default.bool,onEntering:o.default.func,onEntered:o.default.func,transition:i.elementType};var h=f;t.default=h,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,o=p(r(9)),s=p(r(105)),a=p(r(43)),i=p(r(27)),l=r(45),u=p(r(1)),d=p(r(0)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(115));function p(e){return e&&e.__esModule?e:{default:e}}function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var h=((n={})[c.ENTERING]="rw-popup-transition-entering",n[c.EXITING]="rw-popup-transition-exiting",n[c.EXITED]="rw-popup-transition-exited",n),m={in:u.default.bool.isRequired,dropUp:u.default.bool,onEntering:u.default.func,onEntered:u.default.func};var g=function(e){var t,r;function n(){for(var t,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(t=e.call.apply(e,[this].concat(n))||this).setContainerHeight=function(e){e.style.height=t.getHeight()+"px"},t.clearContainerHeight=function(e){e.style.height=""},t.handleEntered=function(e){t.clearContainerHeight(e),t.props.onEntered&&t.props.onEntered()},t.handleEntering=function(){t.props.onEntering&&t.props.onEntering()},t.handleTransitionEnd=function(e,t){var r=function(e){var t=(0,a.default)(e,l.transitionDuration),r=-1===t.indexOf("ms")?1e3:1;return parseFloat(t)*r}(e.lastChild)||0,n=function r(){s.default.off(e,l.transitionEnd,r,!1),t()};setTimeout(n,1.5*r),s.default.on(e,l.transitionEnd,n,!1)},t.attachRef=function(e){return t.element=e},t}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var u=n.prototype;return u.getHeight=function(){var e,t=this.element,r=t.firstChild,n=parseInt((0,a.default)(r,"margin-top"),10)+parseInt((0,a.default)(r,"margin-bottom"),10),o=t.style.display;return t.style.display="block",e=((0,i.default)(r)||0)+(isNaN(n)?0:n),t.style.display=o,e},u.render=function(){var e=this,t=this.props,r=t.children,n=t.className,s=t.dropUp;return d.default.createElement(c.default,{appear:!0,in:this.props.in,timeout:5e3,onEnter:this.setContainerHeight,onEntering:this.handleEntering,onEntered:this.handleEntered,onExit:this.setContainerHeight,onExited:this.clearContainerHeight,addEndListener:this.handleTransitionEnd},function(t,a){return d.default.createElement("div",f({},a,{ref:e.attachRef,className:(0,o.default)(n,s&&"rw-dropup",h[t])}),d.default.createElement("div",{className:"rw-popup-transition"},r))})},n}(d.default.Component);g.propTypes=m;var v=g;t.default=v,e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=void 0;var o=n(r(39));t.on=o.default;var s=n(r(40));t.off=s.default;var a=n(r(106));t.filter=a.default;var i=n(r(107));t.listen=i.default;var l={on:o.default,off:s.default,filter:a.default,listen:i.default};t.default=l},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e,t){return function(r){var n=r.currentTarget,a=r.target,i=(0,s.default)(n,e);i.some(function(e){return(0,o.default)(e,a)})&&t.call(this,r)}};var o=n(r(41)),s=n(r(42));e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=void 0;var o=n(r(13)),s=n(r(39)),a=n(r(40)),i=function(){};o.default&&(i=function(e,t,r,n){return(0,s.default)(e,t,r,n),function(){(0,a.default)(e,t,r,n)}});var l=i;t.default=l,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(n,function(e,t){return t.toUpperCase()})};var n=/-(.)/g;e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e){return(0,o.default)(e).replace(s,"-ms-")};var o=n(r(110)),s=/^ms-/;e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(n,"-$1").toLowerCase()};var n=/([A-Z])/g;e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var r=e.style;"float"==(t=(0,o.default)(t))&&(t="styleFloat");var n=e.currentStyle[t]||null;if(null==n&&r&&r[t]&&(n=r[t]),a.test(n)&&!s.test(t)){var i=r.left,l=e.runtimeStyle,u=l&&l.left;u&&(l.left=e.currentStyle.left),r.left="fontSize"===t?"1em":n,n=r.pixelLeft+"px",r.left=i,u&&(l.left=u)}return n}}};var o=n(r(44)),s=/^(top|right|bottom|left)$/,a=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return!(!e||!n.test(e))};var n=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){return e&&e.ownerDocument||document},e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(1)),o=i(r(0)),s=i(r(12)),a=r(34);r(116);function i(e){return e&&e.__esModule?e:{default:e}}var l="unmounted";t.UNMOUNTED=l;var u="exited";t.EXITED=u;var d="entering";t.ENTERING=d;var c="entered";t.ENTERED=c;t.EXITING="exiting";var p=function(e){var t,r;function n(t,r){var n;n=e.call(this,t,r)||this;var o,s=r.transitionGroup,a=s&&!s.isMounting?t.enter:t.appear;return n.appearStatus=null,t.in?a?(o=u,n.appearStatus=d):o=c:o=t.unmountOnExit||t.mountOnEnter?l:u,n.state={status:o},n.nextCallback=null,n}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var a=n.prototype;return a.getChildContext=function(){return{transitionGroup:null}},n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===l?{status:u}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(e){var t=null;if(e!==this.props){var r=this.state.status;this.props.in?r!==d&&r!==c&&(t=d):r!==d&&r!==c||(t="exiting")}this.updateStatus(!1,t)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var e,t,r,n=this.props.timeout;return e=t=r=n,null!=n&&"number"!=typeof n&&(e=n.exit,t=n.enter,r=n.appear),{exit:e,enter:t,appear:r}},a.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var r=s.default.findDOMNode(this);t===d?this.performEnter(r,e):this.performExit(r)}else this.props.unmountOnExit&&this.state.status===u&&this.setState({status:l})},a.performEnter=function(e,t){var r=this,n=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,s=this.getTimeouts();t||n?(this.props.onEnter(e,o),this.safeSetState({status:d},function(){r.props.onEntering(e,o),r.onTransitionEnd(e,s.enter,function(){r.safeSetState({status:c},function(){r.props.onEntered(e,o)})})})):this.safeSetState({status:c},function(){r.props.onEntered(e)})},a.performExit=function(e){var t=this,r=this.props.exit,n=this.getTimeouts();r?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,n.exit,function(){t.safeSetState({status:u},function(){t.props.onExited(e)})})})):this.safeSetState({status:u},function(){t.props.onExited(e)})},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},a.setNextCallback=function(e){var t=this,r=!0;return this.nextCallback=function(n){r&&(r=!1,t.nextCallback=null,e(n))},this.nextCallback.cancel=function(){r=!1},this.nextCallback},a.onTransitionEnd=function(e,t,r){this.setNextCallback(r),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},a.render=function(){var e=this.state.status;if(e===l)return null;var t=this.props,r=t.children,n=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(t,["children"]);if(delete n.in,delete n.mountOnEnter,delete n.unmountOnExit,delete n.appear,delete n.enter,delete n.exit,delete n.timeout,delete n.addEndListener,delete n.onEnter,delete n.onEntering,delete n.onEntered,delete n.onExit,delete n.onExiting,delete n.onExited,"function"==typeof r)return r(e,n);var s=o.default.Children.only(r);return o.default.cloneElement(s,n)},n}(o.default.Component);function f(){}p.contextTypes={transitionGroup:n.object},p.childContextTypes={transitionGroup:function(){}},p.propTypes={},p.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:f,onEntering:f,onEntered:f,onExit:f,onExiting:f,onExited:f},p.UNMOUNTED=0,p.EXITED=1,p.ENTERING=2,p.ENTERED=3,p.EXITING=4;var h=(0,a.polyfill)(p);t.default=h},function(e,t,r){"use strict";t.__esModule=!0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",r="transition"+e;return function(e){if(e[r]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}},t.classNamesShape=t.timeoutsShape=void 0;var n,o=(n=r(1))&&n.__esModule?n:{default:n};var s=o.default.oneOfType([o.default.number,o.default.shape({enter:o.default.number,exit:o.default.number}).isRequired]);t.timeoutsShape=s;var a=o.default.oneOfType([o.default.string,o.default.shape({enter:o.default.string,exit:o.default.string,active:o.default.string}),o.default.shape({enter:o.default.string,enterDone:o.default.string,enterActive:o.default.string,exit:o.default.string,exitDone:o.default.string,exitActive:o.default.string})]);t.classNamesShape=a},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=i(r(0)),o=i(r(1)),s=i(r(9)),a=i(r(118));function i(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var u=function(e){var t,r;function o(){return e.apply(this,arguments)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,o.prototype.render=function(){var e=this.props,t=e.className,r=e.bordered,o=e.children,i=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["className","bordered","children"]);return n.default.createElement("span",{className:(0,s.default)(t,"rw-select",r&&"rw-select-bordered")},o?n.default.Children.map(o,function(e){return e&&n.default.cloneElement(e,{variant:"select"})}):n.default.createElement(a.default,l({},i,{variant:"select"})))},o}(n.default.Component);u.propTypes={bordered:o.default.bool};var d=u;t.default=d,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=a(r(0)),o=a(r(1)),s=a(r(9));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var l=function(){return n.default.createElement("span",{"aria-hidden":"true",className:"rw-i rw-loading"})},u=function(e){var t,r;function o(){return e.apply(this,arguments)||this}return r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,o.prototype.render=function(){var e=this.props,t=e.className,r=e.disabled,o=e.label,a=e.icon,u=e.busy,d=e.active,c=e.children,p=e.variant,f=void 0===p?"primary":p,h=e.spinner,m=void 0===h?n.default.createElement(l,null):h,g=e.component,v=void 0===g?"button":g,b=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["className","disabled","label","icon","busy","active","children","variant","spinner","component"]),y=b.type;return"button"===v&&(y=y||"button"),n.default.createElement(v,i({},b,{tabIndex:"-1",title:o,type:y,disabled:r,"aria-disabled":r,"aria-label":o,className:(0,s.default)(t,"rw-btn",d&&!r&&"rw-state-active",f&&"rw-btn-"+f)}),u?m:a,c)},o}(n.default.Component);u.propTypes={disabled:o.default.bool,label:o.default.string,icon:o.default.node,busy:o.default.bool,active:o.default.bool,variant:o.default.oneOf(["primary","select"]),component:o.default.any,spinner:o.default.node};var d=u;t.default=d,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=t.caretSet=void 0;var n=i(r(0)),o=i(r(1)),s=r(12),a=i(r(120));function i(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var u=function(e,t,r){void 0===r&&(r=t);try{e.setSelectionRange(t,r)}catch(e){}};t.caretSet=u;var d=function(e){var t,r;function o(){for(var t,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(t=e.call.apply(e,[this].concat(n))||this).handleChange=function(e){var r=t.props,n=r.placeholder,o=r.value,s=r.onChange,a=e.target.value;!!n&&!a&&a===(o||"")||(t._last=a,s(e,a))},t}r=e,(t=o).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var i=o.prototype;return i.componentDidUpdate=function(){var e=(0,s.findDOMNode)(this),t=this.props.value;if(this.isSuggesting()){var r=t.toLowerCase().indexOf(this._last.toLowerCase())+this._last.length,n=t.length-r;r>=0&&0!==n&&u(e,r,r+n)}},i.accept=function(e){if(void 0===e&&(e=!1),this._last=null,e){var t=(0,s.findDOMNode)(this);u(t,t.value.length)}},i.focus=function(){(0,s.findDOMNode)(this).focus()},i.isSuggesting=function(){var e=this.props,t=e.value;return!!e.suggest&&(null!=this._last&&-1!==t.toLowerCase().indexOf(this._last.toLowerCase()))},i.render=function(){var e=this.props,t=e.onKeyDown,r=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["onKeyDown"]);return delete r.suggest,n.default.createElement(a.default,l({},r,{className:"rw-widget-input",onKeyDown:t,onChange:this.handleChange}))},o}(n.default.Component);d.defaultProps={value:""},d.propTypes={value:o.default.string,placeholder:o.default.string,suggest:o.default.bool,onChange:o.default.func.isRequired,onKeyDown:o.default.func};var c=d;t.default=c},function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=a(r(0)),o=a(r(1)),s=a(r(9));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function l(e){var t=e.className,r=e.disabled,o=e.readOnly,a=e.value,l=e.tabIndex,u=e.nodeRef,d=e.type,c=void 0===d?"text":d,p=e.component,f=void 0===p?"input":p,h=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,["className","disabled","readOnly","value","tabIndex","nodeRef","type","component"]);return n.default.createElement(f,i({},h,{type:c,ref:u,tabIndex:l||0,autoComplete:"off",disabled:r,readOnly:o,"aria-disabled":r,"aria-readonly":o,value:null==a?"":a,className:(0,s.default)(t,"rw-input")}))}l.propTypes={disabled:o.default.bool,readOnly:o.default.bool,value:o.default.string,type:o.default.string,tabIndex:o.default.string,component:o.default.any,nodeRef:o.default.func};var u=l;t.default=u,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){var r=t.didHandle;return(0,n.focusManager)(e,s({},t,{onChange:function(t){e.setState({focused:t})},isDisabled:function(){return!0===e.props.disabled||(0,o.isInDisabledFieldset)(e)},didHandle:function(e,t){var n=this.props[e?"onFocus":"onBlur"];n&&n(t),r&&!t.isWidgetDefaultPrevented&&r(e,t)}}))};var n=r(47),o=r(49);function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){(0,a.default)(e,{componentDidMount:function(){var e=this.props.autoFocus;e&&(this.focus?this.focus():(0,s.findDOMNode)(this).focus())}})},t.PropTypes=void 0;var n,o=r(1),s=r(12),a=(n=r(21))&&n.__esModule?n:{default:n};var i={autoFocus:o.bool};t.PropTypes=i},function(e,t,r){"use strict";t.__esModule=!0,t.callFocusEventHandler=function(e,t,r){var n=e.props[t?"onFocus":"onBlur"];n&&n(r)},t.default=function(e,t){var r,a=void 0===t?{}:t,i=a.willHandle,l=a.didHandle,u=a.onChange,d=a.isDisabled,c=void 0===d?function(){return!!e.props.disabled}:d,p=(0,o.default)(e),f=(0,s.default)(e);function h(t,o){o&&o.persist&&o.persist(),i&&!1===i(t,o)||p.set("focus",function(){(0,n.unstable_batchedUpdates)(function(){t!==r&&(l&&l.call(e,t,o),!f()&&t||(r=t,u&&u(t,o)))})})}return{handleBlur:function(e){c()||h(!1,e)},handleFocus:function(e){c()||h(!0,e)}}};var n=r(12),o=a(r(48)),s=a(r(28));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function o(e,t){var r=t.propTypes,o=t.contextTypes,s=t.childContextTypes,a=t.getChildContext,i=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(t,["propTypes","contextTypes","childContextTypes","getChildContext"]);if(r&&(e.propTypes=n({},e.propTypes,r)),o&&(e.contextTypes=n({},e.contextTypes,o)),s&&(e.childContextTypes=n({},e.childContextTypes,s)),a){var l=e.prototype.getChildContext;e.prototype.getChildContext=function(){return n({},l&&l.call(this),a.call(this))}}return n(e.prototype,i),e}t.__esModule=!0,t.mixin=o,t.default=function(e){return function(t){return o(t,e)}}},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e,t){if(!o&&s.default){var r=document.body,n=r.matches||r.matchesSelector||r.webkitMatchesSelector||r.mozMatchesSelector||r.msMatchesSelector;o=n?function(e,t){return n.call(e,t)}:i}return o?o(e,t):null};var o,s=n(r(13)),a=n(r(42));function i(e,t){for(var r=(0,a.default)(e.document||e.ownerDocument,t),n=0;r[n]&&r[n]!==e;)n++;return!!r[n]}e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e){var t=e.textField,r=e.valueField;return{text:function(e){return n.dataText(e,t)},value:function(e){return n.dataValue(e,r)},indexOf:function(e,t){return n.dataIndexOf(e,t,r)},matches:function(e,t){return n.valueMatcher(e,t,r)},findOrSelf:function(e,t){return n.dataItem(e,t,r)},includes:function(e,t){return-1!==n.dataIndexOf(e,t,r)}}};var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(26));e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){void 0===t&&(t=function(e){return e.parentNode});var r,n,a,i=(0,s.mountManager)(e);return function(e,t,s){if(!i())return;var l,u=n,d=r;n=!(!t.offsetWidth||!t.offsetHeight),r=s,l=d!==s,(n&&!u||n&&l)&&(this.props.onMove?this.props.onMove(e,t,s):(a&&a(),a=(0,o.default)(e,!1)))}.bind(e)};var n,o=(n=r(128))&&n.__esModule?n:{default:n},s=r(47);e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e,t){var r,n,d,c,p,f,h,m=(0,o.default)(e),g={top:0,left:0};if(!e)return;r=t||(0,a.default)(e),c=(0,u.default)(r),n=(0,i.default)(r),f=(0,s.default)(r,!0),(c=(0,u.default)(r))||(g=(0,o.default)(r));m={top:m.top-g.top,left:m.left-g.left,height:m.height,width:m.width},p=m.height,d=m.top+(c?0:n),h=d+p,n=n>d?d:h>n+f?h-f:n;var v=(0,l.default)(function(){return(0,i.default)(r,n)});return function(){return l.default.cancel(v)}};var o=n(r(46)),s=n(r(27)),a=n(r(129)),i=n(r(130)),l=n(r(131)),u=n(r(20));e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e,"position"),r="absolute"===t,n=e.ownerDocument;if("fixed"===t)return n||document;for(;(e=e.parentNode)&&9!==e.nodeType;){var a=r&&"static"===(0,o.default)(e,"position"),i=(0,o.default)(e,"overflow")+(0,o.default)(e,"overflow-y")+(0,o.default)(e,"overflow-x");if(!a&&(/(auto|scroll)/.test(i)&&(0,s.default)(e)<e.scrollHeight))return e}return document};var o=n(r(43)),s=n(r(27));e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=function(e,t){var r=(0,o.default)(e);if(void 0===t)return r?"pageYOffset"in r?r.pageYOffset:r.document.documentElement.scrollTop:e.scrollTop;r?r.scrollTo("pageXOffset"in r?r.pageXOffset:r.document.documentElement.scrollLeft,t):e.scrollTop=t};var o=n(r(20));e.exports=t.default},function(e,t,r){"use strict";var n=r(4);t.__esModule=!0,t.default=void 0;var o,s=n(r(13)),a="clearTimeout",i=function(e){var t=(new Date).getTime(),r=Math.max(0,16-(t-u)),n=setTimeout(e,r);return u=t,n},l=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};s.default&&["","webkit","moz","o","ms"].some(function(e){var t=l(e,"request");if(t in window)return a=l(e,"cancel"),i=function(e){return window[t](e)}});var u=(new Date).getTime();(o=function(e){return i(e)}).cancel=function(e){window[a]&&"function"==typeof window[a]&&window[a](e)};var d=o;t.default=d,e.exports=t.default},function(e,t,r){"use strict";t.__esModule=!0,t.default=t.search=t.clock=t.calendar=t.chevronLeft=t.chevronRight=t.caretDown=t.caretUp=void 0;var n=s(r(1)),o=s(r(0));function s(e){return e&&e.__esModule?e:{default:e}}var a={icon:n.default.string.isRequired},i=function(e){var t=e.icon;return o.default.createElement("span",{"aria-hidden":"true",className:"rw-i rw-i-"+t})};i.propTypes=a;var l=o.default.createElement(i,{icon:"caret-up"});t.caretUp=l;var u=o.default.createElement(i,{icon:"caret-down"});t.caretDown=u;var d=o.default.createElement(i,{icon:"chevron-right"});t.chevronRight=d;var c=o.default.createElement(i,{icon:"chevron-left"});t.chevronLeft=c;var p=o.default.createElement(i,{icon:"calendar"});t.calendar=p;var f=o.default.createElement(i,{icon:"clock-o"});t.clock=f;var h=o.default.createElement(i,{icon:"search"});t.search=h;var m=i;t.default=m},function(e,t,r){var n=r(134);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .user-role-row{width:100%;float:left;padding:13px 20px;box-sizing:border-box;text-align:left}#users-container .user-role-row:not(:last-child){border-bottom:1px solid #C8C8C8}#users-container .user-role-row div.edit-row a{display:inline-block}#users-container .user-role-row .dnn-grid-cell{box-sizing:border-box}#users-container .user-role-row .dnn-grid-cell .actions{float:right;box-sizing:border-box;height:20px;text-align:right}#users-container .user-role-row .dnn-grid-cell .actions>div{text-align:left;float:left}#users-container .user-role-row .dnn-grid-cell .actions span{float:left}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker{height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:0;width:19px;height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon.active{opacity:1}#users-container .user-role-row .dnn-grid-cell .actions span a svg{width:23px;height:23px}#users-container .user-role-row .dnn-grid-cell .actions a{float:left;opacity:0}#users-container .user-role-row .dnn-grid-cell .actions:hover a{display:inline-block}#users-container .user-role-row .dnn-grid-cell .actions div.edit-row a{display:inline-block}#users-container .user-role-row:hover .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:1}#users-container .user-role-row:hover .dnn-grid-cell .actions a{opacity:1}",""])},function(e,t,r){var n=r(136);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,'svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .userroles-form-form{width:80%;margin:20px 10%;float:left;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list{float:left;width:100%;margin:15px 0;display:table;cursor:auto;box-sizing:border-box;border:1px solid #C8C8C8;text-align:left}#users-container .userroles-form-form .user-roles-list .user-role-body{color:#6F7273}#users-container .userroles-form-form .user-roles-list .user-role-body .no-roles-row{width:100%;float:left;text-align:center;font-weight:bold;padding:13px 20px;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list .user-role-header-row{display:table;border-bottom:1px solid #C8C8C8;width:100%;float:left;position:relative;padding:15px 20px;box-sizing:border-box;text-transform:uppercase}#users-container .userroles-form-form .user-roles-list-paging{text-align:left}#users-container .userroles-form-form .header{width:100%;float:left;box-sizing:border-box}#users-container .userroles-form-form .header .header-title{text-align:left;width:100%;font-weight:bold;display:inline-block;text-transform:uppercase;margin-top:10px;margin-bottom:10px}#users-container .userroles-form-form .header .add-box{width:100%;float:left;box-sizing:border-box;border-bottom:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box .dnn-grid-cell{padding:0px}#users-container .userroles-form-form .header .add-box .send-email-box{width:100%;float:left}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container{float:left;margin-top:10px;margin-right:10px}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container .checkbox{margin-bottom:0px}#users-container .userroles-form-form .header .add-box .send-email-box label{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span{width:100%;display:inline-block;border-left:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox{float:left;width:250px;height:34px;line-height:34px;vertical-align:middle;padding:0;border:none;color:#46292B;border-radius:0;display:inline-block;box-shadow:none;background:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox button{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-webkit-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox :-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox :-ms-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox input{-webkit-box-shadow:none;padding:0 0 0 12px;height:100%;vertical-align:top;background-color:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox input::-ms-clear{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container{box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup{border-radius:0px;border:1px solid #C8C8C8;box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list{margin:0;padding:0}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li{padding-left:15px;height:30px;line-height:30px;color:#6F7273;border:none;outline:none;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li:hover{background-color:#EFF0F0;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li.rw-state-selected{background-color:transparent;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .add-role-button{float:right;text-align:right;width:auto;font-weight:bolder;overflow:hidden;cursor:pointer;box-sizing:border-box;padding-top:10px}#users-container .userroles-form-form .header .add-box span .add-role-button svg{fill:#6F7273}#users-container .userroles-form-form .header .add-box span .add-role-button span{border:none}#users-container .userroles-form-form .header .add-box span .add-role-button .extension-action{float:left}#users-container .userroles-form-form .header .add-box span button[role="secondary"]{vertical-align:middle;margin:0 0 0 10px}',""])},function(e,t,r){(t=e.exports=r(7)(!1)).push([e.i,"._30Ywg8MZnSyy25yOY32zZ2 .dnn-grid-cell{overflow-wrap:break-word}._30Ywg8MZnSyy25yOY32zZ2 .dnn-grid-cell.no-users{float:left;width:100%;text-align:center;padding:10px}",""]),t.locals={usersList:"_30Ywg8MZnSyy25yOY32zZ2"}},function(e,t,r){var n=r(139);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.users-filter-container{float:left;box-sizing:border-box;margin-bottom:15px;width:100%;border:none}.users-filter-container .dnn-grid-cell{margin-bottom:5px}.users-filter-container .dnn-grid-cell .user-filters-filter{width:100%;border-right:1px solid #C8C8C8;font-size:13px;font-family:inherit;float:left;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-label{padding-top:4px;padding-left:0}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .dropdown-icon{top:5px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box{width:100%;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box input{padding:0px 16px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-toggle{width:auto}.users-filter-container .dnn-grid-cell .search-filter{float:left;width:100%}.users-filter-container .dnn-grid-cell .search-filter>div{display:block !important;border-left:1px solid #C8C8C8}.users-filter-container .dnn-grid-cell .search-filter>div input{display:block;width:100%;position:inherit !important;border:none;border-radius:none;background-color:transparent;outline:none;padding-right:45px}",""])},function(e,t,r){var n=r(141);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(8)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(7)(!1)).push([e.i,"#users-container *{box-sizing:border-box}#users-container .create-user-box-collapse{float:left}#users-container .create-user-box-collapse>div{float:left}#users-container .header-row{padding:10px 15px 10px}#users-container .user-names{padding-left:17px !important}#users-container .user-emails,#users-container .user-joined{padding-left:15px !important}#users-container .dnn-persona-bar-page-body.without-margin{margin-top:0}#users-container .dnn-persona-bar-page-body .users-workspace-tray{height:37px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell{height:100%;padding-top:7px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .users-filter-container .user-filters-filter{height:30px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .users-filter-container .user-filters-filter .dnn-dropdown .collapsible-label{padding-top:4px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .users-filter-container .user-filters-filter .dnn-dropdown .dropdown-icon{top:5px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .dnn-search-box{width:100%;height:30px}#users-container .dnn-persona-bar-page-body .users-paging{float:left;width:100%;margin:0 2px;padding:18px}",""])},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n),s=r(1),a=r.n(s),i=r(3),l=Object.assign({},window.dnn.utility),u={get:function(e){return l.getResx("Users",e)}},d=r(10),c=r.n(d),p=r(2),f=r.n(p),h=r(56),m=r.n(h),g=r(57),v=r.n(g);r(74);class b extends n.Component{render(){return o.a.createElement(f.a,{columnSize:100,className:"header-row"},this.props.headers.map((e,t)=>o.a.createElement(f.a,{key:`header-row-grid-cell-${t}`,columnSize:e.size,className:e.header?"":"empty"},o.a.createElement("h6",null,e.header||"Default"))))}}b.propTypes={headers:a.a.array.isRequired};var y=b,w=r(58),x=r.n(w),E=r(59),S=r.n(E);function C(e,t){if(!e)return"";return new Date(e).getFullYear()<1900?"-":S()(e).locale(l.getCulture()).format(!0===t?"LLL":"L")}function O(e){return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)}function _(e,t,r){return r=void 0===r?"asc":r,e=e.sort(function(e,n){return e[t]>n[t]?"asc"===r?1:-1:e[t]<n[t]?"asc"===r?-1:1:0})}var D=r(60),U=r.n(D);r(33);class I extends n.Component{render(){return o.a.createElement("ul",{className:"dnn-user-menu menu"},this.props.children)}}I.propTypes={children:a.a.node};var P=I;class R extends n.Component{constructor(){super(),this.state={hover:!1}}render(){return o.a.createElement("li",{className:"dnn-user-menu menu-item",onMouseEnter:()=>this.setState({hover:!0}),onMouseLeave:()=>this.setState({hover:!1}),onClick:this.props.onMenuAction},this.props.children)}}R.propTypes={onMenuAction:a.a.func.isRequired,children:a.a.node.isRequired};var T=R;var M={RETRIEVED_USERS:"RETRIEVED_USERS",RETRIEVED_USER_DETAILS:"RETRIEVED_USER_DETAILS",CREATE_USER:"CREATE_USER",UPDATE_USER:"UPDATE_USER",DELETE_USER:"DELETE_USER",ERASE_USER:"ERASE_USER",RESTORE_USER:"RESTORE_USER",RETRIEVED_USER_FILTERS:"RETRIEVED_USER_FILTERS",USER_MADE_SUPERUSER:"USER_MADE_SUPERUSER",RETRIEVED_USERS_ROLES:"RETRIEVED_USERS_ROLES",RETRIEVED_SUGGEST_ROLES:"RETRIEVED_SUGGEST_ROLES",SAVE_USER_ROLE:"SAVE_USER_ROLE",REMOVE_USER_ROLE:"REMOVE_USER_ROLE",UPDATE_USER_AUTHORIZE_STATUS:"UPDATE_USER_AUTHORIZE_STATUS",USER_UNLOCKED:"USER_UNLOCKED",RETRIEVED_PASSWORD_STRENGTH_OPTIONS:"RETRIEVED_PASSWORD_STRENGTH_OPTIONS"};function k(e){let t=[];for(let r in e)e.hasOwnProperty(r)&&t.push(encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return t.join("&")}var N=new class{getServiceFramework(e){let t=l.sf;return t.moduleRoot="PersonaBar",t.controller=e,t}getUsers(e,t,r){this.getServiceFramework("Users").get("GetUsers?"+k(e),{},t,r)}getUserDetails(e,t,r){this.getServiceFramework("Users").get("GetUserDetail?"+k(e),{},t,r)}updateUserBasicInfo(e,t,r){this.getServiceFramework("Users").post("UpdateUserBasicInfo",e,t,r)}getUserFilters(e,t){this.getServiceFramework("Users").get("GetUserFilters",{},e,t)}createUser(e,t,r){this.getServiceFramework("Users").post("CreateUser",e,t,r)}changePassword(e,t,r){this.getServiceFramework("Users").post("ChangePassword",e,t,r)}forceChangePassword(e,t,r){this.getServiceFramework("Users").post("ForceChangePassword?"+k(e),null,t,r)}sendPasswordResetLink(e,t,r){this.getServiceFramework("Users").post("SendPasswordResetLink?"+k(e),null,t,r)}deleteUser(e,t,r){this.getServiceFramework("Users").post("SoftDeleteUser?"+k(e),null,t,r)}hardDeleteUser(e,t,r){this.getServiceFramework("Users").post("HardDeleteUser?"+k(e),null,t,r)}restoreUser(e,t,r){this.getServiceFramework("Users").post("RestoreDeletedUser?"+k(e),null,t,r)}updateSuperUserStatus(e,t,r){this.getServiceFramework("Users").post("UpdateSuperUserStatus?"+k(e),null,t,r)}updateAuthorizeStatus(e,t,r){this.getServiceFramework("Users").post("UpdateAuthorizeStatus?"+k(e),null,t,r)}unlockUser(e,t,r){this.getServiceFramework("Users").post("UnlockUser?"+k(e),null,t,r)}getUserRoles(e,t,r){this.getServiceFramework("Users").get("GetUserRoles?"+k(e),{},t,r)}getSuggestRoles(e,t,r){this.getServiceFramework("Users").get("GetSuggestRoles?"+k(e),{},t,r)}saveUserRole(e,t,r,n,o){this.getServiceFramework("Users").post("SaveUserRole?notifyUser="+t+"&isOwner="+r,e,n,o)}removeUserRole(e,t,r){this.getServiceFramework("Users").post("RemoveUserRole",e,t,r)}passwordStrengthOptions(e,t){this.getServiceFramework("Users").get("PasswordStrengthOptions",{},e,t)}};function j(e){l.notifyError(JSON.parse(e.responseText).Message,5e3)}var A={getUsers:(e,t)=>r=>{N.getUsers(e,e=>{r({type:M.RETRIEVED_USERS,payload:e}),t&&t(e)},j)},getUserDetails:(e,t)=>r=>{N.getUserDetails(e,e=>{r({type:M.RETRIEVED_USER_DETAILS,payload:e}),t&&t(e)},j)},getUserFilters:e=>()=>{N.getUserFilters(t=>{e&&e(t)},j)},createUser:(e,t,r)=>n=>{N.createUser(e,e=>{n({type:M.CREATE_USER,payload:e,filter:t}),r&&r(e)},j)},updateUserBasicInfo:(e,t)=>r=>{N.updateUserBasicInfo(e,e=>{r({type:M.UPDATE_USER,payload:e}),t&&t(e)},j)},changePassword:(e,t)=>()=>{N.changePassword(e,e=>{t&&t(e)},j)},forceChangePassword:(e,t)=>()=>{N.forceChangePassword(e,e=>{t&&t(e)},j)},sendPasswordResetLink:(e,t)=>()=>{N.sendPasswordResetLink(e,e=>{t&&t(e)},j)},deleteUser:(e,t,r)=>n=>{let o=Object.assign({},e.userDetails);o.isDeleted=!0,N.deleteUser({userId:e.userDetails.userId},e=>{n({type:M.DELETE_USER,payload:o,filter:t}),r&&r(e)},j)},eraseUser:(e,t)=>r=>{N.hardDeleteUser(e,n=>{r({type:M.ERASE_USER,payload:{userId:e.userId}}),t&&t(n)},j)},restoreUser:(e,t,r)=>n=>{let o=Object.assign({},e.userDetails);o.isDeleted=!1,N.restoreUser({userId:e.userDetails.userId},e=>{n({type:M.RESTORE_USER,payload:o,filter:t}),r&&r(e)},j)},updateSuperUserStatus:(e,t,r)=>n=>{N.updateSuperUserStatus(e,o=>{n({type:M.USER_MADE_SUPERUSER,payload:{userId:e.userId,setSuperUser:e.setSuperUser},filter:t}),r&&r(o)},j)},updateAuthorizeStatus:(e,t,r,n)=>o=>{let s=Object.assign({},e.userDetails);s.authorized=t,N.updateAuthorizeStatus({userId:e.userDetails.userId,authorized:t},e=>{o({type:M.UPDATE_USER_AUTHORIZE_STATUS,payload:s,filter:r}),n&&n(e)},j)},unLockUser:(e,t)=>r=>{let n=Object.assign({},e.userDetails);N.unlockUser({userId:e.userDetails.userId},e=>{r({type:M.USER_UNLOCKED,payload:n}),t&&t(e)},j)},getUserRoles:(e,t)=>r=>{N.getUserRoles(e,e=>{r({type:M.RETRIEVED_USERS_ROLES,payload:e}),t&&t(e)},j)},passwordStrength:()=>e=>{N.passwordStrengthOptions(t=>{e({type:M.RETRIEVED_PASSWORD_STRENGTH_OPTIONS,payload:t})})},getSuggestRoles:(e,t)=>r=>{N.getSuggestRoles(e,e=>{r({type:M.RETRIEVED_SUGGEST_ROLES,payload:{matchedRoles:e}}),t&&t(e)},j)},saveUserRole:(e,t,r,n)=>o=>{N.saveUserRole(e,t,r,e=>{o({type:M.SAVE_USER_ROLE,payload:e}),n&&n(e)},j)},removeUserRole:(e,t)=>r=>{N.removeUserRole(e,n=>{r({type:M.REMOVE_USER_ROLE,payload:{userId:e.userId,roleId:e.roleId}}),t&&t(n)},j)}},L=r(5),F=r.n(L),z=r(6),q=r.n(z);r(78);const V={width:"100%"},B={userId:0,password:""};class H extends n.Component{constructor(e){super(e),this.state={changePassword:Object.assign({},B),errors:{password:!1,confirmPassword:!1,passwordsMatch:!1},confirmPassword:""}}componentWillMount(){let{changePassword:e}=this.state;e.userId=this.props.userId,e.password="",this.setState({changePassword:e})}componentWillReceiveProps(e){this.clear(()=>{let{changePassword:t}=this.state;t.userId=e.userId,this.setState({changePassword:t})})}onChange(e,t){if("confirmPassword"===e)this.setState({confirmPassword:t.target.value},()=>{this.validateForm()});else{let{changePassword:r}=this.state;r[e]=t.target.value,this.setState({changePassword:r},()=>{this.validateForm()})}}save(){this.validateForm()&&this.props.dispatch(A.changePassword(this.state.changePassword,()=>{this.cancel(),l.notify(u.get("ChangeSuccessful"),3e3)}))}validateForm(){let e=!0,{errors:t}=this.state;t.password=!1,t.confirmPassword=!1,t.passwordsMatch=!1;let{changePassword:r}=this.state,{confirmPassword:n}=this.state;return""===r.password&&(t.password=!0,e=!1),""===r.confirmPassword?(t.confirmPassword=!0,e=!1):n!==r.password&&(t.passwordsMatch=!0,e=!1),this.setState({errors:t}),e}clear(e){this.setState({changePassword:Object.assign({},B),confirmPassword:"",errors:{password:!1,confirmPassword:!1,passwordsMatch:!1}},()=>{"function"==typeof e&&e()})}cancel(){this.clear(),"function"==typeof this.props.onCancel&&this.props.onCancel()}render(){let{state:e}=this;return this.props.visible&&o.a.createElement("div",{className:"dnn-user-change-password"},o.a.createElement(f.a,{className:"do-not-close"},o.a.createElement(f.a,null,o.a.createElement("div",{className:"title"},u.get("ChangePassword")),o.a.createElement(q.a,{label:u.get("NewPassword"),error:e.errors.password,onChange:this.onChange.bind(this,"password"),tooltipMessage:u.get("NewPassword.Help"),errorMessage:u.get("NewPassword.Required"),style:V,type:"password",autoComplete:"off",inputStyle:{marginBottom:15},value:e.changePassword.password}),o.a.createElement(q.a,{label:u.get("NewConfirm"),error:e.errors.confirmPassword||e.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:u.get("NewConfirm.Help"),errorMessage:e.errors.confirmPassword?u.get("NewConfirm.Required"):u.get("NewConfirmMismatch.ErrorMessage"),style:V,type:"password",inputStyle:{marginBottom:15},autoComplete:"off",value:e.confirmPassword})),o.a.createElement(F.a,null,o.a.createElement(c.a,{className:"right do-not-close",id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this)},u.get("btnCancel")),o.a.createElement(c.a,{id:"confirmbtn do-not-close",type:"primary",onClick:this.save.bind(this)},u.get("btnApply")))))}}H.propTypes={dispatch:a.a.func.isRequired,userId:a.a.array.isRequired,visible:a.a.bool,onCancel:a.a.func},H.defaultProps={visible:!0};var W=Object(i.connect)(function(e){return{userDetails:e.users.userDetails}})(H);r(80);function G(e,t){return!t.isSuperUser&&(e.isAdmin||e.permissions.MANAGE_ROLES)}function K(e){return e.isAdmin||e.permissions.MANAGE_PROFILE}function Q(e){return e.isAdmin||e.permissions.VIEW_SETTINGS}function Y(e,t){return e.isAdmin||e.permissions.MANAGE_PASSWORD}function Z(e){return e.isAdmin||e.permissions.EDIT_SETTINGS}class $ extends n.Component{constructor(e){super(e),this.state={userDetails:e.userDetails,ChangePasswordVisible:!1},this.showMenu=!1,this.handleClick=this.handleClick.bind(this)}handleClick(e){("string"!=typeof e.target.className||"string"==typeof e.target.className&&-1===e.target.className.indexOf("menu-item"))&&this.props.onClose()}componentWillMount(){document.addEventListener("click",this.handleClick,!1);let{props:e}=this;void 0===e.userDetails||e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}componentWillReceiveProps(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}getUserDetails(e){e.dispatch(A.getUserDetails({userId:e.userId},e=>{let t=Object.assign({},e);this.setState({userDetails:t},()=>{this.showMenu=!0})}))}reload(){this.getUserDetails(this.props)}componentWillUnmount(){document.removeEventListener("click",this.handleClick,!1)}sort(e,t,r){return r=void 0===r?"asc":r,e=e.sort(function(e,n){return e[t]>n[t]?"asc"===r?1:-1:e[t]<n[t]?"asc"===r?-1:1:0})}onItemClick(e){switch(e){case"ResetPassword":this.onSendPasswordLink(),this.props.onClose();break;case"ChangePassword":this.toggleChangePassword();break;case"ForceChangePassword":this.forcePasswordChange(),this.props.onClose();break;case"DeleteUser":this.deleteUser(),this.props.onClose();break;case"RemoveUser":this.hardDeleteUser(),this.props.onClose();break;case"RestoreUser":this.restoreUser(),this.props.onClose();break;case"cmdUnAuthorize":this.updateAuthorizeStatus(!1),this.props.onClose();break;case"cmdAuthorize":this.updateAuthorizeStatus(!0),this.props.onClose();break;case"cmdUnLock":this.unLockUser(),this.props.onClose();break;case"PromoteToSuperUser":this.updateSuperUserStatus(!0),this.props.onClose();break;case"DemoteToRegularUser":this.updateSuperUserStatus(!1),this.props.onClose();break;case"ViewProfile":this.onViewProfile(),this.props.onClose();break;default:"function"==typeof this.props.userMenuAction&&this.props.userMenuAction(e,this.state.userDetails),this.props.onClose()}}onViewProfile(){l.closePersonaBar(()=>{window.top.location=this.state.userDetails.profileUrl})}onSendPasswordLink(){this.props.dispatch(A.sendPasswordResetLink({userId:this.props.userId},()=>{l.notify(u.get("PasswordSent"),1e4)}))}deleteUser(){l.confirm(u.get("DeleteUser.Confirm"),u.get("Delete"),u.get("Cancel"),()=>{this.props.dispatch(A.deleteUser({userDetails:this.props.userDetails},this.props.filter,()=>{l.notify(u.get("UserDeleted"),3e3),this.reload()}))})}hardDeleteUser(){l.confirm(u.get("RemoveUser.Confirm"),u.get("Delete"),u.get("Cancel"),()=>{this.props.dispatch(A.eraseUser({userId:this.props.userId}))})}restoreUser(){this.props.dispatch(A.restoreUser({userDetails:this.props.userDetails},this.props.filter,()=>{l.notify(u.get("UserRestored"),3e3),this.reload()}))}forcePasswordChange(){this.props.dispatch(A.forceChangePassword({userId:this.props.userId},()=>{l.notify(u.get("UserPasswordUpdateChanged"),1e4),this.reload()}))}updateAuthorizeStatus(e){this.props.dispatch(A.updateAuthorizeStatus({userDetails:this.props.userDetails},e,this.props.filter,()=>{l.notify(e?u.get("UserAuthorized"):u.get("UserUnAuthorized"),3e3),this.reload()}))}unLockUser(){this.props.dispatch(A.unLockUser({userDetails:this.props.userDetails},()=>{l.notify(u.get("UserUnLocked"),3e3),this.reload()}))}updateSuperUserStatus(e){this.props.dispatch(A.updateSuperUserStatus({userId:this.props.userId,setSuperUser:e},this.props.filter,()=>{this.reload()}))}toggleChangePassword(e){const t=!this.state.ChangePasswordVisible;this.setState({ChangePasswordVisible:t}),e&&this.props.onClose()}render(){let e=[{key:"ViewProfile",title:u.get("ViewProfile"),index:10}];var t,r;return t=this.props.appSettings.applicationSettings.settings,r=this.state.userDetails.userId,t.isHost&&r!==t.userId&&(this.state.userDetails.isSuperUser?this.state.userDetails.isSuperUser&&(e=[{key:"DemoteToRegularUser",title:u.get("DemoteToRegularUser"),index:80}].concat(e)):e=[{key:"PromoteToSuperUser",title:u.get("PromoteToSuperUser"),index:80}].concat(e)),Y(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(e=[{key:"ResetPassword",title:u.get("ResetPassword"),index:40}].concat(e),e=[{key:"ChangePassword",title:u.get("ChangePassword"),index:30}].concat(e),this.state.userDetails.needUpdatePassword||(e=[{key:"ForceChangePassword",title:u.get("ForceChangePassword"),index:40}].concat(e))),function(e,t){return(e.isAdmin||e.permissions.DELETE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(this.state.userDetails.isDeleted?(e=[{key:"RestoreUser",title:u.get("RestoreUser"),index:70}].concat(e),e=[{key:"RemoveUser",title:u.get("RemoveUser"),index:60}].concat(e)):e=[{key:"DeleteUser",title:u.get("DeleteUser"),index:60}].concat(e)),function(e,t){return(e.isAdmin||e.permissions.AUTHORIZE_UNAUTHORIZE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(e=this.state.userDetails.authorized?[{key:"cmdUnAuthorize",title:u.get("cmdUnAuthorize"),index:50}].concat(e):[{key:"cmdAuthorize",title:u.get("cmdAuthorize"),index:50}].concat(e),this.state.userDetails.isLocked&&(e=[{key:"cmdUnLock",title:u.get("cmUnlockUser"),index:100}].concat(e))),e=e.concat(this.props.getUserMenu&&this.props.getUserMenu(this.state.userDetails)||[]),e=this.sort(e,"index"),this.showMenu?o.a.createElement(f.a,{className:"dnn-user-menu menu-popup",ref:e=>this.rootElement=e},!this.state.ChangePasswordVisible&&o.a.createElement(P,null,e.map((e,t)=>o.a.createElement(T,{key:`menu_item_${t}`,onMenuAction:this.onItemClick.bind(this,e.key)},e.title))),this.state.ChangePasswordVisible&&o.a.createElement(W,{onCancel:this.toggleChangePassword.bind(this,!0),userId:this.props.userId})):o.a.createElement("div",null)}}$.propTypes={dispatch:a.a.func.isRequired,userId:a.a.number.isRequired,onClose:a.a.func.isRequired,userDetails:a.a.object,getUserMenu:a.a.func.isRequired,userMenuAction:a.a.func.isRequired,appSettings:a.a.object,filter:a.a.number};var X=Object(i.connect)(function(e){return{userDetails:e.users.userDetails}})($),J=r(11),ee=[{index:5,size:30},{index:10,size:30},{index:15,size:20},{index:25,size:20}],te=r(30),re=r.n(te);class ne extends n.Component{constructor(){super(),this.handleClick=this.handleClick.bind(this),this.state={opened:!1,showMenu:!1}}componentDidMount(){document.addEventListener("click",this.handleClick),this._isMounted=!0}componentWillUnmount(){document.removeEventListener("click",this.handleClick),this._isMounted=!1}componentWillMount(){let e=""!==this.props.openId&&this.props.id===this.props.openId;this.setState({opened:e})}handleClick(e){this._isMounted&&"string"==typeof e.target.className&&-1===e.target.className.indexOf("do-not-close")&&"confirmbtn"!==e.target.id&&"cancelbtn"!==e.target.id&&"add"!==this.props.openId&&""!==this.props.openId&&this.props.id===this.props.openId&&this.props.Collapse()}toggle(e){""!==this.props.openId&&this.props.id===this.props.openId&&this.props.currentIndex===e?this.props.Collapse():this.props.OpenCollapse(this.props.id,e)}toggleUserMenu(){const e=!this.state.showMenu;this.setState({showMenu:e})}getUserActions(e,t){let r=[];r=r.concat(this.props.getUserTabsIcons&&this.props.getUserTabsIcons(e)||[]),K(this.props.appSettings.applicationSettings.settings)&&(r=r.concat([{index:15,icon:J.UserIcon,title:u.get("ManageProfile.title")}])),Q(this.props.appSettings.applicationSettings.settings)&&(r=r.concat([{index:10,icon:J.SettingsIcon,title:u.get("ManageSettings.title")}])),G(this.props.appSettings.applicationSettings.settings,e)&&(r=r.concat([{index:5,icon:J.ShieldIcon,title:u.get("ManageRoles.title")}]));let n=0,s=_(r,"index","desc").map(e=>{let r=o.a.createElement("div",{key:`user_action_${n}`,title:e.title,className:"extension-action "+!(t&&this.props.currentIndex===n),dangerouslySetInnerHTML:{__html:e.icon},onClick:this.toggle.bind(this,n)});return n++,r});return[o.a.createElement("div",{key:`user_action_wrapper_${e.userId}`,style:{position:"relative"}},o.a.createElement("div",{className:"extension-action "+!this.state.showMenu,dangerouslySetInnerHTML:{__html:J.MoreMenuIcon},onClick:this.toggleUserMenu.bind(this)}),this.state.showMenu&&o.a.createElement(X,{filter:this.props.filter,appSettings:this.props.appSettings,getUserMenu:this.props.getUserMenu&&this.props.getUserMenu.bind(this),userMenuAction:this.props.userMenuAction&&this.props.userMenuAction.bind(this),onClose:this.toggleUserMenu.bind(this),userId:e.userId}))].concat(s)}getUserColumns(e,t,r){let n=this.getUserActions(e,r),s=this.props.getUserColumns&&this.props.getUserColumns(e),a=void 0!==this.props.columnSizes?this.props.columnSizes:ee;return _([{index:5,content:o.a.createElement(f.a,{columnSize:a.find(e=>5===e.index).size,className:"user-names"+(e.isDeleted?" deleted":"")},o.a.createElement("h6",null,o.a.createElement(re.a,{className:"email-link",text:e.displayName,maxWidth:125})),"-"!==e.displayName&&o.a.createElement("p",null,e.userName))},{index:10,content:o.a.createElement(f.a,{columnSize:a.find(e=>10===e.index).size,className:"user-emails"+(e.isDeleted?" deleted":"")},o.a.createElement(re.a,{className:"email-link",isAnchor:!0,href:"mailto:"+e.email,text:e.email,maxWidth:125}))},{index:15,content:o.a.createElement(f.a,{columnSize:a.find(e=>15===e.index).size,className:"user-joined"+(e.isDeleted?" deleted":"")},"-"!==e.createdOnDate&&o.a.createElement("p",null,C(e.createdOnDate)),"-"===e.createdOnDate&&e.createdOnDate)},{index:25,content:"add"!==t&&o.a.createElement(f.a,{columnSize:a.find(e=>25===e.index).size,style:{float:"right",textAlign:"right",paddingRight:2}},n)}].concat(s||[]),"index").map(e=>e.content)}render(){const{props:e}=this;let{user:t}=this.props,r=""!==e.openId&&e.id===e.openId,n="userRow-"+Math.random()+Date.now();void 0===t&&(t={avatar:"-",displayName:"-",userName:"-",email:"-",createdOnDate:"-",authorized:"-"});let s=this.getUserColumns(t,e.id,r);return o.a.createElement(f.a,{className:"collapsible-component-users",id:n,ref:e=>this.rootElement=e},o.a.createElement(f.a,{className:"collapsible-header-users "+!r},o.a.createElement(f.a,{className:x.a.extensionDetailRow+" "+e.addIsOpened,columnSize:100},(!e.addIsOpened||"add-opened"===e.addIsOpened)&&o.a.createElement(f.a,null,s),o.a.createElement(U.a,{accordion:!0,isOpened:r,keepCollapsedContent:!0,className:"user-detail-row"},r&&e.children))))}}ne.propTypes={user:a.a.object,OpenCollapse:a.a.func,Collapse:a.a.func,id:a.a.string,openId:a.a.string,currentIndex:a.a.number,getUserTabsIcons:a.a.func,getUserColumns:a.a.func,getUserMenu:a.a.func.isRequired,userMenuAction:a.a.func.isRequired,appSettings:a.a.object,columnSizes:a.a.array,filter:a.a.number},ne.defaultProps={isEvoq:!1};var oe=ne;r(82);class se extends n.Component{constructor(){super()}render(){const{props:e}=this;return e.renderIndex>=0&&e.children[e.renderIndex]}}se.propTypes={renderIndex:a.a.number,children:a.a.array},se.defaultProps={renderIndex:0};var ae=se,ie=r(31),le=r.n(ie),ue=r(17),de=r.n(ue),ce=r(61),pe=r.n(ce),fe="weak",he="fair",me="strong",ge=function(e,t){if(null==t)return null;var r=ve(e,t);return e.length<=2?null:r.rating<3?fe:r.rating<5?he:r.rating>=5?me:void 0},ve=function(e,t){var r=0,n=t.minLength,o=!1,s=!1,a=!1,i=!1,l=!1,u=!1,d=t.minNumberOfSpecialChars||0,c=t.validationExpression||"";if(e.length>0){e.match(/[a-z]/)&&(r++,s=!0),e.match(/[A-Z]/)&&(r++,o=!0),e.match(/[0-9]/g)&&(r++,i=!0);var p=e.match(/[!,@,#,$,%,&,*,(,),\-,_,=,+,\',\",\\,|,\,,<,.,>,;,:,\/,?,\[,{,\],}]/g);p&&p.length>=d&&(r++,a=!0),e.length>=n&&(r++,l=!0),e.length>=n+3&&r++,c&&(u=new RegExp(c,"g").test(e))}return{rating:r,maxRating:5,hasOneUpperCaseChar:o,hasOneLowerCaseChar:s,hasMinNumberOfSpecialChars:a,hasOneNumericChar:i,hasLengthOfNChars:l,matchValidationExpression:u}};r(85);class be extends n.Component{constructor(e){super(e)}componentDidMount(){this.props.loadPasswordStrengthOptions()}render(){return o.a.createElement("div",null,o.a.createElement(q.a,{label:u.get("Password"),error:this.props.error.password,onChange:this.props.onChangePassword,tooltipMessage:u.get("Password.Help"),errorMessage:u.get("Password.Required"),style:this.props.style,inputStyle:this.props.requiresQuestionAndAnswer?{marginBottom:0}:{marginBottom:15},type:"password",autoComplete:"off",value:this.props.UserDetails.password,tabIndex:7}),o.a.createElement("div",{id:"passwordStrengthBar",className:"passwordStrength "+ge(this.props.UserDetails.password,this.props.passwordStrengthOptions)}),o.a.createElement("div",{id:"passwordStrengthLabel",className:"passwordStrengthLabel "+ge(this.props.UserDetails.password,this.props.passwordStrengthOptions)},ge(this.props.UserDetails.password,this.props.passwordStrengthOptions)))}}be.propTypes={error:a.a.object,style:a.a.object.isRequired,UserDetails:a.a.object.isRequired,requiresQuestionAndAnswer:a.a.bool.isRequired,onChangePassword:a.a.func.isRequired,passwordStrengthOptions:a.a.object,loadPasswordStrengthOptions:a.a.func};var ye=Object(i.connect)(e=>({passwordStrengthOptions:e.users.passwordStrengthOptions}),e=>({loadPasswordStrengthOptions:()=>{e(A.passwordStrength())}}))(be);const we={width:"100%"},xe={firstName:"",lastName:"",email:"",userName:"",password:"",question:"",answer:"",randomPassword:!1,authorize:!0,notify:!1};class Ee extends n.Component{constructor(e){super(e),this.state={UserDetails:Object.assign({},xe),confirmPassword:"",errors:{firstName:!1,lastName:!1,userName:!1,email:!1,password:!1,confirmPassword:!1,passwordsMatch:!1,question:!1,answer:!1}},this.submitted=!1}onChangePassword(e){this.setState({UserDetails:{...this.state.UserDetails,password:e.target.value},errors:{...this.state.errors,password:!1}})}onChange(e,t){let{UserDetails:r}=this.state;if("randomPassword"===e||"authorize"===e||"notify"===e)r[e]=t;else if("confirmPassword"===e){let{confirmPassword:e}=this.state;e=t.target.value,this.setState({confirmPassword:e})}else r[e]=t.target.value;this.setState({},()=>{this.validateForm()})}save(){this.submitted=!0,this.validateForm()&&this.props.save(A.createUser(this.state.UserDetails,this.props.filter,()=>{this.cancel(),l.notify(u.get("UserCreated"),3e3)}))}clearForm(e){let{UserDetails:t}=this.state;t=Object.assign({},xe);let{errors:r}=this.state;r.firstName=!1,r.lastName=!1,r.userName=!1,r.email=!1,r.password=!1,r.confirmPassword=!1,r.passwordsMatch=!1,r.question=!1,r.answer=!1,this.submitted=!1,this.setState({UserDetails:t,errors:r,confirmPassword:""},()=>{"function"==typeof e&&e()})}cancel(){this.clearForm(()=>{this.props.onCancel()})}validateForm(){const{props:e}=this;let t=!0,r=e.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;if(this.submitted){let{UserDetails:e}=this.state,{errors:n}=this.state;n.firstName=!1,n.lastName=!1,n.userName=!1,n.email=!1,n.password=!1,n.confirmPassword=!1,n.passwordsMatch=!1,n.question=!1,n.answer=!1,""===e.firstName&&(n.firstName=!0,t=!1),""===e.lastName&&(n.lastName=!0,t=!1),""===e.userName&&(n.userName=!0,t=!1),""!==e.email&&O(e.email)||(n.email=!0,t=!1),!1===e.randomPassword&&""===e.password&&(n.password=!0,t=!1),!1===e.randomPassword&&""===this.state.confirmPassword?(n.confirmPassword=!0,t=!1):!1===e.randomPassword&&this.state.confirmPassword!==e.password&&(n.passwordsMatch=!0,t=!1),r&&(""===e.question&&(n.question=!0,t=!1),""===e.answer&&(n.answer=!0,t=!1)),this.setState({errors:n})}return t}render(){const{props:e,state:t}=this;let r=e.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;return o.a.createElement(f.a,{className:pe.a.newExtensionModal,style:e.style},o.a.createElement(f.a,{className:"new-user-box"},o.a.createElement(F.a,{className:"with-right-border top-half"},o.a.createElement("div",null,o.a.createElement(q.a,{value:t.UserDetails.firstName,error:t.errors.firstName,onChange:this.onChange.bind(this,"firstName"),label:u.get("FirstName"),tooltipMessage:u.get("FirstName.Help"),errorMessage:u.get("FirstName.Required"),style:we,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:1}),o.a.createElement(q.a,{value:t.UserDetails.userName,error:t.errors.userName,onChange:this.onChange.bind(this,"userName"),label:u.get("Username"),tooltipMessage:u.get("Username.Help"),errorMessage:u.get("Username.Required"),style:we,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:3}),o.a.createElement(le.a,{value:t.UserDetails.authorize,label:u.get("Approved"),title:u.get("Approved.Help"),onChange:this.onChange.bind(this,"authorize"),tabIndex:5,onText:u.get("SwitchOn"),offText:u.get("SwitchOff")})),o.a.createElement("div",null,o.a.createElement(q.a,{value:t.UserDetails.lastName,error:t.errors.lastName,onChange:this.onChange.bind(this,"lastName"),label:u.get("LastName"),tooltipMessage:u.get("LastName.Help"),errorMessage:u.get("LastName.Required"),style:we,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:2}),o.a.createElement(q.a,{value:t.UserDetails.email,error:t.errors.email,onChange:this.onChange.bind(this,"email"),label:u.get("Email"),tooltipMessage:u.get("Email.Help"),errorMessage:u.get("Email.Required"),style:we,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:4}),o.a.createElement(le.a,{value:t.UserDetails.randomPassword,title:u.get("Random.Help"),label:u.get("Random")+":",onChange:this.onChange.bind(this,"randomPassword"),tabIndex:6,onText:u.get("SwitchOn"),offText:u.get("SwitchOff")}))),!t.UserDetails.randomPassword&&o.a.createElement(f.a,null,o.a.createElement("hr",null)),!t.UserDetails.randomPassword&&o.a.createElement(F.a,null,o.a.createElement(ye,{error:t.errors,onChangePassword:this.onChangePassword.bind(this),style:we,inputStyle:r?{marginBottom:0}:{marginBottom:15},UserDetails:this.state.UserDetails}),o.a.createElement(q.a,{label:u.get("Confirm"),error:t.errors.confirmPassword||t.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:u.get("Confirm.Help"),errorMessage:t.errors.confirmPassword?u.get("Confirm.Required"):u.get("ConfirmMismatch.ErrorMessage"),style:we,type:"password",autoComplete:"off",inputStyle:r?{marginBottom:0}:{marginBottom:15},value:t.confirmPassword,tabIndex:8})),r&&o.a.createElement(F.a,null,o.a.createElement("div",null,o.a.createElement(q.a,{label:u.get("Question"),error:t.errors.question,onChange:this.onChange.bind(this,"question"),tooltipMessage:u.get("Question.Help"),errorMessage:u.get("Question.Required"),style:we,inputStyle:{marginBottom:15},autoComplete:"off",value:t.UserDetails.question,tabIndex:9})),o.a.createElement("div",null,o.a.createElement(q.a,{label:u.get("Answer"),error:t.errors.answer,onChange:this.onChange.bind(this,"answer"),tooltipMessage:u.get("Answer.Help"),errorMessage:u.get("Answer.Required"),style:we,autoComplete:"off",inputStyle:{marginBottom:15},value:t.UserDetails.answer,tabIndex:10}))),o.a.createElement(f.a,{columnSize:100,className:"email-notification-line"},o.a.createElement(de.a,{value:t.UserDetails.notify,label:u.get("Notify"),onChange:this.onChange.bind(this,"notify"),tabIndex:9})),o.a.createElement(f.a,{columnSize:100,className:"modal-footer"},o.a.createElement(c.a,{id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this),tabIndex:10},u.get("btnCancel")),o.a.createElement(c.a,{id:"confirmbtn",type:"primary",onClick:this.save.bind(this),tabIndex:11},u.get("btnSave")))))}}Ee.propTypes={save:a.a.func.isRequired,onCancel:a.a.func.isRequired,style:a.a.object,filter:a.a.number,appSettings:a.a.object};var Se=Object(i.connect)(()=>{},e=>({save:t=>{e(t)}}))(Ee),Ce=r(62),Oe=r.n(Ce);const _e={width:"100%"},De={userId:0,displayName:"",userName:"",email:""};class Ue extends n.Component{constructor(e){super(e),this.state={accountSettings:Object.assign(De),userDetails:e.userDetails,errors:{displayName:!1,userName:!1,loading:!1,email:!1},ChangePasswordVisible:!1}}componentWillMount(){let{props:e}=this;void 0===e.userDetails||e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}componentWillReceiveProps(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}makeBlankObj(e){let t=Object.assign({},e);return Object.keys(t).forEach(e=>t[e]=""),t}getUserDetails(e,t){const r=this.makeBlankObj(this.state.accountSettings),n=this.makeBlankObj(this.state.userDetails);this.setState({accountSettings:r,userDetails:n,loading:!0}),e.dispatch(A.getUserDetails({userId:t},e=>{this.updateUserDetailsState(e)}))}updateUserDetailsState(e){let t=Object.assign({},e),{accountSettings:r}=this.state;r.displayName=t.displayName,r.userName=t.userName,r.email=t.email,r.userId=t.userId,this.setState({accountSettings:r,userDetails:t,loading:!1})}onChange(e,t){if(this.state.loading)return;let{accountSettings:r}=this.state;r[e]=t.target.value,this.setState({accountSettings:r},()=>{this.validateForm(!0)})}save(){this.validateForm()&&this.props.dispatch(A.updateUserBasicInfo(this.state.accountSettings,()=>{l.notify(u.get("UserUpdated"),3e3),this.getUserDetails(this.props,this.state.accountSettings.userId),this.props.collapse()}))}validateForm(){let e=!0,{errors:t}=this.state;t.displayName=!1,t.userName=!1,t.email=!1;let{accountSettings:r}=this.state;return""===r.displayName&&(t.displayName=!0,e=!1),""===r.userName&&(t.userName=!0,e=!1),""!==r.email&&O(r.email)||(t.email=!0,e=!1),this.setState({errors:t}),e}onCancelPassword(){this.setState({ChangePasswordVisible:!1})}onChangePassword(){this.state.loading||this.setState({ChangePasswordVisible:!0})}onForcePasswordChange(){this.state.loading||this.props.dispatch(A.forceChangePassword({userId:this.props.userId},()=>{l.notify(u.get("UserPasswordUpdateChanged"),3e3);let{userDetails:e}=this.state;e.needUpdatePassword=!0,this.setState({userDetails:e})}))}onSendPasswordLink(){this.state.loading||this.props.dispatch(A.sendPasswordResetLink({userId:this.props.userId},()=>{l.notify(u.get("PasswordSent"),3e3)}))}stringifyBoolean(e){return""===e?"":e?u.get("True"):u.get("False")}render(){let{state:e}=this;return o.a.createElement(f.a,{className:Oe.a.userSettings},o.a.createElement(f.a,null,o.a.createElement(f.a,{className:"outer-box",columnSize:50},o.a.createElement(W,{visible:this.state.ChangePasswordVisible,onCancel:this.onCancelPassword.bind(this),userId:this.props.userId}),o.a.createElement("div",{className:"title"},u.get("AccountSettings")),o.a.createElement("div",{className:this.state.loading?"isloading":""},o.a.createElement(q.a,{value:e.accountSettings.userName,error:e.errors.userName,onChange:this.onChange.bind(this,"userName"),label:u.get("Username"),tooltipMessage:u.get("Username.Help"),errorMessage:u.get("Username.Required"),style:_e,autoComplete:"off",enabled:Z(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),o.a.createElement(q.a,{value:e.accountSettings.displayName,error:e.errors.displayName,onChange:this.onChange.bind(this,"displayName"),label:u.get("DisplayName"),tooltipMessage:u.get("DisplayName.Help"),errorMessage:u.get("DisplayName.Required"),style:_e,autoComplete:"off",enabled:Z(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),o.a.createElement(q.a,{value:e.accountSettings.email,error:e.errors.email,onChange:this.onChange.bind(this,"email"),label:u.get("Email"),tooltipMessage:u.get("Email.Help"),errorMessage:u.get("Email.Required"),style:_e,autoComplete:"off",enabled:Z(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}})),Y(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&o.a.createElement(f.a,{className:"no-padding"},o.a.createElement("div",{className:"title"},u.get("PasswordManagement")),o.a.createElement(f.a,{className:"link"+(this.state.loading?" disabled":"")},o.a.createElement("div",{onClick:this.onChangePassword.bind(this)},"[ ",u.get("ChangePassword")," ]")),!e.userDetails.needUpdatePassword&&o.a.createElement(f.a,{className:"link"+(this.state.loading?" disabled":"")},o.a.createElement("div",{onClick:this.onForcePasswordChange.bind(this)},"[ ",u.get("ForceChangePassword")," ]")),o.a.createElement(f.a,{className:"link"+(this.state.loading?" disabled":"")},o.a.createElement("div",{onClick:this.onSendPasswordLink.bind(this)},"[ ",u.get("ResetPassword")," ]")))),o.a.createElement(f.a,{className:"outer-box right",columnSize:50},o.a.createElement("div",{className:"title"},u.get("AccountData")),o.a.createElement(F.a,{className:"first"},o.a.createElement(f.a,{title:u.get("CreatedDate.Help")},u.get("CreatedDate")),o.a.createElement(f.a,null,C(e.userDetails.createdOnDate,!0))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("LastLoginDate.Help")},u.get("LastLoginDate")),o.a.createElement(f.a,null,C(e.userDetails.lastLogin,!0))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("LastActivityDate.Help")},u.get("LastActivityDate")),o.a.createElement(f.a,null,C(e.userDetails.lastActivity,!0))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("LastPasswordChangeDate.Help")},u.get("LastPasswordChangeDate")),o.a.createElement(f.a,null,C(e.userDetails.lastPasswordChange,!0))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("LastLockoutDate.Help")},u.get("LastLockoutDate")),o.a.createElement(f.a,null,"-"===C(e.userDetails.lastLockout,!0)?u.get("Never"):C(e.userDetails.lastLockout,!0))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("IsOnLine.Help")},u.get("IsOnLine")),o.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.isOnline))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("LockedOut.Help")},u.get("LockedOut")),o.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.isLocked))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("Approved.Help")},u.get("Approved")),o.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.authorized))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("UpdatePassword.Help")},u.get("UpdatePassword")),o.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.needUpdatePassword))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("IsDeleted.Help")},u.get("IsDeleted")),o.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.isDeleted))),o.a.createElement(F.a,null,o.a.createElement(f.a,{title:u.get("UserFolder.Help")},u.get("UserFolder")),o.a.createElement(f.a,null,e.userDetails.userFolder)))),Z(this.props.appSettings.applicationSettings.settings)&&o.a.createElement(f.a,{className:"buttons"},o.a.createElement(f.a,{columnSize:50,className:"leftBtn"},o.a.createElement(c.a,{id:"cancelbtn",type:"secondary",onClick:this.props.collapse.bind(this)},u.get("btnCancel"))),o.a.createElement(f.a,{columnSize:50,className:"rightBtn"},o.a.createElement(c.a,{id:"confirmbtn",disabled:this.state.loading,type:"primary",onClick:this.save.bind(this)},u.get("btnSave")))))}}Ue.propTypes={dispatch:a.a.func.isRequired,userId:a.a.array.isRequired,collapse:a.a.func.isRequired,userDetails:a.a.object,appSettings:a.a.object};var Ie=Object(i.connect)(function(e){return{userDetails:e.users.userDetails}})(Ue);r(88);class Pe extends n.Component{constructor(e){super(e),this.state={userDetails:e.userDetails}}componentWillMount(){let{props:e}=this;void 0!==e.userDetails&&e.userDetails.userId===e.userId||this.getUserDetails(e)}componentWillReceiveProps(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId&&this.getUserDetails(e)}getUserDetails(e){e.dispatch(A.getUserDetails({userId:e.userId},e=>{let t=Object.assign({},e);this.setState({userDetails:t})}))}render(){return void 0!==this.state.userDetails&&void 0!==this.state.userDetails.editProfileUrl&&o.a.createElement("iframe",{className:"edit-profile",seamless:!0,src:this.state.userDetails.editProfileUrl})}}Pe.propTypes={userDetails:a.a.object,userId:a.a.number};var Re=Object(i.connect)(function(e){return{userDetails:e.users.userDetails}})(Pe),Te=r(63),Me=r(64),ke=r.n(Me),Ne=(r(133),r(32)),je=r.n(Ne);class Ae extends n.Component{constructor(){super(),this.state={editIndex:-1,editCommand:"",isCalendarVisible:!1}}onStartTimeClick(e,t){this.setState({editIndex:t,editCommand:"startTime",isCalendarVisible:!0})}onExpiresTimeClick(e,t){this.setState({editIndex:t,editCommand:"expiresTime",isCalendarVisible:!0})}onDeleteClick(e){const{props:t}=this;l.confirm(function(){let e=arguments[0],t=arguments;return e.replace(/{(\d+)}/gi,function(e,r){let n=parseInt(r)+1;return t[n]})}(u.get("DeleteRole.Confirm"),e.roleName,e.displayName),u.get("Delete"),u.get("Cancel"),()=>{t.dispatch(A.removeUserRole(e))})}isEmptyDate(e){return!e||new Date(e).getFullYear()<1970}onChange(e,t,r){const{state:n}=this;n.editIndex=-1,n.editCommand="";let o="startTime"===t?r:e.startTime,s="expiresTime"===t?r:e.expiresTime;this.props.saveRole(e.roleId,o,s),this.setState({isCalendarVisible:!1})}getBoundDate(e,t){if("startTime"===t){let t=new Date(2049,11,31);return this.isEmptyDate(e.expiresTime)||(t=new Date((new Date).setTime(new Date(e.expiresTime).getTime()-864e5))),t}if("expiresTime"===t){let t=new Date(1970,0,1);return this.isEmptyDate(e.startTime)||(t=new Date((new Date).setTime(new Date(e.startTime).getTime()+864e5))),t}}getDate(e,t){let r=new Date;return"startTime"===t?this.isEmptyDate(e.startTime)||(r=new Date(e.startTime)):"expiresTime"===t&&(this.isEmptyDate(e.expiresTime)||(r=new Date(e.expiresTime))),r}createRoleActions(){const{props:e,state:t}=this;let r=e.roleDetails.allowExpired?o.a.createElement("span",null,o.a.createElement(je.a,{date:this.getDate(e.roleDetails,"startTime"),maxDate:this.getBoundDate(e.roleDetails,"startTime"),updateDate:this.onChange.bind(this,e.roleDetails,"startTime"),mode:"start",applyButtonText:u.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onStartTimeClick.bind(this,e.roleDetails,e.index)})):null,n=e.roleDetails.allowExpired?o.a.createElement("span",null,o.a.createElement(je.a,{date:this.getDate(e.roleDetails,"expiresTime"),minDate:this.getBoundDate(e.roleDetails,"expiresTime"),updateDate:this.onChange.bind(this,e.roleDetails,"expiresTime"),mode:"end",applyButtonText:u.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onExpiresTimeClick.bind(this,e.roleDetails,e.index)})):null,s=e.roleDetails.allowDelete?o.a.createElement("a",{className:"extension-action",dangerouslySetInnerHTML:{__html:J.XIcon},onClick:this.onDeleteClick.bind(this,e.roleDetails,e.index)}):null;return o.a.createElement("div",{className:t.editIndex===e.index?"edit-row":null},r,n,s)}render(){const{props:e}=this;return o.a.createElement("div",{className:"user-role-row"},o.a.createElement(f.a,{title:e.roleDetails.roleName,columnSize:25},e.roleDetails.roleName),o.a.createElement(f.a,{columnSize:20,title:C(e.roleDetails.startTime)},C(e.roleDetails.startTime)),o.a.createElement(f.a,{columnSize:20,title:C(e.roleDetails.expiresTime)},C(e.roleDetails.expiresTime)),o.a.createElement(f.a,{columnSize:35},o.a.createElement("div",{className:"actions"},this.createRoleActions())))}}Ae.propTypes={dispatch:a.a.func.isRequired,roleDetails:a.a.object.isRequired,index:a.a.number,saveRole:a.a.func.isRequired,deleteRole:a.a.func.isRequired};var Le=Object(i.connect)(function(){return{}})(Ae),Fe=(r(135),r(22)),ze=r.n(Fe);class qe extends n.Component{constructor(e){super(e),this.state={roleSelectState:{userId:-1,keyword:""},currentPage:0,pageSize:10,roleKeyword:"",sendEmail:!0,isOwner:!1,allowOwner:!1},this.comboBoxDom=null,this.debounceGetSuggestRoles=Object(Te.debounce)(500,this.debounceGetSuggestRoles)}componentWillReceiveProps(e){this.setState(e)}componentWillMount(){this.getRoles()}getRoles(){const{props:e,state:t}=this;let r={userId:e.userDetails.userId,keyword:t.roleKeyword,pageIndex:t.currentPage,pageSize:t.pageSize};e.dispatch(A.getUserRoles(r))}getSuggestRoles(){const{props:e,state:t}=this;let r=t.roleSelectState.roleId>=0?"":t.roleSelectState.keyword;e.dispatch(A.getSuggestRoles({keyword:r,count:10}))}debounceGetSuggestRoles(){this.getSuggestRoles()}onRoleSelectorChanged(e){e.roleId||e.roleName||(this.setState({roleSelectState:{roleId:-1,keyword:e}}),this.debounceGetSuggestRoles())}onRoleSelectorSelected(e){this.onRoleSelected(e.roleId,()=>{this.setState({roleSelectState:{roleId:e.roleId,keyword:e.roleName}},()=>{this.getSuggestRoles()})})}onRoleSelectorToggle(){}onAddRole(){const{state:e}=this;let t=e.roleSelectState.roleId;-1!==t&&void 0!==t&&(this.saveRole(t),this.setState({roleSelectState:{roleId:-1,keyword:""}}))}saveRole(e,t,r){const{props:n}=this;let o={roleId:e,userId:n.userDetails.userId,startTime:t,expiresTime:r};n.dispatch(A.saveUserRole(o,this.state.sendEmail,this.state.isOwner)),this.setState({sendEmail:!0,isOwner:!1,allowOwner:!1})}onPageChanged(e,t){let{state:r}=this;void 0!==t&&r.pageSize!==t&&(r.pageSize=t),r.currentPage=e,this.setState({state:r}),this.getRoles()}getRoleRows(){let e=this.props.userRoles,t=e.map((e,t)=>o.a.createElement(Le,{roleDetails:e,index:t,key:`role_row_${t}`,saveRole:this.saveRole.bind(this)}));return o.a.createElement("div",{className:"user-role-body"},e.length>0?t:o.a.createElement("div",{className:"no-roles-row"},u.get("NoRoles")))}onRoleSelected(e,t){if(void 0!==this.props.matchedRoles&&this.props.matchedRoles.length>0&&this.props.matchedRoles.some(t=>t.roleId===e)){let r=this.props.matchedRoles.filter(t=>t.roleId===e)[0];this.setState({allowOwner:r.allowOwner},()=>{"function"==typeof t&&t()})}}onSendEmailClick(e){this.setState({sendEmail:e})}onIsOwnerClick(e){this.setState({isOwner:e})}renderHeader(){let e=[{name:"Role",width:25},{name:"Start",width:20},{name:"Expires",width:20},{name:"",width:35}].map((e,t)=>o.a.createElement(f.a,{key:`grid_cell_${t}`,columnSize:e.width,style:{fontWeight:"bolder"}},""!==e.name?o.a.createElement("span",null,u.get(e.name+".Header")):o.a.createElement("div",null)));return o.a.createElement("div",{className:"user-role-header-row"},e)}renderPaging(){if(this.props.totalRecords>0)return o.a.createElement(ze.a,{showStartEndButtons:!1,showPageSizeOptions:!1,numericCounters:0,summaryText:u.get("rolesSummaryText"),pageInfoText:u.get("rolesPageInfoText"),showPageInfo:!0,pageSize:this.state.pageSize,totalRecords:this.props.totalRecords,onPageChanged:this.onPageChanged.bind(this),culture:l.getCulture()})}render(){const{state:e}=this;return o.a.createElement("div",{className:"userroles-form-form"},o.a.createElement("div",{className:"header"},o.a.createElement("div",{className:"header-title"},u.get("Roles.Title")),o.a.createElement("div",{className:"add-box"},o.a.createElement(f.a,{columnSize:30},o.a.createElement("div",{className:"send-email-box"},o.a.createElement(de.a,{value:this.state.sendEmail,onChange:this.onSendEmailClick.bind(this),label:u.get("SendEmail"),labelPlace:"right"}),this.state.allowOwner&&o.a.createElement(de.a,{value:this.state.isOwner,onChange:this.onIsOwnerClick.bind(this),label:u.get("IsOwner"),labelPlace:"right"}))),o.a.createElement(f.a,{columnSize:70},o.a.createElement("span",null,o.a.createElement(ke.a,{suggest:!1,ref:e=>{this.comboBoxDom=e},placeholder:u.get("AddRolePlaceHolder"),open:this.props.matchedRoles&&this.props.matchedRoles.length>0,onToggle:this.onRoleSelectorToggle.bind(this),onChange:this.onRoleSelectorChanged.bind(this),onSelect:this.onRoleSelectorSelected.bind(this),data:this.props.matchedRoles,value:e.roleSelectState.keyword,valueField:"roleId",textField:"roleName"}),o.a.createElement("div",{className:"add-role-button",onClick:this.onAddRole.bind(this)},o.a.createElement("div",{className:"extension-action",title:u.get("Add"),dangerouslySetInnerHTML:{__html:J.AddIcon}}),u.get("Add")))))),o.a.createElement("div",{className:"user-roles-list"},this.renderHeader(),this.getRoleRows()),o.a.createElement("div",{className:"user-roles-list-paging"},this.renderPaging()))}}qe.propTypes={dispatch:a.a.func.isRequired,userDetails:a.a.object.isRequired,userRoles:a.a.array.isRequired,totalRecords:a.a.number,matchedRoles:a.a.array},qe.defaultProps={matchedRoles:[]};var Ve=Object(i.connect)(function(e){return{matchedRoles:e.users.matchedRoles,userRoles:e.users.userRoles,totalRecords:e.users.userRolesCount}})(qe),Be=r(65),He=r.n(Be);class We extends n.Component{constructor(){super(),this.state={openId:"",renderIndex:-1}}componentWillReceiveProps(){this.collapse()}uncollapse(e,t){setTimeout(()=>{this.setState({openId:e,renderIndex:t})})}collapse(){""!==this.state.openId&&this.setState({openId:"",renderIndex:-1})}toggle(e,t){""!==e?this.uncollapse(e,t):this.collapse()}onAddUser(){this.toggle("add"===this.state.openId?"":"add",0)}getChildren(e){let t=[];if(t=t.concat(this.props.getUserTabs&&this.props.getUserTabs(e)||[]),Q(this.props.appSettings.applicationSettings.settings)){const r=o.a.createElement(Ie,{userId:e.userId,collapse:this.collapse.bind(this),appSettings:this.props.appSettings});t=t.concat([{index:10,content:r}])}return G(this.props.appSettings.applicationSettings.settings,e)&&(t=t.concat([{index:5,content:o.a.createElement(Ve,{userDetails:e})}])),K(this.props.appSettings.applicationSettings.settings)&&(t=t.concat([{index:15,content:o.a.createElement(Re,{userId:e.userId})}])),_(t,"index","desc").map(e=>e.content)}getHeaders(){let e=void 0!==this.props.columnSizes?this.props.columnSizes:ee,t=[{index:5,size:e.find(e=>5===e.index).size,header:u.get("Name.Header")},{index:10,size:e.find(e=>10===e.index).size,header:u.get("Email.Header")},{index:15,size:e.find(e=>15===e.index).size,header:u.get("Created.Header")},{index:25,size:e.find(e=>25===e.index).size,header:""}];if(void 0!==this.props.getUserColumns&&"function"==typeof this.props.getUserColumns){let r=this.props.getUserColumns();void 0!==r&&r.length>0&&(t=_(r.map(t=>({index:t.index,header:t.header,size:e.find(e=>e.index===t.index).size})).concat(t),"index"))}return t}render(){const{props:e}=this;let t=0;const r="add"===this.state.openId&&((n=this.props.appSettings.applicationSettings.settings).isAdmin||n.permissions.ADD_USER);var n;const s=this.getHeaders();return o.a.createElement(f.a,{className:He.a.usersList},o.a.createElement(y,{headers:s}),o.a.createElement(oe,{Collapse:this.collapse.bind(this),OpenCollapse:this.toggle.bind(this),currentIndex:this.state.renderIndex,openId:this.state.openId,key:"user-add",appSettings:e.appSettings,columnSizes:e.columnSizes,id:"add",addIsOpened:r?"add-opened":"closed",filter:e.filter},o.a.createElement(ae,null,(()=>[o.a.createElement(Se,{key:`create-user-box-${t}`,filter:e.filter,onCancel:this.collapse.bind(this),appSettings:e.appSettings})])())),e.users&&e.users.length>0&&e.users.map((r,n)=>{let s="row-"+t++;const a=this.getChildren(r);return o.a.createElement(oe,{user:r,Collapse:this.collapse.bind(this),OpenCollapse:this.toggle.bind(this),currentIndex:this.state.renderIndex,openId:this.state.openId,key:"user-"+n,getUserColumns:e.getUserColumns&&e.getUserColumns.bind(this),getUserTabsIcons:e.getUserTabsIcons&&e.getUserTabsIcons.bind(this),getUserMenu:e.getUserMenu&&e.getUserMenu.bind(this),userMenuAction:e.userMenuAction&&e.userMenuAction.bind(this),appSettings:e.appSettings,columnSizes:e.columnSizes,id:s,filter:e.filter},o.a.createElement(ae,{renderIndex:this.state.renderIndex},a))}),e.users&&0===e.users.length&&o.a.createElement(f.a,{className:"no-users"},u.get("noUsers")))}}We.propTypes={dispatch:a.a.func.isRequired,getUserTabs:a.a.func,getUserTabsIcons:a.a.func,getUserColumns:a.a.func,getUserMenu:a.a.func,userMenuAction:a.a.func,appSettings:a.a.object,columnSizes:a.a.array,filter:a.a.number};var Ge=Object(i.connect)(function(e){return{users:e.users.users}},null,null,{withRef:!0})(We),Ke=(r(138),r(66)),Qe=r.n(Ke),Ye=r(67),Ze=r.n(Ye);class $e extends n.Component{constructor(e){super(e),this.state={selectedUserFilter:{label:u.get("Authorized"),value:0},searchText:""}}onSelect(e){let{label:t}=e,{value:r}=e,{selectedUserFilter:n}=this.state;r!==n.value&&(n.label=t,n.value=r,0===n.value||5===n.value?this.setState({selectedUserFilter:{label:"",value:-1},searchText:""},()=>{this.setState({selectedUserFilter:n,searchText:""},()=>{this.props.onChange(e,this.state.searchText)})}):this.setState({selectedUserFilter:n,searchText:""},()=>{this.props.onChange(e,this.state.searchText)}))}onKeywordChanged(e){this.setState({searchText:e},()=>{this.props.onChange(this.state.selectedUserFilter,e)})}BuildUserFiltersOptions(){let{userFilters:e}=this.props,t=[];return t=e.map(e=>({label:e.Key,value:e.Value}))}render(){let e=this.BuildUserFiltersOptions();return o.a.createElement("div",{className:"users-filter-container"},o.a.createElement(f.a,{columnSize:35},null!=this.userFiltersOptions&&this.userFiltersOptions.length>0&&o.a.createElement("div",{className:"user-filters-filter"},o.a.createElement(Qe.a,{style:{width:"100%"},withBorder:!1,options:e,label:this.state.selectedUserFilter.label,onSelect:this.onSelect.bind(this),prependWith:u.get("ShowLabel")}),o.a.createElement("div",{className:"clear"}))),o.a.createElement(f.a,{columnSize:30},o.a.createElement("div",null,"  ")),o.a.createElement(f.a,{columnSize:35},o.a.createElement("div",{className:"search-filter"},(0===this.state.selectedUserFilter.value||5===this.state.selectedUserFilter.value)&&o.a.createElement(Ze.a,{placeholder:u.get("SearchPlaceHolder"),onSearch:this.onKeywordChanged.bind(this),maxLength:50,iconStyle:{right:0}}),o.a.createElement("div",{className:"clear"}))))}}$e.propTypes={dispatch:a.a.func.isRequired,onChange:a.a.func.isRequired,userFilters:a.a.array.isRequired};var Xe=$e,Je=(r(140),r(16)),et=r(15);function tt(e){return(tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function rt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function nt(e,t){return!t||"object"!==tt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ot(e){return(ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function st(e,t){return(st=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var at={searchText:"",filter:0,pageIndex:0,pageSize:10,sortColumn:"",sortAscending:!1,resetIndex:!1},it=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=nt(this,ot(t).call(this))).state={userFilters:[],searchParameters:at},e}var r,s,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&st(e,t)}(t,n["Component"]),r=t,(s=[{key:"componentWillMount",value:function(){var e=this;this.props.dispatch(Je.CommonUsersActions.getUserFilters(function(t){var r=Object.assign([],JSON.parse(JSON.stringify(t)));e.setState({userFilters:r})}))}},{key:"onChange",value:function(e,t){this.setState(function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}({},e,t.target.value))}},{key:"onFilterChange",value:function(e,t){var r=this,n=this.state.searchParameters;n.searchText=t,n.filter=e.value,n.pageIndex=0,n.resetIndex=!0,this.props.dispatch(Je.CommonUsersActions.getUsers(n)),this.setState({searchParameters:n},function(){var e=r.state.searchParameters;e.resetIndex=!1,r.setState({searchParameters:e})})}},{key:"onPageChanged",value:function(e,t){var r=this.state.searchParameters;r.pageIndex=e,r.pageSize=t,this.props.dispatch(Je.CommonUsersActions.getUsers(r)),this.setState({searchParameters:r})}},{key:"getWorkSpaceTray",value:function(){return this.state.userFilters.length>0&&o.a.createElement(f.a,{className:"users-workspace-tray"},o.a.createElement(Xe,{onChange:this.onFilterChange.bind(this),userFilters:this.state.userFilters}))}},{key:"toggleCreateBox",value:function(){this.userTable.onAddUser()}},{key:"canAddUser",value:function(){return et.a.applicationSettings.settings.isAdmin||et.a.applicationSettings.settings.permissions.ADD_USER}},{key:"render",value:function(){var e=this,t=this.props,r=this.state,n=r.createBoxVisible?"without-margin":"";return o.a.createElement(f.a,null,o.a.createElement(m.a,{title:u.get("nav_Users")},this.canAddUser()&&o.a.createElement(c.a,{type:"primary",size:"large",onClick:this.toggleCreateBox.bind(this),title:u.get("btnCreateUser")},u.get("btnCreateUser"))),o.a.createElement(v.a,{workSpaceTrayVisible:!0,workSpaceTrayOutside:!0,workSpaceTray:this.getWorkSpaceTray(),className:n},o.a.createElement(Ge,{ref:function(t){return e.userTable=t},appSettings:et.a,filter:r.searchParameters.filter}),o.a.createElement("div",{className:"users-paging"},o.a.createElement(ze.a,{pageSizeDropDownWithoutBorder:!0,showSummary:!0,showPageInfo:!1,pageSizeOptionText:u.get("usersPageSizeOptionText"),summaryText:u.get("usersSummaryText"),pageSize:this.state.searchParameters.pageSize,totalRecords:t.totalUsers,onPageChanged:this.onPageChanged.bind(this),resetIndex:this.state.searchParameters.resetIndex,culture:l.getCulture()}))))}}])&&rt(r.prototype,s),a&&rt(r,a),t}();it.propTypes={dispatch:a.a.func.isRequired,totalUsers:a.a.number};var lt=Object(i.connect)(function(e){return{totalUsers:e.users.totalUsers}})(it),ut=r(68),dt=r.n(ut);function ct(e){return(ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function ft(e,t){return!t||"object"!==ct(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ht(e){return(ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mt(e,t){return(mt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var gt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ft(this,ht(t).call(this))}var r,s,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mt(e,t)}(t,n["Component"]),r=t,(s=[{key:"componentWillMount",value:function(){this.props.dispatch(Je.CommonUsersActions.getUsers({searchText:"",filter:0,pageIndex:0,pageSize:10,sortColumn:"",sortAscending:!1}))}},{key:"render",value:function(){return o.a.createElement("div",{className:"boilerplate-app personaBar-mainContainer"},o.a.createElement(dt.a,{isOpen:!0},o.a.createElement(lt,null)))}}])&&pt(r.prototype,s),a&&pt(r,a),t}();gt.PropTypes={dispatch:a.a.func.isRequired};var vt=Object(i.connect)(function(){return{}})(gt);t.default=function(){return o.a.createElement("div",{className:"boilerplate-root"},o.a.createElement(vt,null))}},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n),s=r(12),a=r(3),i=r(15),l={init:function(){var e=window.dnn.initUsers();i.a.init(e),r(69)},dispatch:function(){throw new Error("dispatch method needs to be overwritten from the Redux store")}},u=r(14),d=r(29),c=r.n(d),p=r(50),f=r.n(p),h=r(51),m=Object(u.combineReducers)({users:Object(h.users)()}),g=r(52),v=r(53),b=r.n(v),y=r(54),w=r.n(y),x=Object(g.createDevTools)(o.a.createElement(w.a,{toggleVisibilityKey:"ctrl-h",changePositionKey:"ctrl-q"},o.a.createElement(b.a,null))),E=!0;var S,C=r(55),O=r.n(C),_=Object(u.createStore)(m,S,Object(u.compose)(E?Object(u.applyMiddleware)(c.a):Object(u.applyMiddleware)(c.a,f()()),x.instrument()));l.dispatch=_.dispatch;var D=document.getElementById("users-container");if(!D)throw Error("Cannot find users container.");l.init(),Object(s.render)(o.a.createElement(a.Provider,{store:_},o.a.createElement(O.a,null)),D)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,