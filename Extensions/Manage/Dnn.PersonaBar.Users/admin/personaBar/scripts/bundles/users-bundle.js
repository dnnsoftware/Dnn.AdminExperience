!function(e){var t={};function s(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=t,s.d=function(e,t,r){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(r,n,function(t){return e[t]}.bind(null,n));return r},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=55)}([function(e,t){e.exports=window.dnn.nodeModules.React},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents},function(e,t,s){e.exports=s(27)()},function(e,t){e.exports=window.dnn.nodeModules.ReactRedux},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var s=function(e,t){var s=e[1]||"",r=e[3];if(!r)return s;if(t&&"function"==typeof btoa){var n=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[s].concat(o).concat([n]).join("\n")}var i;return[s].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+s+"}":s}).join("")},t.i=function(e,s){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},n=0;n<this.length;n++){var o=this[n][0];"number"==typeof o&&(r[o]=!0)}for(n=0;n<e.length;n++){var i=e[n];"number"==typeof i[0]&&r[i[0]]||(s&&!i[2]?i[2]=s:s&&(i[2]="("+i[2]+") and ("+s+")"),t.push(i))}},t}},function(e,t,s){var r,n,o={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===n&&(n=r.apply(this,arguments)),n}),a=function(e){var t={};return function(e,s){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,s);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,d=0,c=[],p=s(26);function u(e,t){for(var s=0;s<e.length;s++){var r=e[s],n=o[r.id];if(n){n.refs++;for(var i=0;i<n.parts.length;i++)n.parts[i](r.parts[i]);for(;i<r.parts.length;i++)n.parts.push(w(r.parts[i],t))}else{var a=[];for(i=0;i<r.parts.length;i++)a.push(w(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:a}}}}function h(e,t){for(var s=[],r={},n=0;n<e.length;n++){var o=e[n],i=t.base?o[0]+t.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[i]?r[i].parts.push(a):s.push(r[i]={id:i,parts:[a]})}return s}function m(e,t){var s=a(e.insertInto);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?s.insertBefore(t,r.nextSibling):s.appendChild(t):s.insertBefore(t,s.firstChild),c.push(t);else if("bottom"===e.insertAt)s.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=a(e.insertAt.before,s);s.insertBefore(t,n)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function f(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return s.nc}();r&&(e.attrs.nonce=r)}return b(t,e.attrs),m(e,t),t}function b(e,t){Object.keys(t).forEach(function(s){e.setAttribute(s,t[s])})}function w(e,t){var s,r,n,o;if(t.transform&&e.css){if(!(o="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=o}if(t.singleton){var i=d++;s=l||(l=f(t)),r=E.bind(null,s,i,!1),n=E.bind(null,s,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(s=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),m(e,t),t}(t),r=function(e,t,s){var r=s.css,n=s.sourceMap,o=void 0===t.convertToAbsoluteUrls&&n;(t.convertToAbsoluteUrls||o)&&(r=p(r));n&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var i=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(i),a&&URL.revokeObjectURL(a)}.bind(null,s,t),n=function(){g(s),s.href&&URL.revokeObjectURL(s.href)}):(s=f(t),r=function(e,t){var s=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=s;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(s))}}.bind(null,s),n=function(){g(s)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else n()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var s=h(e,t);return u(s,t),function(e){for(var r=[],n=0;n<s.length;n++){var i=s[n];(a=o[i.id]).refs--,r.push(a)}e&&u(h(e,t),t);for(n=0;n<r.length;n++){var a;if(0===(a=r[n]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete o[a.id]}}}};var x,S=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join("\n")});function E(e,t,s,r){var n=s?"":r.css;if(e.styleSheet)e.styleSheet.cssText=S(t,n);else{var o=document.createTextNode(n),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}},function(e,t){e.exports=window.dnn.nodeModules.Redux},function(e,t,s){"use strict";t.a={init:function(e){e||(this.applicationSettings={}),this.applicationSettings=e},applicationSettings:null}},function(e,t){e.exports=window.dnn.Users.CommonActions},function(e,t){e.exports=window.dnn.nodeModules.ReduxThunk},function(e,t,s){var r=s(32);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=window.dnn.nodeModules.ReactDOM},function(e,t){e.exports=window.dnn.nodeModules.ReduxImmutableStateInvariant},function(e,t){e.exports=window.dnn.Users.CommonReducers},function(e,t){e.exports=window.dnn.nodeModules.ReduxDevTools},function(e,t){e.exports=window.dnn.nodeModules.ReduxDevToolsLogMonitor},function(e,t){e.exports=window.dnn.nodeModules.ReduxDevToolsDockMonitor},function(e,t,s){e.exports=s(54)},function(e,t,s){var r=s(31);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=window.dnn.nodeModules.Moment},function(e,t,s){var r=s(39);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){var r=s(42);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=window.dnn.nodeModules.ThrottleDebounce},function(e,t,s){var r=s(49);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){var r=s(25);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var s=t.protocol+"//"+t.host,r=s+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var n,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(n=0===o.indexOf("//")?o:0===o.indexOf("/")?s+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(e,t,s){"use strict";var r=s(28);function n(){}e.exports=function(){function e(e,t,s,n,o,i){if(i!==r){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var s={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return s.checkPropTypes=n,s.PropTypes=s,s}},function(e,t,s){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,s){var r=s(30);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.header-row{padding:10px 0 10px;border-bottom:1px solid #C8C8C8;text-transform:uppercase}.header-row .dnn-grid-cell{padding:0 15px}.header-row .dnn-grid-cell.empty{text-indent:-100px;overflow:hidden}",""])},function(e,t,s){(t=e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.collapsible-component-users .collapsible-header-users.false{border-top:2px solid #1E88C3;border-bottom:2px solid #1E88C3;margin-top:-2px}._1p8jYUkN2IDoiqPm0iV_fC{padding:15px 0 7.5px;border-bottom:1px solid #C8C8C8}._1p8jYUkN2IDoiqPm0iV_fC.closed{padding:0;border-bottom:none}._1p8jYUkN2IDoiqPm0iV_fC .user-avatar{text-align:center}._1p8jYUkN2IDoiqPm0iV_fC .user-avatar img{border-radius:25px;width:40px}._1p8jYUkN2IDoiqPm0iV_fC .user-detail-row{float:left;width:100%}._1p8jYUkN2IDoiqPm0iV_fC .user-detail-row>div{width:100%;float:left}._1p8jYUkN2IDoiqPm0iV_fC .user-emails{padding-left:11px !important}._1p8jYUkN2IDoiqPm0iV_fC .email-link>a{color:#1E88C3;text-decoration:none}._1p8jYUkN2IDoiqPm0iV_fC .user-names{padding-left:2px !important}._1p8jYUkN2IDoiqPm0iV_fC .user-names h6{font-size:15px}._1p8jYUkN2IDoiqPm0iV_fC .user-names p{text-transform:lowercase}._1p8jYUkN2IDoiqPm0iV_fC .user-joined{padding-left:22px !important}._1p8jYUkN2IDoiqPm0iV_fC .deleted{text-decoration:line-through}._1p8jYUkN2IDoiqPm0iV_fC .extension-action{margin-left:5px;float:right;cursor:pointer}._1p8jYUkN2IDoiqPm0iV_fC .extension-action svg{width:20px;float:left;height:20px}._1p8jYUkN2IDoiqPm0iV_fC .extension-action.false svg{fill:#1E88C3}._1p8jYUkN2IDoiqPm0iV_fC .extension-action.false svg:hover{fill:#4B4E4F}._1p8jYUkN2IDoiqPm0iV_fC .extension-action.more-menu{position:relative}._1p8jYUkN2IDoiqPm0iV_fC .dnn-grid-cell{padding:0 15px}._1p8jYUkN2IDoiqPm0iV_fC .dnn-grid-cell p{word-wrap:break-word}._1p8jYUkN2IDoiqPm0iV_fC .package-name{word-wrap:break-word;display:inline;vertical-align:top}",""]),t.locals={extensionDetailRow:"_1p8jYUkN2IDoiqPm0iV_fC"}},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-menu.menu-item{padding:10px 20px;cursor:pointer;color:black}.dnn-user-menu.menu-item:hover{background-color:#EFF0F0;color:#1E88C3}.dnn-user-menu.menu{position:absolute;right:-18px;top:35px;text-align:left;min-width:200px;border:1px solid #C8C8C8;border-radius:3px;background-color:#FFFFFF;list-style:none;padding:10px 0px;box-shadow:0 0 30px 0 rgba(0,0,0,0.1);z-index:1000}",""])},function(e,t,s){var r=s(34);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-change-password{background-color:#FFFFFF;position:absolute;width:47%;left:30px;z-index:100;box-sizing:border-box;float:left;border:1px solid #C8C8C8;box-shadow:0 0 17px 2px rgba(0,0,0,0.2)}.dnn-user-change-password .dnn-grid-cell{padding:15px;margin:0px;float:left;text-align:left}.dnn-user-change-password .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell{padding:0px 15px;margin:0px}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell .right{float:right}.dnn-user-change-password .buttons .dnn-grid-cell.leftBtn{padding-right:0px;text-align:right}.dnn-user-change-password .buttons .dnn-grid-cell.rightBtn{padding-left:30px}",""])},function(e,t,s){var r=s(36);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .dnn-user-menu.menu-popup{position:absolute}#users-container .dnn-user-menu .dnn-user-change-password{width:400px;right:-18px;top:35px;left:auto}",""])},function(e,t,s){var r=s(38);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"",""])},function(e,t,s){(t=e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._2Vvoybq9n9Ee0sL7GsKDnV{box-sizing:border-box;margin-top:10px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box{width:100%;background-color:white;padding:10px 0}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .box-title{margin-bottom:15px;text-transform:uppercase}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-system.with-right-border.bottom-half{padding-top:25px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-switch-container{width:100%}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-switch-container .dnn-switch{float:right}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-single-line-input-with-error .__react_component_tooltip{max-width:200px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell{padding:10px 15px;box-sizing:border-box}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell>hr{border:none;height:1px;color:#C8C8C8;background-color:#C8C8C8}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell .version-dropdown{width:31.1%;box-sizing:border-box;margin-right:10px;vertical-align:bottom}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell .version-dropdown:last-child{margin-right:0}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell.modal-footer{text-align:center}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .dnn-grid-cell.modal-footer button{min-width:100px;margin-right:10px}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .email-notification-line{text-align:center}._2Vvoybq9n9Ee0sL7GsKDnV .new-user-box .email-notification-line .dnn-checkbox-container.right{float:none}",""]),t.locals={newExtensionModal:"_2Vvoybq9n9Ee0sL7GsKDnV"}},function(e,t,s){var r=s(41);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.passwordStrength{line-height:1.5pt;height:1.5pt;position:relative;top:-18px}.passwordStrength.weak{background-color:red;width:25%}.passwordStrength.fair{background-color:#f6d500;width:75%}.passwordStrength.strong{background-color:green;width:100%}.passwordStrengthLabel{position:relative;top:-45px;left:308px;font-weight:700}.passwordStrengthLabel.weak{color:red}.passwordStrengthLabel.fair{color:#f6d500}.passwordStrengthLabel.strong{color:green}",""])},function(e,t,s){(t=e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._2-0Lsyw3Ot-QiEaQ7AgZbm{box-sizing:border-box;float:left;margin:15px 0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell{margin:5px 0px;float:left;text-align:left}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box{padding:10px 30px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right{border-left:1px solid #C8C8C8}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right .dnn-grid-system{margin:10px 0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right .dnn-grid-system.first{margin-bottom:4.5px;margin-right:0px;margin-left:0px;margin-top:0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .outer-box.right .dnn-grid-system .dnn-grid-cell{padding:0px;margin:0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell.no-padding{padding:0px}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link{padding:0px;font-weight:bold;cursor:pointer;color:#1E88C3}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link:active,._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link:hover{color:#21A3DA}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link.disabled{color:#C8C8C8;cursor:default}._2-0Lsyw3Ot-QiEaQ7AgZbm .dnn-grid-cell .link:visited{color:#226F9B}._2-0Lsyw3Ot-QiEaQ7AgZbm .buttons .dnn-grid-cell.leftBtn{padding-right:5px;text-align:right}._2-0Lsyw3Ot-QiEaQ7AgZbm .buttons .dnn-grid-cell.rightBtn{padding-left:10px}._2-0Lsyw3Ot-QiEaQ7AgZbm .isloading .input-tooltip-container input{pointer-events:none;border-color:#C8C8C8}",""]),t.locals={userSettings:"_2-0Lsyw3Ot-QiEaQ7AgZbm"}},function(e,t,s){var r=s(44);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.user-detail-row .edit-profile{float:left;padding:0px;width:100%;border:0px;min-height:700px;padding:10px 25px}",""])},function(e,t,s){var r=s(46);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .user-role-row{width:100%;float:left;padding:13px 20px;box-sizing:border-box;text-align:left}#users-container .user-role-row:not(:last-child){border-bottom:1px solid #C8C8C8}#users-container .user-role-row div.edit-row a{display:inline-block}#users-container .user-role-row .dnn-grid-cell{box-sizing:border-box}#users-container .user-role-row .dnn-grid-cell .actions{float:right;box-sizing:border-box;height:20px;text-align:right}#users-container .user-role-row .dnn-grid-cell .actions>div{text-align:left;float:left}#users-container .user-role-row .dnn-grid-cell .actions span{float:left}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker{height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:0;width:19px;height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon.active{opacity:1}#users-container .user-role-row .dnn-grid-cell .actions span a svg{width:23px;height:23px}#users-container .user-role-row .dnn-grid-cell .actions a{float:left;opacity:0}#users-container .user-role-row .dnn-grid-cell .actions:hover a{display:inline-block}#users-container .user-role-row .dnn-grid-cell .actions div.edit-row a{display:inline-block}#users-container .user-role-row:hover .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:1}#users-container .user-role-row:hover .dnn-grid-cell .actions a{opacity:1}",""])},function(e,t,s){var r=s(48);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,'svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .userroles-form-form{width:80%;margin:20px 10%;float:left;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list{float:left;width:100%;margin:15px 0;display:table;cursor:auto;box-sizing:border-box;border:1px solid #C8C8C8;text-align:left}#users-container .userroles-form-form .user-roles-list .user-role-body{color:#6F7273}#users-container .userroles-form-form .user-roles-list .user-role-body .no-roles-row{width:100%;float:left;text-align:center;font-weight:bold;padding:13px 20px;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list .user-role-header-row{display:table;border-bottom:1px solid #C8C8C8;width:100%;float:left;position:relative;padding:15px 20px;box-sizing:border-box;text-transform:uppercase}#users-container .userroles-form-form .user-roles-list-paging{text-align:left}#users-container .userroles-form-form .header{width:100%;float:left;box-sizing:border-box}#users-container .userroles-form-form .header .header-title{text-align:left;width:100%;font-weight:bold;display:inline-block;text-transform:uppercase;margin-top:10px;margin-bottom:10px}#users-container .userroles-form-form .header .add-box{width:100%;float:left;box-sizing:border-box;border-bottom:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box .dnn-grid-cell{padding:0px}#users-container .userroles-form-form .header .add-box .send-email-box{width:100%;float:left}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container{float:left;margin-top:10px;margin-right:10px}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container .checkbox{margin-bottom:0px}#users-container .userroles-form-form .header .add-box .send-email-box label{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span{width:100%;display:inline-block;border-left:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox{float:left;width:250px;height:34px;line-height:34px;vertical-align:middle;padding:0;border:none;color:#46292B;border-radius:0;display:inline-block;box-shadow:none;background:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox button{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-webkit-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox :-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox :-ms-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox input{-webkit-box-shadow:none;padding:0 0 0 12px;height:100%;vertical-align:top;background-color:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox input::-ms-clear{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container{box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup{border-radius:0px;border:1px solid #C8C8C8;box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list{margin:0;padding:0}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li{padding-left:15px;height:30px;line-height:30px;color:#6F7273;border:none;outline:none;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li:hover{background-color:#EFF0F0;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li.rw-state-selected{background-color:transparent;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .add-role-button{float:right;text-align:right;width:auto;font-weight:bolder;overflow:hidden;cursor:pointer;box-sizing:border-box;padding-top:10px}#users-container .userroles-form-form .header .add-box span .add-role-button svg{fill:#6F7273}#users-container .userroles-form-form .header .add-box span .add-role-button span{border:none}#users-container .userroles-form-form .header .add-box span .add-role-button .extension-action{float:left}#users-container .userroles-form-form .header .add-box span button[role="secondary"]{vertical-align:middle;margin:0 0 0 10px}',""])},function(e,t,s){(t=e.exports=s(4)(!1)).push([e.i,"._30Ywg8MZnSyy25yOY32zZ2 .dnn-grid-cell{overflow-wrap:break-word}._30Ywg8MZnSyy25yOY32zZ2 .dnn-grid-cell.no-users{float:left;width:100%;text-align:center;padding:10px}",""]),t.locals={usersList:"_30Ywg8MZnSyy25yOY32zZ2"}},function(e,t,s){var r=s(51);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.users-filter-container{float:left;box-sizing:border-box;margin-bottom:15px;width:100%;border:none}.users-filter-container .dnn-grid-cell{margin-bottom:5px}.users-filter-container .dnn-grid-cell .user-filters-filter{width:100%;border-right:1px solid #C8C8C8;font-size:13px;font-family:inherit;float:left;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-label{padding-top:4px;padding-left:0}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .dropdown-icon{top:5px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box{width:100%;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box input{padding:0px 16px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-toggle{width:auto}.users-filter-container .dnn-grid-cell .search-filter{float:left;width:100%}.users-filter-container .dnn-grid-cell .search-filter>div{display:block !important;border-left:1px solid #C8C8C8}.users-filter-container .dnn-grid-cell .search-filter>div input{display:block;width:100%;position:inherit !important;border:none;border-radius:none;background-color:transparent;outline:none;padding-right:45px}",""])},function(e,t,s){var r=s(53);"string"==typeof r&&(r=[[e.i,r,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(5)(r,n);r.locals&&(e.exports=r.locals)},function(e,t,s){(e.exports=s(4)(!1)).push([e.i,"#users-container *{box-sizing:border-box}#users-container .create-user-box-collapse{float:left}#users-container .create-user-box-collapse>div{float:left}#users-container .header-row{padding:10px 15px 10px}#users-container .user-names{padding-left:17px !important}#users-container .user-emails,#users-container .user-joined{padding-left:15px !important}#users-container .dnn-persona-bar-page-body.without-margin{margin-top:0}#users-container .dnn-persona-bar-page-body .users-workspace-tray{height:37px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell{height:100%;padding-top:7px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .users-filter-container .user-filters-filter{height:30px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .users-filter-container .user-filters-filter .dnn-dropdown .collapsible-label{padding-top:4px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .users-filter-container .user-filters-filter .dnn-dropdown .dropdown-icon{top:5px}#users-container .dnn-persona-bar-page-body .users-workspace-tray .dnn-grid-cell .dnn-search-box{width:100%;height:30px}#users-container .dnn-persona-bar-page-body .users-paging{float:left;width:100%;margin:0 2px;padding:18px}",""])},function(e,t,s){"use strict";s.r(t);var r=s(0),n=s.n(r),o=s(2),i=s.n(o),a=s(3),l=Object.assign({},window.dnn.utility),d={get:function(e){return l.getResx("Users",e)}},c=s(1);s(29);class p extends r.Component{render(){return n.a.createElement(c.GridCell,{columnSize:100,className:"header-row"},this.props.headers.map((e,t)=>n.a.createElement(c.GridCell,{key:`header-row-grid-cell-${t}`,columnSize:e.size,className:e.header?"":"empty"},n.a.createElement("h6",null,e.header||"Default"))))}}p.propTypes={headers:i.a.array.isRequired};var u=p,h=s(18),m=s.n(h),g=s(19),f=s.n(g);function b(e,t){if(!e)return"";return new Date(e).getFullYear()<1900?"-":f()(e).locale(l.getCulture()).format(!0===t?"LLL":"L")}function w(e){return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)}function x(e,t,s){return s=void 0===s?"asc":s,e=e.sort(function(e,r){return e[t]>r[t]?"asc"===s?1:-1:e[t]<r[t]?"asc"===s?-1:1:0})}s(10);class S extends r.Component{render(){return n.a.createElement("ul",{className:"dnn-user-menu menu"},this.props.children)}}S.propTypes={children:i.a.node};var E=S;class v extends r.Component{constructor(){super(),this.state={hover:!1}}render(){return n.a.createElement("li",{className:"dnn-user-menu menu-item",onMouseEnter:()=>this.setState({hover:!0}),onMouseLeave:()=>this.setState({hover:!1}),onClick:this.props.onMenuAction},this.props.children)}}v.propTypes={onMenuAction:i.a.func.isRequired,children:i.a.node.isRequired};var C=v;var y={RETRIEVED_USERS:"RETRIEVED_USERS",RETRIEVED_USER_DETAILS:"RETRIEVED_USER_DETAILS",CREATE_USER:"CREATE_USER",UPDATE_USER:"UPDATE_USER",DELETE_USER:"DELETE_USER",ERASE_USER:"ERASE_USER",RESTORE_USER:"RESTORE_USER",RETRIEVED_USER_FILTERS:"RETRIEVED_USER_FILTERS",USER_MADE_SUPERUSER:"USER_MADE_SUPERUSER",RETRIEVED_USERS_ROLES:"RETRIEVED_USERS_ROLES",RETRIEVED_SUGGEST_ROLES:"RETRIEVED_SUGGEST_ROLES",SAVE_USER_ROLE:"SAVE_USER_ROLE",REMOVE_USER_ROLE:"REMOVE_USER_ROLE",UPDATE_USER_AUTHORIZE_STATUS:"UPDATE_USER_AUTHORIZE_STATUS",USER_UNLOCKED:"USER_UNLOCKED",RETRIEVED_PASSWORD_STRENGTH_OPTIONS:"RETRIEVED_PASSWORD_STRENGTH_OPTIONS"};function U(e){let t=[];for(let s in e)e.hasOwnProperty(s)&&t.push(encodeURIComponent(s)+"="+encodeURIComponent(e[s]));return t.join("&")}var D=new class{getServiceFramework(e){let t=l.sf;return t.moduleRoot="PersonaBar",t.controller=e,t}getUsers(e,t,s){this.getServiceFramework("Users").get("GetUsers?"+U(e),{},t,s)}getUserDetails(e,t,s){this.getServiceFramework("Users").get("GetUserDetail?"+U(e),{},t,s)}updateUserBasicInfo(e,t,s){this.getServiceFramework("Users").post("UpdateUserBasicInfo",e,t,s)}getUserFilters(e,t){this.getServiceFramework("Users").get("GetUserFilters",{},e,t)}createUser(e,t,s){this.getServiceFramework("Users").post("CreateUser",e,t,s)}changePassword(e,t,s){this.getServiceFramework("Users").post("ChangePassword",e,t,s)}forceChangePassword(e,t,s){this.getServiceFramework("Users").post("ForceChangePassword?"+U(e),null,t,s)}sendPasswordResetLink(e,t,s){this.getServiceFramework("Users").post("SendPasswordResetLink?"+U(e),null,t,s)}deleteUser(e,t,s){this.getServiceFramework("Users").post("SoftDeleteUser?"+U(e),null,t,s)}hardDeleteUser(e,t,s){this.getServiceFramework("Users").post("HardDeleteUser?"+U(e),null,t,s)}restoreUser(e,t,s){this.getServiceFramework("Users").post("RestoreDeletedUser?"+U(e),null,t,s)}updateSuperUserStatus(e,t,s){this.getServiceFramework("Users").post("UpdateSuperUserStatus?"+U(e),null,t,s)}updateAuthorizeStatus(e,t,s){this.getServiceFramework("Users").post("UpdateAuthorizeStatus?"+U(e),null,t,s)}unlockUser(e,t,s){this.getServiceFramework("Users").post("UnlockUser?"+U(e),null,t,s)}getUserRoles(e,t,s){this.getServiceFramework("Users").get("GetUserRoles?"+U(e),{},t,s)}getSuggestRoles(e,t,s){this.getServiceFramework("Users").get("GetSuggestRoles?"+U(e),{},t,s)}saveUserRole(e,t,s,r,n){this.getServiceFramework("Users").post("SaveUserRole?notifyUser="+t+"&isOwner="+s,e,r,n)}removeUserRole(e,t,s){this.getServiceFramework("Users").post("RemoveUserRole",e,t,s)}passwordStrengthOptions(e,t){this.getServiceFramework("Users").get("PasswordStrengthOptions",{},e,t)}};function R(e){l.notifyError(JSON.parse(e.responseText).Message,5e3)}var I={getUsers:(e,t)=>s=>{D.getUsers(e,e=>{s({type:y.RETRIEVED_USERS,payload:e}),t&&t(e)},R)},getUserDetails:(e,t)=>s=>{D.getUserDetails(e,e=>{s({type:y.RETRIEVED_USER_DETAILS,payload:e}),t&&t(e)},R)},getUserFilters:e=>()=>{D.getUserFilters(t=>{e&&e(t)},R)},createUser:(e,t,s)=>r=>{D.createUser(e,e=>{r({type:y.CREATE_USER,payload:e,filter:t}),s&&s(e)},R)},updateUserBasicInfo:(e,t)=>s=>{D.updateUserBasicInfo(e,e=>{s({type:y.UPDATE_USER,payload:e}),t&&t(e)},R)},changePassword:(e,t)=>()=>{D.changePassword(e,e=>{t&&t(e)},R)},forceChangePassword:(e,t)=>()=>{D.forceChangePassword(e,e=>{t&&t(e)},R)},sendPasswordResetLink:(e,t)=>()=>{D.sendPasswordResetLink(e,e=>{t&&t(e)},R)},deleteUser:(e,t,s)=>r=>{let n=Object.assign({},e.userDetails);n.isDeleted=!0,D.deleteUser({userId:e.userDetails.userId},e=>{r({type:y.DELETE_USER,payload:n,filter:t}),s&&s(e)},R)},eraseUser:(e,t)=>s=>{D.hardDeleteUser(e,r=>{s({type:y.ERASE_USER,payload:{userId:e.userId}}),t&&t(r)},R)},restoreUser:(e,t,s)=>r=>{let n=Object.assign({},e.userDetails);n.isDeleted=!1,D.restoreUser({userId:e.userDetails.userId},e=>{r({type:y.RESTORE_USER,payload:n,filter:t}),s&&s(e)},R)},updateSuperUserStatus:(e,t,s)=>r=>{D.updateSuperUserStatus(e,n=>{r({type:y.USER_MADE_SUPERUSER,payload:{userId:e.userId,setSuperUser:e.setSuperUser},filter:t}),s&&s(n)},R)},updateAuthorizeStatus:(e,t,s,r)=>n=>{let o=Object.assign({},e.userDetails);o.authorized=t,D.updateAuthorizeStatus({userId:e.userDetails.userId,authorized:t},e=>{n({type:y.UPDATE_USER_AUTHORIZE_STATUS,payload:o,filter:s}),r&&r(e)},R)},unLockUser:(e,t)=>s=>{let r=Object.assign({},e.userDetails);D.unlockUser({userId:e.userDetails.userId},e=>{s({type:y.USER_UNLOCKED,payload:r}),t&&t(e)},R)},getUserRoles:(e,t)=>s=>{D.getUserRoles(e,e=>{s({type:y.RETRIEVED_USERS_ROLES,payload:e}),t&&t(e)},R)},passwordStrength:()=>e=>{D.passwordStrengthOptions(t=>{e({type:y.RETRIEVED_PASSWORD_STRENGTH_OPTIONS,payload:t})})},getSuggestRoles:(e,t)=>s=>{D.getSuggestRoles(e,e=>{s({type:y.RETRIEVED_SUGGEST_ROLES,payload:{matchedRoles:e}}),t&&t(e)},R)},saveUserRole:(e,t,s,r)=>n=>{D.saveUserRole(e,t,s,e=>{n({type:y.SAVE_USER_ROLE,payload:e}),r&&r(e)},R)},removeUserRole:(e,t)=>s=>{D.removeUserRole(e,r=>{s({type:y.REMOVE_USER_ROLE,payload:{userId:e.userId,roleId:e.roleId}}),t&&t(r)},R)}};s(33);const P={width:"100%"},k={userId:0,password:""};class _ extends r.Component{constructor(e){super(e),this.state={changePassword:Object.assign({},k),errors:{password:!1,confirmPassword:!1,passwordsMatch:!1},confirmPassword:""}}componentWillMount(){let{changePassword:e}=this.state;e.userId=this.props.userId,e.password="",this.setState({changePassword:e})}componentWillReceiveProps(e){this.clear(()=>{let{changePassword:t}=this.state;t.userId=e.userId,this.setState({changePassword:t})})}onChange(e,t){if("confirmPassword"===e)this.setState({confirmPassword:t.target.value},()=>{this.validateForm()});else{let{changePassword:s}=this.state;s[e]=t.target.value,this.setState({changePassword:s},()=>{this.validateForm()})}}save(){this.validateForm()&&this.props.dispatch(I.changePassword(this.state.changePassword,()=>{this.cancel(),l.notify(d.get("ChangeSuccessful"),3e3)}))}validateForm(){let e=!0,{errors:t}=this.state;t.password=!1,t.confirmPassword=!1,t.passwordsMatch=!1;let{changePassword:s}=this.state,{confirmPassword:r}=this.state;return""===s.password&&(t.password=!0,e=!1),""===s.confirmPassword?(t.confirmPassword=!0,e=!1):r!==s.password&&(t.passwordsMatch=!0,e=!1),this.setState({errors:t}),e}clear(e){this.setState({changePassword:Object.assign({},k),confirmPassword:"",errors:{password:!1,confirmPassword:!1,passwordsMatch:!1}},()=>{"function"==typeof e&&e()})}cancel(){this.clear(),"function"==typeof this.props.onCancel&&this.props.onCancel()}render(){let{state:e}=this;return this.props.visible&&n.a.createElement("div",{className:"dnn-user-change-password"},n.a.createElement(c.GridCell,{className:"do-not-close"},n.a.createElement(c.GridCell,null,n.a.createElement("div",{className:"title"},d.get("ChangePassword")),n.a.createElement(c.SingleLineInputWithError,{label:d.get("NewPassword"),error:e.errors.password,onChange:this.onChange.bind(this,"password"),tooltipMessage:d.get("NewPassword.Help"),errorMessage:d.get("NewPassword.Required"),style:P,type:"password",autoComplete:"off",inputStyle:{marginBottom:15},value:e.changePassword.password}),n.a.createElement(c.SingleLineInputWithError,{label:d.get("NewConfirm"),error:e.errors.confirmPassword||e.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:d.get("NewConfirm.Help"),errorMessage:e.errors.confirmPassword?d.get("NewConfirm.Required"):d.get("NewConfirmMismatch.ErrorMessage"),style:P,type:"password",inputStyle:{marginBottom:15},autoComplete:"off",value:e.confirmPassword})),n.a.createElement(c.GridSystem,null,n.a.createElement(c.Button,{className:"right do-not-close",id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this)},d.get("btnCancel")),n.a.createElement(c.Button,{id:"confirmbtn do-not-close",type:"primary",onClick:this.save.bind(this)},d.get("btnApply")))))}}_.propTypes={dispatch:i.a.func.isRequired,userId:i.a.array.isRequired,visible:i.a.bool,onCancel:i.a.func},_.defaultProps={visible:!0};var O=Object(a.connect)(function(e){return{userDetails:e.users.userDetails}})(_);s(35);function T(e,t){return!t.isSuperUser&&(e.isAdmin||e.permissions.MANAGE_ROLES)}function N(e){return e.isAdmin||e.permissions.MANAGE_PROFILE}function A(e){return e.isAdmin||e.permissions.VIEW_SETTINGS}function L(e,t){return e.isAdmin||e.permissions.MANAGE_PASSWORD}function M(e){return e.isAdmin||e.permissions.EDIT_SETTINGS}class z extends r.Component{constructor(e){super(e),this.state={userDetails:e.userDetails,ChangePasswordVisible:!1},this.showMenu=!1,this.handleClick=this.handleClick.bind(this)}handleClick(e){("string"!=typeof e.target.className||"string"==typeof e.target.className&&-1===e.target.className.indexOf("menu-item"))&&this.props.onClose()}componentWillMount(){document.addEventListener("click",this.handleClick,!1);let{props:e}=this;void 0===e.userDetails||e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}componentWillReceiveProps(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}getUserDetails(e){e.dispatch(I.getUserDetails({userId:e.userId},e=>{let t=Object.assign({},e);this.setState({userDetails:t},()=>{this.showMenu=!0})}))}reload(){this.getUserDetails(this.props)}componentWillUnmount(){document.removeEventListener("click",this.handleClick,!1)}sort(e,t,s){return s=void 0===s?"asc":s,e=e.sort(function(e,r){return e[t]>r[t]?"asc"===s?1:-1:e[t]<r[t]?"asc"===s?-1:1:0})}onItemClick(e){switch(e){case"ResetPassword":this.onSendPasswordLink(),this.props.onClose();break;case"ChangePassword":this.toggleChangePassword();break;case"ForceChangePassword":this.forcePasswordChange(),this.props.onClose();break;case"DeleteUser":this.deleteUser(),this.props.onClose();break;case"RemoveUser":this.hardDeleteUser(),this.props.onClose();break;case"RestoreUser":this.restoreUser(),this.props.onClose();break;case"cmdUnAuthorize":this.updateAuthorizeStatus(!1),this.props.onClose();break;case"cmdAuthorize":this.updateAuthorizeStatus(!0),this.props.onClose();break;case"cmdUnLock":this.unLockUser(),this.props.onClose();break;case"PromoteToSuperUser":this.updateSuperUserStatus(!0),this.props.onClose();break;case"DemoteToRegularUser":this.updateSuperUserStatus(!1),this.props.onClose();break;case"ViewProfile":this.onViewProfile(),this.props.onClose();break;default:"function"==typeof this.props.userMenuAction&&this.props.userMenuAction(e,this.state.userDetails),this.props.onClose()}}onViewProfile(){l.closePersonaBar(()=>{window.top.location=this.state.userDetails.profileUrl})}onSendPasswordLink(){this.props.dispatch(I.sendPasswordResetLink({userId:this.props.userId},()=>{l.notify(d.get("PasswordSent"),1e4)}))}deleteUser(){l.confirm(d.get("DeleteUser.Confirm"),d.get("Delete"),d.get("Cancel"),()=>{this.props.dispatch(I.deleteUser({userDetails:this.props.userDetails},this.props.filter,()=>{l.notify(d.get("UserDeleted"),3e3),this.reload()}))})}hardDeleteUser(){l.confirm(d.get("RemoveUser.Confirm"),d.get("Delete"),d.get("Cancel"),()=>{this.props.dispatch(I.eraseUser({userId:this.props.userId}))})}restoreUser(){this.props.dispatch(I.restoreUser({userDetails:this.props.userDetails},this.props.filter,()=>{l.notify(d.get("UserRestored"),3e3),this.reload()}))}forcePasswordChange(){this.props.dispatch(I.forceChangePassword({userId:this.props.userId},()=>{l.notify(d.get("UserPasswordUpdateChanged"),1e4),this.reload()}))}updateAuthorizeStatus(e){this.props.dispatch(I.updateAuthorizeStatus({userDetails:this.props.userDetails},e,this.props.filter,()=>{l.notify(e?d.get("UserAuthorized"):d.get("UserUnAuthorized"),3e3),this.reload()}))}unLockUser(){this.props.dispatch(I.unLockUser({userDetails:this.props.userDetails},()=>{l.notify(d.get("UserUnLocked"),3e3),this.reload()}))}updateSuperUserStatus(e){this.props.dispatch(I.updateSuperUserStatus({userId:this.props.userId,setSuperUser:e},this.props.filter,()=>{this.reload()}))}toggleChangePassword(e){const t=!this.state.ChangePasswordVisible;this.setState({ChangePasswordVisible:t}),e&&this.props.onClose()}render(){let e=[{key:"ViewProfile",title:d.get("ViewProfile"),index:10}];var t,s;return t=this.props.appSettings.applicationSettings.settings,s=this.state.userDetails.userId,t.isHost&&s!==t.userId&&(this.state.userDetails.isSuperUser?this.state.userDetails.isSuperUser&&(e=[{key:"DemoteToRegularUser",title:d.get("DemoteToRegularUser"),index:80}].concat(e)):e=[{key:"PromoteToSuperUser",title:d.get("PromoteToSuperUser"),index:80}].concat(e)),L(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(e=[{key:"ResetPassword",title:d.get("ResetPassword"),index:40}].concat(e),e=[{key:"ChangePassword",title:d.get("ChangePassword"),index:30}].concat(e),this.state.userDetails.needUpdatePassword||(e=[{key:"ForceChangePassword",title:d.get("ForceChangePassword"),index:40}].concat(e))),function(e,t){return(e.isAdmin||e.permissions.DELETE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(this.state.userDetails.isDeleted?(e=[{key:"RestoreUser",title:d.get("RestoreUser"),index:70}].concat(e),e=[{key:"RemoveUser",title:d.get("RemoveUser"),index:60}].concat(e)):e=[{key:"DeleteUser",title:d.get("DeleteUser"),index:60}].concat(e)),function(e,t){return(e.isAdmin||e.permissions.AUTHORIZE_UNAUTHORIZE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(e=this.state.userDetails.authorized?[{key:"cmdUnAuthorize",title:d.get("cmdUnAuthorize"),index:50}].concat(e):[{key:"cmdAuthorize",title:d.get("cmdAuthorize"),index:50}].concat(e),this.state.userDetails.isLocked&&(e=[{key:"cmdUnLock",title:d.get("cmUnlockUser"),index:100}].concat(e))),e=e.concat(this.props.getUserMenu&&this.props.getUserMenu(this.state.userDetails)||[]),e=this.sort(e,"index"),this.showMenu?n.a.createElement(c.GridCell,{className:"dnn-user-menu menu-popup",ref:e=>this.rootElement=e},!this.state.ChangePasswordVisible&&n.a.createElement(E,null,e.map((e,t)=>n.a.createElement(C,{key:`menu_item_${t}`,onMenuAction:this.onItemClick.bind(this,e.key)},e.title))),this.state.ChangePasswordVisible&&n.a.createElement(O,{onCancel:this.toggleChangePassword.bind(this,!0),userId:this.props.userId})):n.a.createElement("div",null)}}z.propTypes={dispatch:i.a.func.isRequired,userId:i.a.number.isRequired,onClose:i.a.func.isRequired,userDetails:i.a.object,getUserMenu:i.a.func.isRequired,userMenuAction:i.a.func.isRequired,appSettings:i.a.object,filter:i.a.number};var j=Object(a.connect)(function(e){return{userDetails:e.users.userDetails}})(z),G=[{index:5,size:30},{index:10,size:30},{index:15,size:20},{index:25,size:20}];class F extends r.Component{constructor(){super(),this.handleClick=this.handleClick.bind(this),this.rootElement=n.a.createRef(),this.state={opened:!1,showMenu:!1}}componentDidMount(){document.addEventListener("click",this.handleClick),this._isMounted=!0}componentWillUnmount(){document.removeEventListener("click",this.handleClick),this._isMounted=!1}componentWillMount(){let e=""!==this.props.openId&&this.props.id===this.props.openId;this.setState({opened:e})}handleClick(e){this._isMounted&&"string"==typeof e.target.className&&-1===e.target.className.indexOf("do-not-close")&&"confirmbtn"!==e.target.id&&"cancelbtn"!==e.target.id&&"add"!==this.props.openId&&""!==this.props.openId&&this.props.id===this.props.openId&&this.props.Collapse()}toggle(e){""!==this.props.openId&&this.props.id===this.props.openId&&this.props.currentIndex===e?this.props.Collapse():this.props.OpenCollapse(this.props.id,e)}toggleUserMenu(){const e=!this.state.showMenu;this.setState({showMenu:e})}getUserActions(e,t){let s=[];s=s.concat(this.props.getUserTabsIcons&&this.props.getUserTabsIcons(e)||[]),N(this.props.appSettings.applicationSettings.settings)&&(s=s.concat([{index:15,icon:c.SvgIcons.UserIcon,title:d.get("ManageProfile.title")}])),A(this.props.appSettings.applicationSettings.settings)&&(s=s.concat([{index:10,icon:c.SvgIcons.SettingsIcon,title:d.get("ManageSettings.title")}])),T(this.props.appSettings.applicationSettings.settings,e)&&(s=s.concat([{index:5,icon:c.SvgIcons.ShieldIcon,title:d.get("ManageRoles.title")}]));let r=0,o=x(s,"index","desc").map(e=>{let s=n.a.createElement("div",{key:`user_action_${r}`,title:e.title,className:"extension-action "+!(t&&this.props.currentIndex===r),dangerouslySetInnerHTML:{__html:e.icon},onClick:this.toggle.bind(this,r)});return r++,s});return[n.a.createElement("div",{key:`user_action_wrapper_${e.userId}`,style:{position:"relative"}},n.a.createElement("div",{className:"extension-action "+!this.state.showMenu,dangerouslySetInnerHTML:{__html:c.SvgIcons.MoreMenuIcon},onClick:this.toggleUserMenu.bind(this)}),this.state.showMenu&&n.a.createElement(j,{filter:this.props.filter,appSettings:this.props.appSettings,getUserMenu:this.props.getUserMenu&&this.props.getUserMenu.bind(this),userMenuAction:this.props.userMenuAction&&this.props.userMenuAction.bind(this),onClose:this.toggleUserMenu.bind(this),userId:e.userId}))].concat(o)}getUserColumns(e,t,s){let r=this.getUserActions(e,s),o=this.props.getUserColumns&&this.props.getUserColumns(e),i=void 0!==this.props.columnSizes?this.props.columnSizes:G;return x([{index:5,content:n.a.createElement(c.GridCell,{columnSize:i.find(e=>5===e.index).size,className:"user-names"+(e.isDeleted?" deleted":"")},n.a.createElement("h6",null,n.a.createElement(c.TextOverflowWrapper,{className:"email-link",text:e.displayName,maxWidth:125})),"-"!==e.displayName&&n.a.createElement("p",null,e.userName))},{index:10,content:n.a.createElement(c.GridCell,{columnSize:i.find(e=>10===e.index).size,className:"user-emails"+(e.isDeleted?" deleted":"")},n.a.createElement(c.TextOverflowWrapper,{className:"email-link",isAnchor:!0,href:"mailto:"+e.email,text:e.email,maxWidth:125}))},{index:15,content:n.a.createElement(c.GridCell,{columnSize:i.find(e=>15===e.index).size,className:"user-joined"+(e.isDeleted?" deleted":"")},"-"!==e.createdOnDate&&n.a.createElement("p",null,b(e.createdOnDate)),"-"===e.createdOnDate&&e.createdOnDate)},{index:25,content:"add"!==t&&n.a.createElement(c.GridCell,{columnSize:i.find(e=>25===e.index).size,style:{float:"right",textAlign:"right",paddingRight:2}},r)}].concat(o||[]),"index").map(e=>e.content)}render(){const{props:e}=this;let{user:t}=this.props,s=""!==e.openId&&e.id===e.openId,r="userRow-"+Math.random()+Date.now();void 0===t&&(t={avatar:"-",displayName:"-",userName:"-",email:"-",createdOnDate:"-",authorized:"-"});let o=this.getUserColumns(t,e.id,s);return n.a.createElement(c.GridCell,{className:"collapsible-component-users",id:r,ref:e=>this.rootElement=e},n.a.createElement(c.GridCell,{className:"collapsible-header-users "+!s},n.a.createElement(c.GridCell,{className:m.a.extensionDetailRow+" "+e.addIsOpened,columnSize:100},(!e.addIsOpened||"add-opened"===e.addIsOpened)&&n.a.createElement(c.GridCell,null,o),n.a.createElement(c.Collapsible,{accordion:!0,isOpened:s,keepCollapsedContent:!0,className:"user-detail-row"},s&&e.children))))}}F.propTypes={user:i.a.object,OpenCollapse:i.a.func,Collapse:i.a.func,id:i.a.string,openId:i.a.string,currentIndex:i.a.number,getUserTabsIcons:i.a.func,getUserColumns:i.a.func,getUserMenu:i.a.func.isRequired,userMenuAction:i.a.func.isRequired,appSettings:i.a.object,columnSizes:i.a.array,filter:i.a.number},F.defaultProps={isEvoq:!1};var q=F;s(37);class V extends r.Component{constructor(){super()}render(){const{props:e}=this;return e.renderIndex>=0&&e.children[e.renderIndex]}}V.propTypes={renderIndex:i.a.number,children:i.a.array},V.defaultProps={renderIndex:0};var B=V,H=s(20),W=s.n(H),Q="weak",Z="fair",Y="strong",K=function(e,t){if(null==t)return null;var s=$(e,t);return e.length<=2?null:s.rating<3?Q:s.rating<5?Z:s.rating>=5?Y:void 0},$=function(e,t){var s=0,r=t.minLength,n=!1,o=!1,i=!1,a=!1,l=!1,d=!1,c=t.minNumberOfSpecialChars||0,p=t.validationExpression||"";if(e.length>0){e.match(/[a-z]/)&&(s++,o=!0),e.match(/[A-Z]/)&&(s++,n=!0),e.match(/[0-9]/g)&&(s++,a=!0);var u=e.match(/[!,@,#,$,%,&,*,(,),\-,_,=,+,\',\",\\,|,\,,<,.,>,;,:,\/,?,\[,{,\],}]/g);u&&u.length>=c&&(s++,i=!0),e.length>=r&&(s++,l=!0),e.length>=r+3&&s++,p&&(d=new RegExp(p,"g").test(e))}return{rating:s,maxRating:5,hasOneUpperCaseChar:n,hasOneLowerCaseChar:o,hasMinNumberOfSpecialChars:i,hasOneNumericChar:a,hasLengthOfNChars:l,matchValidationExpression:d}};s(40);class J extends r.Component{constructor(e){super(e)}componentDidMount(){this.props.loadPasswordStrengthOptions()}render(){return n.a.createElement("div",null,n.a.createElement(c.SingleLineInputWithError,{label:d.get("Password"),error:this.props.error.password,onChange:this.props.onChangePassword,tooltipMessage:d.get("Password.Help"),errorMessage:d.get("Password.Required"),style:this.props.style,inputStyle:this.props.requiresQuestionAndAnswer?{marginBottom:0}:{marginBottom:15},type:"password",autoComplete:"off",value:this.props.UserDetails.password,tabIndex:7}),n.a.createElement("div",{id:"passwordStrengthBar",className:"passwordStrength "+K(this.props.UserDetails.password,this.props.passwordStrengthOptions)}),n.a.createElement("div",{id:"passwordStrengthLabel",className:"passwordStrengthLabel "+K(this.props.UserDetails.password,this.props.passwordStrengthOptions)},K(this.props.UserDetails.password,this.props.passwordStrengthOptions)))}}J.propTypes={error:i.a.object,style:i.a.object.isRequired,UserDetails:i.a.object.isRequired,requiresQuestionAndAnswer:i.a.bool.isRequired,onChangePassword:i.a.func.isRequired,passwordStrengthOptions:i.a.object,loadPasswordStrengthOptions:i.a.func};var X=Object(a.connect)(e=>({passwordStrengthOptions:e.users.passwordStrengthOptions}),e=>({loadPasswordStrengthOptions:()=>{e(I.passwordStrength())}}))(J);const ee={width:"100%"},te={firstName:"",lastName:"",email:"",userName:"",password:"",question:"",answer:"",randomPassword:!1,authorize:!0,notify:!1};class se extends r.Component{constructor(e){super(e),this.state={UserDetails:Object.assign({},te),confirmPassword:"",errors:{firstName:!1,lastName:!1,userName:!1,email:!1,password:!1,confirmPassword:!1,passwordsMatch:!1,question:!1,answer:!1}},this.submitted=!1}onChangePassword(e){this.setState({UserDetails:{...this.state.UserDetails,password:e.target.value},errors:{...this.state.errors,password:!1}})}onChange(e,t){let{UserDetails:s}=this.state;if("randomPassword"===e||"authorize"===e||"notify"===e)s[e]=t;else if("confirmPassword"===e){let{confirmPassword:e}=this.state;e=t.target.value,this.setState({confirmPassword:e})}else s[e]=t.target.value;this.setState({},()=>{this.validateForm()})}save(){this.submitted=!0,this.validateForm()&&this.props.save(I.createUser(this.state.UserDetails,this.props.filter,()=>{this.cancel(),l.notify(d.get("UserCreated"),3e3)}))}clearForm(e){let{UserDetails:t}=this.state;t=Object.assign({},te);let{errors:s}=this.state;s.firstName=!1,s.lastName=!1,s.userName=!1,s.email=!1,s.password=!1,s.confirmPassword=!1,s.passwordsMatch=!1,s.question=!1,s.answer=!1,this.submitted=!1,this.setState({UserDetails:t,errors:s,confirmPassword:""},()=>{"function"==typeof e&&e()})}cancel(){this.clearForm(()=>{this.props.onCancel()})}validateForm(){const{props:e}=this;let t=!0,s=e.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;if(this.submitted){let{UserDetails:e}=this.state,{errors:r}=this.state;r.firstName=!1,r.lastName=!1,r.userName=!1,r.email=!1,r.password=!1,r.confirmPassword=!1,r.passwordsMatch=!1,r.question=!1,r.answer=!1,""===e.firstName&&(r.firstName=!0,t=!1),""===e.lastName&&(r.lastName=!0,t=!1),""===e.userName&&(r.userName=!0,t=!1),""!==e.email&&w(e.email)||(r.email=!0,t=!1),!1===e.randomPassword&&""===e.password&&(r.password=!0,t=!1),!1===e.randomPassword&&""===this.state.confirmPassword?(r.confirmPassword=!0,t=!1):!1===e.randomPassword&&this.state.confirmPassword!==e.password&&(r.passwordsMatch=!0,t=!1),s&&(""===e.question&&(r.question=!0,t=!1),""===e.answer&&(r.answer=!0,t=!1)),this.setState({errors:r})}return t}render(){const{props:e,state:t}=this;let s=e.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;return n.a.createElement(c.GridCell,{className:W.a.newExtensionModal,style:e.style},n.a.createElement(c.GridCell,{className:"new-user-box"},n.a.createElement(c.GridSystem,{className:"with-right-border top-half"},n.a.createElement("div",null,n.a.createElement(c.SingleLineInputWithError,{value:t.UserDetails.firstName,error:t.errors.firstName,onChange:this.onChange.bind(this,"firstName"),label:d.get("FirstName"),tooltipMessage:d.get("FirstName.Help"),errorMessage:d.get("FirstName.Required"),style:ee,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:1}),n.a.createElement(c.SingleLineInputWithError,{value:t.UserDetails.userName,error:t.errors.userName,onChange:this.onChange.bind(this,"userName"),label:d.get("Username"),tooltipMessage:d.get("Username.Help"),errorMessage:d.get("Username.Required"),style:ee,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:3}),n.a.createElement(c.Switch,{value:t.UserDetails.authorize,label:d.get("Approved"),title:d.get("Approved.Help"),onChange:this.onChange.bind(this,"authorize"),tabIndex:5,onText:d.get("SwitchOn"),offText:d.get("SwitchOff")})),n.a.createElement("div",null,n.a.createElement(c.SingleLineInputWithError,{value:t.UserDetails.lastName,error:t.errors.lastName,onChange:this.onChange.bind(this,"lastName"),label:d.get("LastName"),tooltipMessage:d.get("LastName.Help"),errorMessage:d.get("LastName.Required"),style:ee,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:2}),n.a.createElement(c.SingleLineInputWithError,{value:t.UserDetails.email,error:t.errors.email,onChange:this.onChange.bind(this,"email"),label:d.get("Email"),tooltipMessage:d.get("Email.Help"),errorMessage:d.get("Email.Required"),style:ee,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:4}),n.a.createElement(c.Switch,{value:t.UserDetails.randomPassword,title:d.get("Random.Help"),label:d.get("Random")+":",onChange:this.onChange.bind(this,"randomPassword"),tabIndex:6,onText:d.get("SwitchOn"),offText:d.get("SwitchOff")}))),!t.UserDetails.randomPassword&&n.a.createElement(c.GridCell,null,n.a.createElement("hr",null)),!t.UserDetails.randomPassword&&n.a.createElement(c.GridSystem,null,n.a.createElement(X,{error:t.errors,onChangePassword:this.onChangePassword.bind(this),style:ee,inputStyle:s?{marginBottom:0}:{marginBottom:15},UserDetails:this.state.UserDetails}),n.a.createElement(c.SingleLineInputWithError,{label:d.get("Confirm"),error:t.errors.confirmPassword||t.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:d.get("Confirm.Help"),errorMessage:t.errors.confirmPassword?d.get("Confirm.Required"):d.get("ConfirmMismatch.ErrorMessage"),style:ee,type:"password",autoComplete:"off",inputStyle:s?{marginBottom:0}:{marginBottom:15},value:t.confirmPassword,tabIndex:8})),s&&n.a.createElement(c.GridSystem,null,n.a.createElement("div",null,n.a.createElement(c.SingleLineInputWithError,{label:d.get("Question"),error:t.errors.question,onChange:this.onChange.bind(this,"question"),tooltipMessage:d.get("Question.Help"),errorMessage:d.get("Question.Required"),style:ee,inputStyle:{marginBottom:15},autoComplete:"off",value:t.UserDetails.question,tabIndex:9})),n.a.createElement("div",null,n.a.createElement(c.SingleLineInputWithError,{label:d.get("Answer"),error:t.errors.answer,onChange:this.onChange.bind(this,"answer"),tooltipMessage:d.get("Answer.Help"),errorMessage:d.get("Answer.Required"),style:ee,autoComplete:"off",inputStyle:{marginBottom:15},value:t.UserDetails.answer,tabIndex:10}))),n.a.createElement(c.GridCell,{columnSize:100,className:"email-notification-line"},n.a.createElement(c.Checkbox,{value:t.UserDetails.notify,label:d.get("Notify"),onChange:this.onChange.bind(this,"notify"),tabIndex:9})),n.a.createElement(c.GridCell,{columnSize:100,className:"modal-footer"},n.a.createElement(c.Button,{id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this),tabIndex:10},d.get("btnCancel")),n.a.createElement(c.Button,{id:"confirmbtn",type:"primary",onClick:this.save.bind(this),tabIndex:11},d.get("btnSave")))))}}se.propTypes={save:i.a.func.isRequired,onCancel:i.a.func.isRequired,style:i.a.object,filter:i.a.number,appSettings:i.a.object};var re=Object(a.connect)(()=>{},e=>({save:t=>{e(t)}}))(se),ne=s(21),oe=s.n(ne);const ie={width:"100%"},ae={userId:0,displayName:"",userName:"",email:""};class le extends r.Component{constructor(e){super(e),this.state={accountSettings:Object.assign(ae),userDetails:e.userDetails,errors:{displayName:!1,userName:!1,loading:!1,email:!1},ChangePasswordVisible:!1}}componentWillMount(){let{props:e}=this;void 0===e.userDetails||e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}componentWillReceiveProps(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}makeBlankObj(e){let t=Object.assign({},e);return Object.keys(t).forEach(e=>t[e]=""),t}getUserDetails(e,t){const s=this.makeBlankObj(this.state.accountSettings),r=this.makeBlankObj(this.state.userDetails);this.setState({accountSettings:s,userDetails:r,loading:!0}),e.dispatch(I.getUserDetails({userId:t},e=>{this.updateUserDetailsState(e)}))}updateUserDetailsState(e){let t=Object.assign({},e),{accountSettings:s}=this.state;s.displayName=t.displayName,s.userName=t.userName,s.email=t.email,s.userId=t.userId,this.setState({accountSettings:s,userDetails:t,loading:!1})}onChange(e,t){if(this.state.loading)return;let{accountSettings:s}=this.state;s[e]=t.target.value,this.setState({accountSettings:s},()=>{this.validateForm(!0)})}save(){this.validateForm()&&this.props.dispatch(I.updateUserBasicInfo(this.state.accountSettings,()=>{l.notify(d.get("UserUpdated"),3e3),this.getUserDetails(this.props,this.state.accountSettings.userId),this.props.collapse()}))}validateForm(){let e=!0,{errors:t}=this.state;t.displayName=!1,t.userName=!1,t.email=!1;let{accountSettings:s}=this.state;return""===s.displayName&&(t.displayName=!0,e=!1),""===s.userName&&(t.userName=!0,e=!1),""!==s.email&&w(s.email)||(t.email=!0,e=!1),this.setState({errors:t}),e}onCancelPassword(){this.setState({ChangePasswordVisible:!1})}onChangePassword(){this.state.loading||this.setState({ChangePasswordVisible:!0})}onForcePasswordChange(){this.state.loading||this.props.dispatch(I.forceChangePassword({userId:this.props.userId},()=>{l.notify(d.get("UserPasswordUpdateChanged"),3e3);let{userDetails:e}=this.state;e.needUpdatePassword=!0,this.setState({userDetails:e})}))}onSendPasswordLink(){this.state.loading||this.props.dispatch(I.sendPasswordResetLink({userId:this.props.userId},()=>{l.notify(d.get("PasswordSent"),3e3)}))}stringifyBoolean(e){return""===e?"":e?d.get("True"):d.get("False")}render(){let{state:e}=this;return n.a.createElement(c.GridCell,{className:oe.a.userSettings},n.a.createElement(c.GridCell,null,n.a.createElement(c.GridCell,{className:"outer-box",columnSize:50},n.a.createElement(O,{visible:this.state.ChangePasswordVisible,onCancel:this.onCancelPassword.bind(this),userId:this.props.userId}),n.a.createElement("div",{className:"title"},d.get("AccountSettings")),n.a.createElement("div",{className:this.state.loading?"isloading":""},n.a.createElement(c.SingleLineInputWithError,{value:e.accountSettings.userName,error:e.errors.userName,onChange:this.onChange.bind(this,"userName"),label:d.get("Username"),tooltipMessage:d.get("Username.Help"),errorMessage:d.get("Username.Required"),style:ie,autoComplete:"off",enabled:M(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),n.a.createElement(c.SingleLineInputWithError,{value:e.accountSettings.displayName,error:e.errors.displayName,onChange:this.onChange.bind(this,"displayName"),label:d.get("DisplayName"),tooltipMessage:d.get("DisplayName.Help"),errorMessage:d.get("DisplayName.Required"),style:ie,autoComplete:"off",enabled:M(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),n.a.createElement(c.SingleLineInputWithError,{value:e.accountSettings.email,error:e.errors.email,onChange:this.onChange.bind(this,"email"),label:d.get("Email"),tooltipMessage:d.get("Email.Help"),errorMessage:d.get("Email.Required"),style:ie,autoComplete:"off",enabled:M(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}})),L(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&n.a.createElement(c.GridCell,{className:"no-padding"},n.a.createElement("div",{className:"title"},d.get("PasswordManagement")),n.a.createElement(c.GridCell,{className:"link"+(this.state.loading?" disabled":"")},n.a.createElement("div",{onClick:this.onChangePassword.bind(this)},"[ ",d.get("ChangePassword")," ]")),!e.userDetails.needUpdatePassword&&n.a.createElement(c.GridCell,{className:"link"+(this.state.loading?" disabled":"")},n.a.createElement("div",{onClick:this.onForcePasswordChange.bind(this)},"[ ",d.get("ForceChangePassword")," ]")),n.a.createElement(c.GridCell,{className:"link"+(this.state.loading?" disabled":"")},n.a.createElement("div",{onClick:this.onSendPasswordLink.bind(this)},"[ ",d.get("ResetPassword")," ]")))),n.a.createElement(c.GridCell,{className:"outer-box right",columnSize:50},n.a.createElement("div",{className:"title"},d.get("AccountData")),n.a.createElement(c.GridSystem,{className:"first"},n.a.createElement(c.GridCell,{title:d.get("CreatedDate.Help")},d.get("CreatedDate")),n.a.createElement(c.GridCell,null,b(e.userDetails.createdOnDate,!0))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("LastLoginDate.Help")},d.get("LastLoginDate")),n.a.createElement(c.GridCell,null,b(e.userDetails.lastLogin,!0))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("LastActivityDate.Help")},d.get("LastActivityDate")),n.a.createElement(c.GridCell,null,b(e.userDetails.lastActivity,!0))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("LastPasswordChangeDate.Help")},d.get("LastPasswordChangeDate")),n.a.createElement(c.GridCell,null,b(e.userDetails.lastPasswordChange,!0))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("LastLockoutDate.Help")},d.get("LastLockoutDate")),n.a.createElement(c.GridCell,null,"-"===b(e.userDetails.lastLockout,!0)?d.get("Never"):b(e.userDetails.lastLockout,!0))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("IsOnLine.Help")},d.get("IsOnLine")),n.a.createElement(c.GridCell,null,this.stringifyBoolean(e.userDetails.isOnline))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("LockedOut.Help")},d.get("LockedOut")),n.a.createElement(c.GridCell,null,this.stringifyBoolean(e.userDetails.isLocked))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("Approved.Help")},d.get("Approved")),n.a.createElement(c.GridCell,null,this.stringifyBoolean(e.userDetails.authorized))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("UpdatePassword.Help")},d.get("UpdatePassword")),n.a.createElement(c.GridCell,null,this.stringifyBoolean(e.userDetails.needUpdatePassword))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("IsDeleted.Help")},d.get("IsDeleted")),n.a.createElement(c.GridCell,null,this.stringifyBoolean(e.userDetails.isDeleted))),n.a.createElement(c.GridSystem,null,n.a.createElement(c.GridCell,{title:d.get("UserFolder.Help")},d.get("UserFolder")),n.a.createElement(c.GridCell,null,e.userDetails.userFolder)))),M(this.props.appSettings.applicationSettings.settings)&&n.a.createElement(c.GridCell,{className:"buttons"},n.a.createElement(c.GridCell,{columnSize:50,className:"leftBtn"},n.a.createElement(c.Button,{id:"cancelbtn",type:"secondary",onClick:this.props.collapse.bind(this)},d.get("btnCancel"))),n.a.createElement(c.GridCell,{columnSize:50,className:"rightBtn"},n.a.createElement(c.Button,{id:"confirmbtn",disabled:this.state.loading,type:"primary",onClick:this.save.bind(this)},d.get("btnSave")))))}}le.propTypes={dispatch:i.a.func.isRequired,userId:i.a.array.isRequired,collapse:i.a.func.isRequired,userDetails:i.a.object,appSettings:i.a.object};var de=Object(a.connect)(function(e){return{userDetails:e.users.userDetails}})(le);s(43);class ce extends r.Component{constructor(e){super(e),this.state={userDetails:e.userDetails}}componentWillMount(){let{props:e}=this;void 0!==e.userDetails&&e.userDetails.userId===e.userId||this.getUserDetails(e)}componentWillReceiveProps(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId&&this.getUserDetails(e)}getUserDetails(e){e.dispatch(I.getUserDetails({userId:e.userId},e=>{let t=Object.assign({},e);this.setState({userDetails:t})}))}render(){return void 0!==this.state.userDetails&&void 0!==this.state.userDetails.editProfileUrl&&n.a.createElement("iframe",{className:"edit-profile",seamless:!0,src:this.state.userDetails.editProfileUrl})}}ce.propTypes={userDetails:i.a.object,userId:i.a.number};var pe=Object(a.connect)(function(e){return{userDetails:e.users.userDetails}})(ce),ue=s(22);s(45);class he extends r.Component{constructor(){super(),this.state={editIndex:-1,editCommand:"",isCalendarVisible:!1}}onStartTimeClick(e,t){this.setState({editIndex:t,editCommand:"startTime",isCalendarVisible:!0})}onExpiresTimeClick(e,t){this.setState({editIndex:t,editCommand:"expiresTime",isCalendarVisible:!0})}onDeleteClick(e){const{props:t}=this;l.confirm(function(){let e=arguments[0],t=arguments;return e.replace(/{(\d+)}/gi,function(e,s){let r=parseInt(s)+1;return t[r]})}(d.get("DeleteRole.Confirm"),e.roleName,e.displayName),d.get("Delete"),d.get("Cancel"),()=>{t.dispatch(I.removeUserRole(e))})}isEmptyDate(e){return!e||new Date(e).getFullYear()<1970}onChange(e,t,s){const{state:r}=this;r.editIndex=-1,r.editCommand="";let n="startTime"===t?s:e.startTime,o="expiresTime"===t?s:e.expiresTime;this.props.saveRole(e.roleId,n,o),this.setState({isCalendarVisible:!1})}getBoundDate(e,t){if("startTime"===t){let t=new Date(2049,11,31);return this.isEmptyDate(e.expiresTime)||(t=new Date((new Date).setTime(new Date(e.expiresTime).getTime()-864e5))),t}if("expiresTime"===t){let t=new Date(1970,0,1);return this.isEmptyDate(e.startTime)||(t=new Date((new Date).setTime(new Date(e.startTime).getTime()+864e5))),t}}getDate(e,t){let s=new Date;return"startTime"===t?this.isEmptyDate(e.startTime)||(s=new Date(e.startTime)):"expiresTime"===t&&(this.isEmptyDate(e.expiresTime)||(s=new Date(e.expiresTime))),s}createRoleActions(){const{props:e,state:t}=this;let s=e.roleDetails.allowExpired?n.a.createElement("span",null,n.a.createElement(c.DatePicker,{date:this.getDate(e.roleDetails,"startTime"),maxDate:this.getBoundDate(e.roleDetails,"startTime"),updateDate:this.onChange.bind(this,e.roleDetails,"startTime"),mode:"start",applyButtonText:d.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onStartTimeClick.bind(this,e.roleDetails,e.index)})):null,r=e.roleDetails.allowExpired?n.a.createElement("span",null,n.a.createElement(c.DatePicker,{date:this.getDate(e.roleDetails,"expiresTime"),minDate:this.getBoundDate(e.roleDetails,"expiresTime"),updateDate:this.onChange.bind(this,e.roleDetails,"expiresTime"),mode:"end",applyButtonText:d.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onExpiresTimeClick.bind(this,e.roleDetails,e.index)})):null,o=e.roleDetails.allowDelete?n.a.createElement("a",{className:"extension-action",dangerouslySetInnerHTML:{__html:c.SvgIcons.XIcon},onClick:this.onDeleteClick.bind(this,e.roleDetails,e.index)}):null;return n.a.createElement("div",{className:t.editIndex===e.index?"edit-row":null},s,r,o)}render(){const{props:e}=this;return n.a.createElement("div",{className:"user-role-row"},n.a.createElement(c.GridCell,{title:e.roleDetails.roleName,columnSize:25},e.roleDetails.roleName),n.a.createElement(c.GridCell,{columnSize:20,title:b(e.roleDetails.startTime)},b(e.roleDetails.startTime)),n.a.createElement(c.GridCell,{columnSize:20,title:b(e.roleDetails.expiresTime)},b(e.roleDetails.expiresTime)),n.a.createElement(c.GridCell,{columnSize:35},n.a.createElement("div",{className:"actions"},this.createRoleActions())))}}he.propTypes={dispatch:i.a.func.isRequired,roleDetails:i.a.object.isRequired,index:i.a.number,saveRole:i.a.func.isRequired,deleteRole:i.a.func.isRequired};var me=Object(a.connect)(function(){return{}})(he);s(47);class ge extends r.Component{constructor(e){super(e),this.state={roleSelectState:{userId:-1,keyword:""},currentPage:0,pageSize:10,roleKeyword:"",sendEmail:!0,isOwner:!1,allowOwner:!1},this.comboBoxDom=null,this.debounceGetSuggestRoles=Object(ue.debounce)(500,this.debounceGetSuggestRoles)}componentWillReceiveProps(e){this.setState(e)}componentWillMount(){this.getRoles()}getRoles(){const{props:e,state:t}=this;let s={userId:e.userDetails.userId,keyword:t.roleKeyword,pageIndex:t.currentPage,pageSize:t.pageSize};e.dispatch(I.getUserRoles(s))}getSuggestRoles(){const{props:e,state:t}=this;let s=t.roleSelectState.roleId>=0?"":t.roleSelectState.keyword;e.dispatch(I.getSuggestRoles({keyword:s,count:10}))}debounceGetSuggestRoles(){this.getSuggestRoles()}onRoleSelectorChanged(e){e.roleId||e.roleName||(this.setState({roleSelectState:{roleId:-1,keyword:e}}),this.debounceGetSuggestRoles())}onRoleSelectorSelected(e){this.onRoleSelected(e.roleId,()=>{this.setState({roleSelectState:{roleId:e.roleId,keyword:e.roleName}},()=>{this.getSuggestRoles()})})}onRoleSelectorToggle(){}onAddRole(){const{state:e}=this;let t=e.roleSelectState.roleId;-1!==t&&void 0!==t&&(this.saveRole(t),this.setState({roleSelectState:{roleId:-1,keyword:""}}))}saveRole(e,t,s){const{props:r}=this;let n={roleId:e,userId:r.userDetails.userId,startTime:t,expiresTime:s};r.dispatch(I.saveUserRole(n,this.state.sendEmail,this.state.isOwner)),this.setState({sendEmail:!0,isOwner:!1,allowOwner:!1})}onPageChanged(e,t){let{state:s}=this;void 0!==t&&s.pageSize!==t&&(s.pageSize=t),s.currentPage=e,this.setState({state:s}),this.getRoles()}getRoleRows(){let e=this.props.userRoles,t=e.map((e,t)=>n.a.createElement(me,{roleDetails:e,index:t,key:`role_row_${t}`,saveRole:this.saveRole.bind(this)}));return n.a.createElement("div",{className:"user-role-body"},e.length>0?t:n.a.createElement("div",{className:"no-roles-row"},d.get("NoRoles")))}onRoleSelected(e,t){if(void 0!==this.props.matchedRoles&&this.props.matchedRoles.length>0&&this.props.matchedRoles.some(t=>t.roleId===e)){let s=this.props.matchedRoles.filter(t=>t.roleId===e)[0];this.setState({allowOwner:s.allowOwner},()=>{"function"==typeof t&&t()})}}onSendEmailClick(e){this.setState({sendEmail:e})}onIsOwnerClick(e){this.setState({isOwner:e})}renderHeader(){let e=[{name:"Role",width:25},{name:"Start",width:20},{name:"Expires",width:20},{name:"",width:35}].map((e,t)=>n.a.createElement(c.GridCell,{key:`grid_cell_${t}`,columnSize:e.width,style:{fontWeight:"bolder"}},""!==e.name?n.a.createElement("span",null,d.get(e.name+".Header")):n.a.createElement("div",null)));return n.a.createElement("div",{className:"user-role-header-row"},e)}renderPaging(){if(this.props.totalRecords>0)return n.a.createElement(c.Pager,{showStartEndButtons:!1,showPageSizeOptions:!1,numericCounters:0,summaryText:d.get("rolesSummaryText"),pageInfoText:d.get("rolesPageInfoText"),showPageInfo:!0,pageSize:this.state.pageSize,totalRecords:this.props.totalRecords,onPageChanged:this.onPageChanged.bind(this),culture:l.getCulture()})}render(){const{state:e}=this;return n.a.createElement("div",{className:"userroles-form-form"},n.a.createElement("div",{className:"header"},n.a.createElement("div",{className:"header-title"},d.get("Roles.Title")),n.a.createElement("div",{className:"add-box"},n.a.createElement(c.GridCell,{columnSize:30},n.a.createElement("div",{className:"send-email-box"},n.a.createElement(c.Checkbox,{value:this.state.sendEmail,onChange:this.onSendEmailClick.bind(this),label:d.get("SendEmail"),labelPlace:"right"}),this.state.allowOwner&&n.a.createElement(c.Checkbox,{value:this.state.isOwner,onChange:this.onIsOwnerClick.bind(this),label:d.get("IsOwner"),labelPlace:"right"}))),n.a.createElement(c.GridCell,{columnSize:70},n.a.createElement("span",null,n.a.createElement(c.Combobox,{suggest:!1,ref:e=>{this.comboBoxDom=e},placeholder:d.get("AddRolePlaceHolder"),open:this.props.matchedRoles&&this.props.matchedRoles.length>0,onToggle:this.onRoleSelectorToggle.bind(this),onChange:this.onRoleSelectorChanged.bind(this),onSelect:this.onRoleSelectorSelected.bind(this),data:this.props.matchedRoles,value:e.roleSelectState.keyword,valueField:"roleId",textField:"roleName"}),n.a.createElement("div",{className:"add-role-button",onClick:this.onAddRole.bind(this)},n.a.createElement("div",{className:"extension-action",title:d.get("Add"),dangerouslySetInnerHTML:{__html:c.SvgIcons.AddIcon}}),d.get("Add")))))),n.a.createElement("div",{className:"user-roles-list"},this.renderHeader(),this.getRoleRows()),n.a.createElement("div",{className:"user-roles-list-paging"},this.renderPaging()))}}ge.propTypes={dispatch:i.a.func.isRequired,userDetails:i.a.object.isRequired,userRoles:i.a.array.isRequired,totalRecords:i.a.number,matchedRoles:i.a.array},ge.defaultProps={matchedRoles:[]};var fe=Object(a.connect)(function(e){return{matchedRoles:e.users.matchedRoles,userRoles:e.users.userRoles,totalRecords:e.users.userRolesCount}})(ge),be=s(23),we=s.n(be);class xe extends r.Component{constructor(){super(),this.state={openId:"",renderIndex:-1}}componentWillReceiveProps(){this.collapse()}uncollapse(e,t){setTimeout(()=>{this.setState({openId:e,renderIndex:t})})}collapse(){""!==this.state.openId&&this.setState({openId:"",renderIndex:-1})}toggle(e,t){""!==e?this.uncollapse(e,t):this.collapse()}onAddUser(){this.toggle("add"===this.state.openId?"":"add",0)}getChildren(e){let t=[];if(t=t.concat(this.props.getUserTabs&&this.props.getUserTabs(e)||[]),A(this.props.appSettings.applicationSettings.settings)){const s=n.a.createElement(de,{userId:e.userId,collapse:this.collapse.bind(this),appSettings:this.props.appSettings});t=t.concat([{index:10,content:s}])}return T(this.props.appSettings.applicationSettings.settings,e)&&(t=t.concat([{index:5,content:n.a.createElement(fe,{userDetails:e})}])),N(this.props.appSettings.applicationSettings.settings)&&(t=t.concat([{index:15,content:n.a.createElement(pe,{userId:e.userId})}])),x(t,"index","desc").map(e=>e.content)}getHeaders(){let e=void 0!==this.props.columnSizes?this.props.columnSizes:G,t=[{index:5,size:e.find(e=>5===e.index).size,header:d.get("Name.Header")},{index:10,size:e.find(e=>10===e.index).size,header:d.get("Email.Header")},{index:15,size:e.find(e=>15===e.index).size,header:d.get("Created.Header")},{index:25,size:e.find(e=>25===e.index).size,header:""}];if(void 0!==this.props.getUserColumns&&"function"==typeof this.props.getUserColumns){let s=this.props.getUserColumns();void 0!==s&&s.length>0&&(t=x(s.map(t=>({index:t.index,header:t.header,size:e.find(e=>e.index===t.index).size})).concat(t),"index"))}return t}render(){const{props:e}=this;let t=0;const s="add"===this.state.openId&&((r=this.props.appSettings.applicationSettings.settings).isAdmin||r.permissions.ADD_USER);var r;const o=this.getHeaders();return n.a.createElement(c.GridCell,{className:we.a.usersList},n.a.createElement(u,{headers:o}),n.a.createElement(q,{Collapse:this.collapse.bind(this),OpenCollapse:this.toggle.bind(this),currentIndex:this.state.renderIndex,openId:this.state.openId,key:"user-add",appSettings:e.appSettings,columnSizes:e.columnSizes,id:"add",addIsOpened:s?"add-opened":"closed",filter:e.filter},n.a.createElement(B,null,(()=>[n.a.createElement(re,{key:`create-user-box-${t}`,filter:e.filter,onCancel:this.collapse.bind(this),appSettings:e.appSettings})])())),e.users&&e.users.length>0&&e.users.map((s,r)=>{let o="row-"+t++;const i=this.getChildren(s);return n.a.createElement(q,{user:s,Collapse:this.collapse.bind(this),OpenCollapse:this.toggle.bind(this),currentIndex:this.state.renderIndex,openId:this.state.openId,key:"user-"+r,getUserColumns:e.getUserColumns&&e.getUserColumns.bind(this),getUserTabsIcons:e.getUserTabsIcons&&e.getUserTabsIcons.bind(this),getUserMenu:e.getUserMenu&&e.getUserMenu.bind(this),userMenuAction:e.userMenuAction&&e.userMenuAction.bind(this),appSettings:e.appSettings,columnSizes:e.columnSizes,id:o,filter:e.filter},n.a.createElement(B,{renderIndex:this.state.renderIndex},i))}),e.users&&0===e.users.length&&n.a.createElement(c.GridCell,{className:"no-users"},d.get("noUsers")))}}xe.propTypes={dispatch:i.a.func.isRequired,getUserTabs:i.a.func,getUserTabsIcons:i.a.func,getUserColumns:i.a.func,getUserMenu:i.a.func,userMenuAction:i.a.func,appSettings:i.a.object,columnSizes:i.a.array,filter:i.a.number};var Se=Object(a.connect)(function(e){return{users:e.users.users}},null,null,{withRef:!0})(xe);s(50);class Ee extends r.Component{constructor(e){super(e),this.state={selectedUserFilter:{label:d.get("Authorized"),value:0},searchText:""}}onSelect(e){let{label:t}=e,{value:s}=e,{selectedUserFilter:r}=this.state;s!==r.value&&(r.label=t,r.value=s,0===r.value||5===r.value?this.setState({selectedUserFilter:{label:"",value:-1},searchText:""},()=>{this.setState({selectedUserFilter:r,searchText:""},()=>{this.props.onChange(e,this.state.searchText)})}):this.setState({selectedUserFilter:r,searchText:""},()=>{this.props.onChange(e,this.state.searchText)}))}onKeywordChanged(e){this.setState({searchText:e},()=>{this.props.onChange(this.state.selectedUserFilter,e)})}BuildUserFiltersOptions(){let{userFilters:e}=this.props,t=[];return t=e.map(e=>({label:e.Key,value:e.Value}))}render(){let e=this.BuildUserFiltersOptions();return n.a.createElement("div",{className:"users-filter-container"},n.a.createElement(c.GridCell,{columnSize:35},null!=this.userFiltersOptions&&this.userFiltersOptions.length>0&&n.a.createElement("div",{className:"user-filters-filter"},n.a.createElement(c.Dropdown,{style:{width:"100%"},withBorder:!1,options:e,label:this.state.selectedUserFilter.label,onSelect:this.onSelect.bind(this),prependWith:d.get("ShowLabel")}),n.a.createElement("div",{className:"clear"}))),n.a.createElement(c.GridCell,{columnSize:30},n.a.createElement("div",null,"  ")),n.a.createElement(c.GridCell,{columnSize:35},n.a.createElement("div",{className:"search-filter"},(0===this.state.selectedUserFilter.value||5===this.state.selectedUserFilter.value)&&n.a.createElement(c.SearchBox,{placeholder:d.get("SearchPlaceHolder"),onSearch:this.onKeywordChanged.bind(this),maxLength:50,iconStyle:{right:0}}),n.a.createElement("div",{className:"clear"}))))}}Ee.propTypes={dispatch:i.a.func.isRequired,onChange:i.a.func.isRequired,userFilters:i.a.array.isRequired};var ve=Ee,Ce=(s(52),s(8)),ye=s(7);function Ue(e){return(Ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function De(e,t){for(var s=0;s<t.length;s++){var r=t[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Re(e,t){return!t||"object"!==Ue(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ie(e){return(Ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Pe(e,t){return(Pe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ke={searchText:"",filter:0,pageIndex:0,pageSize:10,sortColumn:"",sortAscending:!1,resetIndex:!1},_e=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=Re(this,Ie(t).call(this))).state={userFilters:[],searchParameters:ke},e}var s,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Pe(e,t)}(t,r["Component"]),s=t,(o=[{key:"componentWillMount",value:function(){var e=this;this.props.dispatch(Ce.CommonUsersActions.getUserFilters(function(t){var s=Object.assign([],JSON.parse(JSON.stringify(t)));e.setState({userFilters:s})}))}},{key:"onChange",value:function(e,t){this.setState(function(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}({},e,t.target.value))}},{key:"onFilterChange",value:function(e,t){var s=this,r=this.state.searchParameters;r.searchText=t,r.filter=e.value,r.pageIndex=0,r.resetIndex=!0,this.props.dispatch(Ce.CommonUsersActions.getUsers(r)),this.setState({searchParameters:r},function(){var e=s.state.searchParameters;e.resetIndex=!1,s.setState({searchParameters:e})})}},{key:"onPageChanged",value:function(e,t){var s=this.state.searchParameters;s.pageIndex=e,s.pageSize=t,this.props.dispatch(Ce.CommonUsersActions.getUsers(s)),this.setState({searchParameters:s})}},{key:"getWorkSpaceTray",value:function(){return this.state.userFilters.length>0&&n.a.createElement(c.GridCell,{className:"users-workspace-tray"},n.a.createElement(ve,{onChange:this.onFilterChange.bind(this),userFilters:this.state.userFilters}))}},{key:"toggleCreateBox",value:function(){this.userTable.onAddUser()}},{key:"canAddUser",value:function(){return ye.a.applicationSettings.settings.isAdmin||ye.a.applicationSettings.settings.permissions.ADD_USER}},{key:"render",value:function(){var e=this,t=this.props,s=this.state,r=s.createBoxVisible?"without-margin":"";return n.a.createElement(c.GridCell,null,n.a.createElement(c.PersonaBarPageHeader,{title:d.get("nav_Users")},this.canAddUser()&&n.a.createElement(c.Button,{type:"primary",size:"large",onClick:this.toggleCreateBox.bind(this),title:d.get("btnCreateUser")},d.get("btnCreateUser"))),n.a.createElement(c.PersonaBarPageBody,{workSpaceTrayVisible:!0,workSpaceTrayOutside:!0,workSpaceTray:this.getWorkSpaceTray(),className:r},n.a.createElement(Se,{ref:function(t){return e.userTable=t},appSettings:ye.a,filter:s.searchParameters.filter}),n.a.createElement("div",{className:"users-paging"},n.a.createElement(c.Pager,{pageSizeDropDownWithoutBorder:!0,showSummary:!0,showPageInfo:!1,pageSizeOptionText:d.get("usersPageSizeOptionText"),summaryText:d.get("usersSummaryText"),pageSize:this.state.searchParameters.pageSize,totalRecords:t.totalUsers,onPageChanged:this.onPageChanged.bind(this),resetIndex:this.state.searchParameters.resetIndex,culture:l.getCulture()}))))}}])&&De(s.prototype,o),i&&De(s,i),t}();_e.propTypes={dispatch:i.a.func.isRequired,totalUsers:i.a.number};var Oe=Object(a.connect)(function(e){return{totalUsers:e.users.totalUsers}})(_e);function Te(e){return(Te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ne(e,t){for(var s=0;s<t.length;s++){var r=t[s];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ae(e,t){return!t||"object"!==Te(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Le(e){return(Le=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Me(e,t){return(Me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ze=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ae(this,Le(t).call(this))}var s,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Me(e,t)}(t,r["Component"]),s=t,(o=[{key:"componentWillMount",value:function(){this.props.dispatch(Ce.CommonUsersActions.getUsers({searchText:"",filter:0,pageIndex:0,pageSize:10,sortColumn:"",sortAscending:!1}))}},{key:"render",value:function(){return n.a.createElement("div",{className:"boilerplate-app personaBar-mainContainer"},n.a.createElement(c.PersonaBarPage,{isOpen:!0},n.a.createElement(Oe,null)))}}])&&Ne(s.prototype,o),i&&Ne(s,i),t}();ze.PropTypes={dispatch:i.a.func.isRequired};var je=Object(a.connect)(function(){return{}})(ze);t.default=function(){return n.a.createElement("div",{className:"boilerplate-root"},n.a.createElement(je,null))}},function(e,t,s){"use strict";s.r(t);var r=s(0),n=s.n(r),o=s(11),i=s(3),a=s(7),l={init:function(){var e=window.dnn.initUsers();a.a.init(e),s(24)},dispatch:function(){throw new Error("dispatch method needs to be overwritten from the Redux store")}},d=s(6),c=s(9),p=s.n(c),u=s(12),h=s.n(u),m=s(13),g=Object(d.combineReducers)({users:Object(m.users)()}),f=s(14),b=s(15),w=s.n(b),x=s(16),S=s.n(x),E=Object(f.createDevTools)(n.a.createElement(S.a,{toggleVisibilityKey:"ctrl-h",changePositionKey:"ctrl-q"},n.a.createElement(w.a,null))),v=!0;var C,y=s(17),U=s.n(y),D=Object(d.createStore)(g,C,Object(d.compose)(v?Object(d.applyMiddleware)(p.a):Object(d.applyMiddleware)(p.a,h()()),E.instrument()));l.dispatch=D.dispatch;var R=document.getElementById("users-container");if(!R)throw Error("Cannot find users container.");l.init(),Object(o.render)(n.a.createElement(i.Provider,{store:D},n.a.createElement(U.a,null)),R)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LmRubi5ub2RlTW9kdWxlcy5SZWFjdFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4ubm9kZU1vZHVsZXMuQ29tbW9uQ29tcG9uZW50c1wiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4ubm9kZU1vZHVsZXMuUmVhY3RSZWR1eFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LmRubi5ub2RlTW9kdWxlcy5SZWR1eFwiIiwid2VicGFjazovLy8uL3NyYy91dGlscy9hcHBsaWNhdGlvblNldHRpbmdzLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4uVXNlcnMuQ29tbW9uQWN0aW9uc1wiIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4ubm9kZU1vZHVsZXMuUmVkdXhUaHVua1wiIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL1VzZXJNZW51L21lbnUvc3R5bGUubGVzcz84NWMyIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4ubm9kZU1vZHVsZXMuUmVhY3RET01cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3aW5kb3cuZG5uLm5vZGVNb2R1bGVzLlJlZHV4SW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3aW5kb3cuZG5uLlVzZXJzLkNvbW1vblJlZHVjZXJzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LmRubi5ub2RlTW9kdWxlcy5SZWR1eERldlRvb2xzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid2luZG93LmRubi5ub2RlTW9kdWxlcy5SZWR1eERldlRvb2xzTG9nTW9uaXRvclwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4ubm9kZU1vZHVsZXMuUmVkdXhEZXZUb29sc0RvY2tNb25pdG9yXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvUm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9EZXRhaWxSb3cvc3R5bGUubGVzcz9kNmExIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4ubm9kZU1vZHVsZXMuTW9tZW50XCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9DcmVhdGVVc2VyQm94L3N0eWxlLmxlc3M/YzdjZCIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9Vc2VyU2V0dGluZ3Mvc3R5bGUubGVzcz8xMzFiIiwid2VicGFjazovLy9leHRlcm5hbCBcIndpbmRvdy5kbm4ubm9kZU1vZHVsZXMuVGhyb3R0bGVEZWJvdW5jZVwiIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL3N0eWxlLmxlc3M/ZDkzYSIsIndlYnBhY2s6Ly8vLi9zcmMvbGVzcy9zdHlsZS5sZXNzPzJjMDIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xlc3Mvc3R5bGUubGVzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvSGVhZGVyUm93L3N0eWxlLmxlc3M/YjY5NyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9IZWFkZXJSb3cvc3R5bGUubGVzcyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9EZXRhaWxSb3cvc3R5bGUubGVzcyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9Vc2VyTWVudS9tZW51L3N0eWxlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvQ2hhbmdlUGFzc3dvcmQvc3R5bGUubGVzcz80MTk1Iiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL0NoYW5nZVBhc3N3b3JkL3N0eWxlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvVXNlck1lbnUvc3R5bGUubGVzcz8wYTJmIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL1VzZXJNZW51L3N0eWxlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9jb21tb24vQ29sbGFwc2libGVTd2l0Y2hlci9zdHlsZS5sZXNzPzhiNGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9jb21tb24vQ29sbGFwc2libGVTd2l0Y2hlci9zdHlsZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvQ3JlYXRlVXNlckJveC9zdHlsZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvY29tbW9uL1Bhc3N3b3JkL3N0eWxlLmxlc3M/NGQwYSIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL2NvbW1vbi9QYXNzd29yZC9zdHlsZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL1VzZXJTZXR0aW5ncy9zdHlsZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL0VkaXRQcm9maWxlL3N0eWxlLmxlc3M/ODhlMiIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9FZGl0UHJvZmlsZS9zdHlsZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL1VzZXJzUm9sZXMvUm9sZVJvdy9zdHlsZS5sZXNzPzlhNzAiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvVXNlcnNSb2xlcy9Sb2xlUm93L3N0eWxlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvVXNlcnNSb2xlcy9zdHlsZS5sZXNzP2M5OGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvVXNlcnNSb2xlcy9zdHlsZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL3N0eWxlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9GaWx0ZXJzQmFyL3N0eWxlLmxlc3M/YTIyNyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL0ZpbHRlcnNCYXIvc3R5bGUubGVzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Cb2R5L3N0eWxlLmxlc3M/MWVlNSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Cb2R5L3N0eWxlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbG9jYWxpemF0aW9uL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9IZWFkZXJSb3cvaW5kZXguanN4Iiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvVXNlck1lbnUvbWVudS9NZW51LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9Vc2VyTWVudS9tZW51L01lbnVJdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9hY3Rpb25UeXBlcy91c2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9zZXJ2aWNlcy91c2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9hY3Rpb25zL3VzZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL0NoYW5nZVBhc3N3b3JkL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL3Blcm1pc3Npb25IZWxwZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL1VzZXJNZW51L2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9jb2x1bW5TaXplcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL1VzZXJUYWJsZS9EZXRhaWxSb3cvaW5kZXguanN4Iiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvY29tbW9uL0NvbGxhcHNpYmxlU3dpdGNoZXIvaW5kZXguanN4Iiwid2VicGFjazovLy8uL3NyYy91dGlscy9QYXNzd29yZFN0cmVuZ3RoLmpzIiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvY29tbW9uL1Bhc3N3b3JkL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvX2V4cG9ydGFibGVzL3NyYy9jb21wb25lbnRzL0NyZWF0ZVVzZXJCb3gvaW5kZXguanN4Iiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL1VzZXJTZXR0aW5ncy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvRWRpdFByb2ZpbGUvaW5kZXguanN4Iiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvVXNlclRhYmxlL1VzZXJzUm9sZXMvUm9sZVJvdy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvVXNlcnNSb2xlcy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGUvaW5kZXguanN4Iiwid2VicGFjazovLy8uL3NyYy9fZXhwb3J0YWJsZXMvc3JjL2NvbXBvbmVudHMvRmlsdGVyc0Jhci9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQm9keS9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXBwLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVycy9Sb290LnByb2QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dsb2JhbHMvYXBwbGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXJzL0RldlRvb2xzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9jb25maWd1cmVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qc3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ3aW5kb3ciLCJkbm4iLCJub2RlTW9kdWxlcyIsIlJlYWN0IiwiQ29tbW9uQ29tcG9uZW50cyIsIlJlYWN0UmVkdXgiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJwdXNoIiwiZm4iLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRFbGVtZW50IiwidGFyZ2V0IiwicGFyZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJhdHRycyIsInR5cGUiLCJub25jZSIsIm5jIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm0iLCJkZWZhdWx0Iiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJSZWR1eCIsImFwcGxpY2F0aW9uU2V0dGluZ3MiLCJpbml0IiwiVXNlcnMiLCJDb21tb25BY3Rpb25zIiwiUmVkdXhUaHVuayIsImhtciIsImxvY2FscyIsIlJlYWN0RE9NIiwiUmVkdXhJbW11dGFibGVTdGF0ZUludmFyaWFudCIsIkNvbW1vblJlZHVjZXJzIiwiUmVkdXhEZXZUb29scyIsIlJlZHV4RGV2VG9vbHNMb2dNb25pdG9yIiwiUmVkdXhEZXZUb29sc0RvY2tNb25pdG9yIiwicmVxdWlyZSIsIk1vbWVudCIsIlRocm90dGxlRGVib3VuY2UiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCIkMSIsInRlc3QiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJlcnIiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwiZnVuYyIsIm51bWJlciIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiZXh0ZW5zaW9uRGV0YWlsUm93IiwibmV3RXh0ZW5zaW9uTW9kYWwiLCJ1c2VyU2V0dGluZ3MiLCJ1c2Vyc0xpc3QiLCJ1dGlscyIsImFzc2lnbiIsInV0aWxpdHkiLCJyZXN4IiwidXRpbGl0aWVzIiwiZ2V0UmVzeCIsIkV4dGVuc2lvbkhlYWRlciIsIkNvbXBvbmVudCIsInJlbmRlciIsImV4dGVybmFsX3dpbmRvd19kbm5fbm9kZU1vZHVsZXNfUmVhY3RfZGVmYXVsdCIsImEiLCJleHRlcm5hbF93aW5kb3dfZG5uX25vZGVNb2R1bGVzX0NvbW1vbkNvbXBvbmVudHNfIiwiY29sdW1uU2l6ZSIsImNsYXNzTmFtZSIsImhlYWRlcnMiLCJoZWFkZXIiLCJzaXplIiwicHJvcFR5cGVzIiwiZm9ybWF0RGF0ZSIsImRhdGVWYWx1ZSIsImxvbmdmb3JtYXQiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJsb2NhbGUiLCJnZXRDdWx0dXJlIiwiZm9ybWF0IiwidmFsaWRhdGVFbWFpbCIsInNvcnQiLCJpdGVtcyIsImNvbHVtbiIsIm9yZGVyIiwiYiIsIk1lbnUiLCJjaGlsZHJlbiIsIk1lbnVJdGVtIiwiY29uc3RydWN0b3IiLCJzdXBlciIsInN0YXRlIiwiaG92ZXIiLCJvbk1vdXNlRW50ZXIiLCJzZXRTdGF0ZSIsIm9uTW91c2VMZWF2ZSIsIm9uQ2xpY2siLCJvbk1lbnVBY3Rpb24iLCJ1c2VyQWN0aW9uVHlwZXMiLCJSRVRSSUVWRURfVVNFUlMiLCJSRVRSSUVWRURfVVNFUl9ERVRBSUxTIiwiQ1JFQVRFX1VTRVIiLCJVUERBVEVfVVNFUiIsIkRFTEVURV9VU0VSIiwiRVJBU0VfVVNFUiIsIlJFU1RPUkVfVVNFUiIsIlJFVFJJRVZFRF9VU0VSX0ZJTFRFUlMiLCJVU0VSX01BREVfU1VQRVJVU0VSIiwiUkVUUklFVkVEX1VTRVJTX1JPTEVTIiwiUkVUUklFVkVEX1NVR0dFU1RfUk9MRVMiLCJTQVZFX1VTRVJfUk9MRSIsIlJFTU9WRV9VU0VSX1JPTEUiLCJVUERBVEVfVVNFUl9BVVRIT1JJWkVfU1RBVFVTIiwiVVNFUl9VTkxPQ0tFRCIsIlJFVFJJRVZFRF9QQVNTV09SRF9TVFJFTkdUSF9PUFRJT05TIiwic2VyaWFsaXplUXVlcnlTdHJpbmdQYXJhbWV0ZXJzIiwidXNlclNlcnZpY2UiLCJnZXRTZXJ2aWNlRnJhbWV3b3JrIiwiY29udHJvbGxlciIsInNmIiwibW9kdWxlUm9vdCIsImdldFVzZXJzIiwic2VhcmNoUGFyYW1ldGVycyIsImNhbGxiYWNrIiwiZXJyb3JDYWxsYmFjayIsImdldFVzZXJEZXRhaWxzIiwidXNlckRldGFpbHNQYXJhbWV0ZXJzIiwidXBkYXRlVXNlckJhc2ljSW5mbyIsInVzZXJEZXRhaWxzIiwicG9zdCIsImdldFVzZXJGaWx0ZXJzIiwiY3JlYXRlVXNlciIsImNoYW5nZVBhc3N3b3JkIiwicGF5bG9hZCIsImZvcmNlQ2hhbmdlUGFzc3dvcmQiLCJzZW5kUGFzc3dvcmRSZXNldExpbmsiLCJkZWxldGVVc2VyIiwiaGFyZERlbGV0ZVVzZXIiLCJyZXN0b3JlVXNlciIsInVwZGF0ZVN1cGVyVXNlclN0YXR1cyIsInVwZGF0ZUF1dGhvcml6ZVN0YXR1cyIsInVubG9ja1VzZXIiLCJnZXRVc2VyUm9sZXMiLCJnZXRTdWdnZXN0Um9sZXMiLCJzYXZlVXNlclJvbGUiLCJub3RpZnlVc2VyIiwiaXNPd25lciIsInJlbW92ZVVzZXJSb2xlIiwicGFzc3dvcmRTdHJlbmd0aE9wdGlvbnMiLCJtZXNzYWdlIiwibm90aWZ5RXJyb3IiLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsIk1lc3NhZ2UiLCJ1c2VyQWN0aW9ucyIsImRpc3BhdGNoIiwiVXNlclNlcnZpY2UiLCJkYXRhIiwiQWN0aW9uVHlwZXMiLCJkZWxldGVkVXNlciIsImlzRGVsZXRlZCIsInVzZXJJZCIsImVyYXNlVXNlciIsInJlc3RvcmVkVXNlciIsInNldFN1cGVyVXNlciIsImF1dGhvcml6ZWQiLCJ1c2VyIiwidW5Mb2NrVXNlciIsInBhc3N3b3JkU3RyZW5ndGgiLCJwU3RyZW5ndGgiLCJtYXRjaGVkUm9sZXMiLCJyb2xlSWQiLCJpbnB1dFN0eWxlIiwid2lkdGgiLCJibGFua0NoYW5nZVBhc3N3b3JkIiwicGFzc3dvcmQiLCJDaGFuZ2VQYXNzd29yZCIsImVycm9ycyIsImNvbmZpcm1QYXNzd29yZCIsInBhc3N3b3Jkc01hdGNoIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5ld1Byb3BzIiwiY2xlYXIiLCJvbkNoYW5nZSIsInZhbGlkYXRlRm9ybSIsInNhdmUiLCJDb21tb25Vc2Vyc0FjdGlvbnMiLCJjYW5jZWwiLCJub3RpZnkiLCJMb2NhbGl6YXRpb24iLCJ2YWxpZCIsIm9uQ2FuY2VsIiwidmlzaWJsZSIsImxhYmVsIiwiZXJyb3IiLCJ0b29sdGlwTWVzc2FnZSIsImVycm9yTWVzc2FnZSIsImF1dG9Db21wbGV0ZSIsIm1hcmdpbkJvdHRvbSIsImRlZmF1bHRQcm9wcyIsImNvbm5lY3QiLCJ1c2VycyIsImNhbk1hbmFnZVJvbGVzIiwic2V0dGluZ3MiLCJpc1N1cGVyVXNlciIsImlzQWRtaW4iLCJwZXJtaXNzaW9ucyIsIk1BTkFHRV9ST0xFUyIsImNhbk1hbmFnZVByb2ZpbGUiLCJNQU5BR0VfUFJPRklMRSIsImNhblZpZXdTZXR0aW5ncyIsIlZJRVdfU0VUVElOR1MiLCJjYW5NYW5hZ2VQYXNzd29yZCIsIk1BTkFHRV9QQVNTV09SRCIsImNhbkVkaXRTZXR0aW5ncyIsIkVESVRfU0VUVElOR1MiLCJVc2VyTWVudSIsIkNoYW5nZVBhc3N3b3JkVmlzaWJsZSIsInNob3dNZW51IiwiaGFuZGxlQ2xpY2siLCJldmVudCIsIm9uQ2xvc2UiLCJhZGRFdmVudExpc3RlbmVyIiwicmVsb2FkIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25JdGVtQ2xpY2siLCJvblNlbmRQYXNzd29yZExpbmsiLCJ0b2dnbGVDaGFuZ2VQYXNzd29yZCIsImZvcmNlUGFzc3dvcmRDaGFuZ2UiLCJvblZpZXdQcm9maWxlIiwidXNlck1lbnVBY3Rpb24iLCJjbG9zZVBlcnNvbmFCYXIiLCJ0b3AiLCJwcm9maWxlVXJsIiwiY29uZmlybSIsImNsb3NlIiwic2hvdyIsInZpc2libGVNZW51cyIsInRpdGxlIiwiYXBwU2V0dGluZ3MiLCJpc0hvc3QiLCJuZWVkVXBkYXRlUGFzc3dvcmQiLCJjYW5EZWxldGVVc2VyIiwiQVVUSE9SSVpFX1VOQVVUSE9SSVpFX1VTRVIiLCJjYW5BdXRob3JpemVVbkF1dGhvcml6ZVVzZXIiLCJpc0xvY2tlZCIsImdldFVzZXJNZW51IiwicmVmIiwicm9vdEVsZW1lbnQiLCJtZW51X01lbnUiLCJtZW51IiwibWVudV9NZW51SXRlbSIsIlVzZXJUYWJsZV9DaGFuZ2VQYXNzd29yZCIsIlVzZXJUYWJsZV9jb2x1bW5TaXplcyIsIkRldGFpbHNSb3ciLCJjcmVhdGVSZWYiLCJvcGVuZWQiLCJjb21wb25lbnREaWRNb3VudCIsIl9pc01vdW50ZWQiLCJvcGVuSWQiLCJDb2xsYXBzZSIsInRvZ2dsZSIsImN1cnJlbnRJbmRleCIsIk9wZW5Db2xsYXBzZSIsInRvZ2dsZVVzZXJNZW51IiwiZ2V0VXNlckFjdGlvbnMiLCJhY3Rpb25JY29ucyIsImdldFVzZXJUYWJzSWNvbnMiLCJpY29uIiwiU3ZnSWNvbnMiLCJVc2VySWNvbiIsIlNldHRpbmdzSWNvbiIsIlNoaWVsZEljb24iLCJhY3Rpb25JY29uIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJwb3NpdGlvbiIsIk1vcmVNZW51SWNvbiIsIlVzZXJUYWJsZV9Vc2VyTWVudSIsImdldFVzZXJDb2x1bW5zIiwiZXh0cmFDb2x1bW5zIiwiY29sdW1uU2l6ZXMiLCJDb2x1bW5TaXplcyIsImZpbmQiLCJ4IiwidGV4dCIsImRpc3BsYXlOYW1lIiwibWF4V2lkdGgiLCJ1c2VyTmFtZSIsImlzQW5jaG9yIiwiZW1haWwiLCJjcmVhdGVkT25EYXRlIiwiZmxvYXQiLCJ0ZXh0QWxpZ24iLCJwYWRkaW5nUmlnaHQiLCJ1bmlxdWVJZCIsIk1hdGgiLCJyYW5kb20iLCJub3ciLCJhdmF0YXIiLCJ1c2VyQ29sdW1ucyIsImFkZElzT3BlbmVkIiwiYWNjb3JkaW9uIiwiaXNPcGVuZWQiLCJrZWVwQ29sbGFwc2VkQ29udGVudCIsImlzRXZvcSIsIkNvbGxhcHNpYmxlU3dpdGNoZXIiLCJyZW5kZXJJbmRleCIsIlBhc3N3b3JkU3RyZW5ndGhUeXBlIiwiZ2V0UGFzc3dvcmRTdHJlbmd0aCIsInBTdHJlbmd0aFJhdGluZyIsInBhc3N3b3JkU3RyZW5ndGhSYXRpbmciLCJyYXRpbmciLCJtaW5MZW5ndGgiLCJoYXNPbmVVcHBlckNhc2VDaGFyIiwiaGFzT25lTG93ZXJDYXNlQ2hhciIsImhhc01pbk51bWJlck9mU3BlY2lhbENoYXJzIiwiaGFzT25lTnVtZXJpY0NoYXIiLCJoYXNMZW5ndGhPZk5DaGFycyIsIm1hdGNoVmFsaWRhdGlvbkV4cHJlc3Npb24iLCJtaW5OdW1iZXJPZlNwZWNpYWxDaGFycyIsInZhbGlkYXRpb25FeHByZXNzaW9uIiwibWF0Y2giLCJtYXRjaGVzIiwiUmVnRXhwIiwibWF4UmF0aW5nIiwiUGFzc3dvcmQiLCJsb2FkUGFzc3dvcmRTdHJlbmd0aE9wdGlvbnMiLCJvbkNoYW5nZVBhc3N3b3JkIiwicmVxdWlyZXNRdWVzdGlvbkFuZEFuc3dlciIsIlVzZXJEZXRhaWxzIiwidGFiSW5kZXgiLCJVc2VyQWN0aW9ucyIsIm5ld1VzZXJSZWdpc3RyYXRpb25EZXRhaWxzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJxdWVzdGlvbiIsImFuc3dlciIsInJhbmRvbVBhc3N3b3JkIiwiYXV0aG9yaXplIiwiQ3JlYXRlVXNlckJveCIsInN1Ym1pdHRlZCIsImNsZWFyRm9ybSIsIm9uVGV4dCIsIm9mZlRleHQiLCJjb21tb25fUGFzc3dvcmQiLCJibGFua0FjY291bnRTZXR0aW5ncyIsIlVzZXJTZXR0aW5ncyIsImFjY291bnRTZXR0aW5ncyIsImxvYWRpbmciLCJ1cGRhdGVVc2VyRGV0YWlsc1N0YXRlIiwibWFrZUJsYW5rT2JqIiwibmV3T2JqZWN0IiwiZGV0YWlscyIsImNvbGxhcHNlIiwib25DYW5jZWxQYXNzd29yZCIsIm9uRm9yY2VQYXNzd29yZENoYW5nZSIsInN0cmluZ2lmeUJvb2xlYW4iLCJlbmFibGVkIiwibGFzdExvZ2luIiwibGFzdEFjdGl2aXR5IiwibGFzdFBhc3N3b3JkQ2hhbmdlIiwibGFzdExvY2tvdXQiLCJpc09ubGluZSIsInVzZXJGb2xkZXIiLCJkaXNhYmxlZCIsIkVkaXRQcm9maWxlIiwiZWRpdFByb2ZpbGVVcmwiLCJzZWFtbGVzcyIsInNyYyIsIlJvbGVSb3ciLCJlZGl0SW5kZXgiLCJlZGl0Q29tbWFuZCIsImlzQ2FsZW5kYXJWaXNpYmxlIiwib25TdGFydFRpbWVDbGljayIsInVzZXJSb2xlIiwib25FeHBpcmVzVGltZUNsaWNrIiwib25EZWxldGVDbGljayIsIm1ldGhvZHNBcmdzIiwiYXJnc0luZGV4IiwicGFyc2VJbnQiLCJmb3JtYXRTdHJpbmciLCJyb2xlTmFtZSIsImlzRW1wdHlEYXRlIiwiZGF0ZSIsImNvbW1hbmQiLCJGaXJzdERhdGUiLCJzdGFydFRpbWUiLCJleHBpcmVzVGltZSIsInNhdmVSb2xlIiwiZ2V0Qm91bmREYXRlIiwibWF4VmFsdWUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsIm1pblZhbHVlIiwiZ2V0RGF0ZSIsInJvbGVEZXRhaWxzIiwiY3JlYXRlUm9sZUFjdGlvbnMiLCJzdGFydFRpbWVBY3Rpb24iLCJhbGxvd0V4cGlyZWQiLCJtYXhEYXRlIiwidXBkYXRlRGF0ZSIsImFwcGx5QnV0dG9uVGV4dCIsInNob3dJY29uIiwic2hvd0lucHV0Iiwib25JY29uQ2xpY2siLCJleHBpcmVzVGltZUFjdGlvbiIsIm1pbkRhdGUiLCJkZWxldGVBY3Rpb24iLCJhbGxvd0RlbGV0ZSIsIlhJY29uIiwiZGVsZXRlUm9sZSIsIlVzZXJSb2xlcyIsInJvbGVTZWxlY3RTdGF0ZSIsImtleXdvcmQiLCJjdXJyZW50UGFnZSIsInBhZ2VTaXplIiwicm9sZUtleXdvcmQiLCJzZW5kRW1haWwiLCJhbGxvd093bmVyIiwiY29tYm9Cb3hEb20iLCJkZWJvdW5jZUdldFN1Z2dlc3RSb2xlcyIsImRlYm91bmNlIiwiZ2V0Um9sZXMiLCJwYXJhbWV0ZXIiLCJwYWdlSW5kZXgiLCJjb3VudCIsIm9uUm9sZVNlbGVjdG9yQ2hhbmdlZCIsIm9uUm9sZVNlbGVjdG9yU2VsZWN0ZWQiLCJvblJvbGVTZWxlY3RlZCIsIm9uUm9sZVNlbGVjdG9yVG9nZ2xlIiwib25BZGRSb2xlIiwib25QYWdlQ2hhbmdlZCIsImdldFJvbGVSb3dzIiwidXNlclJvbGVzIiwicm9sZVJvd3MiLCJyb2xlIiwiVXNlcnNSb2xlc19Sb2xlUm93Iiwic29tZSIsIm9uU2VuZEVtYWlsQ2xpY2siLCJvbklzT3duZXJDbGljayIsInJlbmRlckhlYWRlciIsInRhYmxlSGVhZGVycyIsImZpZWxkIiwiZm9udFdlaWdodCIsInJlbmRlclBhZ2luZyIsInRvdGFsUmVjb3JkcyIsInNob3dTdGFydEVuZEJ1dHRvbnMiLCJzaG93UGFnZVNpemVPcHRpb25zIiwibnVtZXJpY0NvdW50ZXJzIiwic3VtbWFyeVRleHQiLCJwYWdlSW5mb1RleHQiLCJzaG93UGFnZUluZm8iLCJjdWx0dXJlIiwibGFiZWxQbGFjZSIsInN1Z2dlc3QiLCJkb20iLCJwbGFjZWhvbGRlciIsIm9wZW4iLCJvblRvZ2dsZSIsIm9uU2VsZWN0IiwidmFsdWVGaWVsZCIsInRleHRGaWVsZCIsIkFkZEljb24iLCJ1c2VyUm9sZXNDb3VudCIsIlVzZXJUYWJsZSIsInVuY29sbGFwc2UiLCJzZXRUaW1lb3V0Iiwib25BZGRVc2VyIiwiZ2V0Q2hpbGRyZW4iLCJnZXRVc2VyVGFicyIsIlVzZXJUYWJsZV9Vc2VyU2V0dGluZ3MiLCJVc2Vyc1JvbGVzIiwiVXNlclRhYmxlX0VkaXRQcm9maWxlIiwiY2hpbGQiLCJnZXRIZWFkZXJzIiwiQUREX1VTRVIiLCJIZWFkZXJSb3ciLCJEZXRhaWxSb3ciLCJjb21tb25fQ29sbGFwc2libGVTd2l0Y2hlciIsImNvbXBvbmVudHNfQ3JlYXRlVXNlckJveCIsImNyZWF0ZVVzZXJCb3giLCJ3aXRoUmVmIiwiRmlsdGVyc0JhciIsInNlbGVjdGVkVXNlckZpbHRlciIsInNlYXJjaFRleHQiLCJvcHRpb24iLCJvbktleXdvcmRDaGFuZ2VkIiwiQnVpbGRVc2VyRmlsdGVyc09wdGlvbnMiLCJ1c2VyRmlsdGVycyIsInVzZXJGaWx0ZXJzT3B0aW9ucyIsInVzZXJGaWx0ZXIiLCJLZXkiLCJWYWx1ZSIsIndpdGhCb3JkZXIiLCJwcmVwZW5kV2l0aCIsIm9uU2VhcmNoIiwibWF4TGVuZ3RoIiwiaWNvblN0eWxlIiwicmlnaHQiLCJzb3J0Q29sdW1uIiwic29ydEFzY2VuZGluZyIsInJlc2V0SW5kZXgiLCJCb2R5IiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9nZXRQcm90b3R5cGVPZiIsIl90aGlzMiIsIl9kZWZpbmVQcm9wZXJ0eSIsIl90aGlzMyIsImNvbXBvbmVudHNfRmlsdGVyc0JhciIsIm9uRmlsdGVyQ2hhbmdlIiwidXNlclRhYmxlIiwiX3RoaXM0IiwicGFuZWxCb2R5TWFyZ2luIiwiY3JlYXRlQm94VmlzaWJsZSIsImNhbkFkZFVzZXIiLCJ0b2dnbGVDcmVhdGVCb3giLCJ3b3JrU3BhY2VUcmF5VmlzaWJsZSIsIndvcmtTcGFjZVRyYXlPdXRzaWRlIiwid29ya1NwYWNlVHJheSIsImdldFdvcmtTcGFjZVRyYXkiLCJjb21wb25lbnRzX1VzZXJUYWJsZSIsInBhZ2VTaXplRHJvcERvd25XaXRob3V0Qm9yZGVyIiwic2hvd1N1bW1hcnkiLCJwYWdlU2l6ZU9wdGlvblRleHQiLCJ0b3RhbFVzZXJzIiwiQXBwIiwiQXBwX2NsYXNzQ2FsbENoZWNrIiwiQXBwX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJBcHBfZ2V0UHJvdG90eXBlT2YiLCJpc09wZW4iLCJjb21wb25lbnRzX0JvZHkiLCJSb290IiwiY29tcG9uZW50c19BcHAiLCJ1c2Vyc0FwcGxpY2F0aW9uIiwiaW5pdFVzZXJzIiwicm9vdFJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJjcmVhdGVEZXZUb29scyIsImV4dGVybmFsX3dpbmRvd19kbm5fbm9kZU1vZHVsZXNfUmVkdXhEZXZUb29sc0RvY2tNb25pdG9yX2RlZmF1bHQiLCJ0b2dnbGVWaXNpYmlsaXR5S2V5IiwiY2hhbmdlUG9zaXRpb25LZXkiLCJleHRlcm5hbF93aW5kb3dfZG5uX25vZGVNb2R1bGVzX1JlZHV4RGV2VG9vbHNMb2dNb25pdG9yX2RlZmF1bHQiLCJJU19QUk9EVUNUSU9OIiwicHJvY2VzcyIsImluaXRpYWxTdGF0ZSIsInN0b3JlIiwiY3JlYXRlU3RvcmUiLCJjb21wb3NlIiwiYXBwbHlNaWRkbGV3YXJlIiwidGh1bmtNaWRkbGV3YXJlIiwicmVkdXhJbW11dGFibGVTdGF0ZUludmFyaWFudCIsIkRldlRvb2xzIiwiaW5zdHJ1bWVudCIsImFwcGxpY2F0aW9uIiwiYXBwQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJleHRlcm5hbF93aW5kb3dfZG5uX25vZGVNb2R1bGVzX1JlYWN0UmVkdXhfIiwiUm9vdF9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUF6QixFQUFBNkIsRUFBQSxTQUFBMUIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBcUIsV0FDQSxXQUEyQixPQUFBckIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQWlCLEVBQUFDLEdBQXNELE9BQUFqQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF1QixFQUFBQyxJQUd0RC9CLEVBQUFrQyxFQUFBLEdBSUFsQyxJQUFBbUMsRUFBQSxvQkNsRkFoQyxFQUFBRCxRQUFBa0MsT0FBQUMsSUFBQUMsWUFBQUMscUJDQUFwQyxFQUFBRCxRQUFBa0MsT0FBQUMsSUFBQUMsWUFBQUUsa0NDMEJBckMsRUFBQUQsUUFBbUJGLEVBQVEsR0FBUkEsa0JDMUJuQkcsRUFBQUQsUUFBQWtDLE9BQUFDLElBQUFDLFlBQUFHLDBCQ0tBdEMsRUFBQUQsUUFBQSxTQUFBd0MsR0FDQSxJQUFBQyxFQUFBLEdBd0NBLE9BckNBQSxFQUFBQyxTQUFBLFdBQ0EsT0FBQUMsS0FBQUMsSUFBQSxTQUFBQyxHQUNBLElBQUFDLEVBc0NBLFNBQUFELEVBQUFMLEdBQ0EsSUFBQU0sRUFBQUQsRUFBQSxPQUNBRSxFQUFBRixFQUFBLEdBQ0EsSUFBQUUsRUFDQSxPQUFBRCxFQUdBLEdBQUFOLEdBQUEsbUJBQUFRLEtBQUEsQ0FDQSxJQUFBQyxHQVlBQyxFQVpBSCxFQWlCQSxtRUFIQUMsS0FBQUcsU0FBQUMsbUJBQUFDLEtBQUFDLFVBQUFKLE1BR0EsT0FoQkFLLEVBQUFSLEVBQUFTLFFBQUFaLElBQUEsU0FBQWEsR0FDQSx1QkFBQVYsRUFBQVcsV0FBQUQsRUFBQSxRQUdBLE9BQUFYLEdBQUFhLE9BQUFKLEdBQUFJLE9BQUEsQ0FBQVYsSUFBQVcsS0FBQSxNQU9BLElBQUFWLEVBSkEsT0FBQUosR0FBQWMsS0FBQSxNQXREQUMsQ0FBQWhCLEVBQUFMLEdBQ0EsT0FBQUssRUFBQSxHQUNBLFVBQUFBLEVBQUEsT0FBbUNDLEVBQUEsSUFFbkNBLElBRUdjLEtBQUEsS0FJSG5CLEVBQUF2QyxFQUFBLFNBQUFFLEVBQUEwRCxHQUNBLGlCQUFBMUQsSUFDQUEsRUFBQSxPQUFBQSxFQUFBLE1BRUEsSUFEQSxJQUFBMkQsRUFBQSxHQUNBN0QsRUFBQSxFQUFnQkEsRUFBQXlDLEtBQUFxQixPQUFpQjlELElBQUEsQ0FDakMsSUFBQStELEVBQUF0QixLQUFBekMsR0FBQSxHQUNBLGlCQUFBK0QsSUFDQUYsRUFBQUUsSUFBQSxHQUVBLElBQUEvRCxFQUFBLEVBQVlBLEVBQUFFLEVBQUE0RCxPQUFvQjlELElBQUEsQ0FDaEMsSUFBQTJDLEVBQUF6QyxFQUFBRixHQUtBLGlCQUFBMkMsRUFBQSxJQUFBa0IsRUFBQWxCLEVBQUEsTUFDQWlCLElBQUFqQixFQUFBLEdBQ0FBLEVBQUEsR0FBQWlCLEVBQ0tBLElBQ0xqQixFQUFBLE9BQUFBLEVBQUEsYUFBQWlCLEVBQUEsS0FFQXJCLEVBQUF5QixLQUFBckIsTUFJQUosb0JDekNBLElBRUEwQixFQUNBQyxFQUhBQyxFQUFBLEdBV0FDLEdBVEFILEVBU0EsV0FNQSxPQUFBakMsUUFBQXFDLG1CQUFBQyxNQUFBdEMsT0FBQXVDLE1BWkEsV0FFQSxZQURBLElBQUFMLE1BQUFELEVBQUFPLE1BQUEvQixLQUFBZ0MsWUFDQVAsSUFvQkFRLEVBQUEsU0FBQVQsR0FDQSxJQUFBQyxFQUFBLEdBRUEsZ0JBQUFTLEVBQUFDLEdBTUEsc0JBQUFELEVBQ0EsT0FBQUEsSUFFQSxZQUFBVCxFQUFBUyxHQUFBLENBQ0EsSUFBQUUsRUFwQkEsU0FBQUYsRUFBQUMsR0FDQSxPQUFBQSxFQUNBQSxFQUFBRSxjQUFBSCxHQUVBTixTQUFBUyxjQUFBSCxJQWdCQXhFLEtBQUFzQyxLQUFBa0MsRUFBQUMsR0FFQSxHQUFBNUMsT0FBQStDLG1CQUFBRixhQUFBN0MsT0FBQStDLGtCQUNBLElBR0FGLElBQUFHLGdCQUFBQyxLQUNLLE1BQUFDLEdBQ0xMLEVBQUEsS0FHQVgsRUFBQVMsR0FBQUUsRUFFQSxPQUFBWCxFQUFBUyxJQTFCQSxHQThCQVEsRUFBQSxLQUNBQyxFQUFBLEVBQ0FDLEVBQUEsR0FFQUMsRUFBYzFGLEVBQVEsSUFxRHRCLFNBQUEyRixFQUFBQyxFQUFBQyxHQUNBLFFBQUF6RixFQUFBLEVBQWdCQSxFQUFBd0YsRUFBQTFCLE9BQW1COUQsSUFBQSxDQUNuQyxJQUFBMkMsRUFBQTZDLEVBQUF4RixHQUNBMEYsRUFBQXZCLEVBQUF4QixFQUFBb0IsSUFFQSxHQUFBMkIsRUFBQSxDQUNBQSxFQUFBQyxPQUVBLFFBQUFDLEVBQUEsRUFBaUJBLEVBQUFGLEVBQUFHLE1BQUEvQixPQUEyQjhCLElBQzVDRixFQUFBRyxNQUFBRCxHQUFBakQsRUFBQWtELE1BQUFELElBR0EsS0FBUUEsRUFBQWpELEVBQUFrRCxNQUFBL0IsT0FBdUI4QixJQUMvQkYsRUFBQUcsTUFBQTdCLEtBQUE4QixFQUFBbkQsRUFBQWtELE1BQUFELEdBQUFILFFBRUcsQ0FDSCxJQUFBSSxFQUFBLEdBRUEsSUFBQUQsRUFBQSxFQUFpQkEsRUFBQWpELEVBQUFrRCxNQUFBL0IsT0FBdUI4QixJQUN4Q0MsRUFBQTdCLEtBQUE4QixFQUFBbkQsRUFBQWtELE1BQUFELEdBQUFILElBR0F0QixFQUFBeEIsRUFBQW9CLElBQUEsQ0FBMkJBLEdBQUFwQixFQUFBb0IsR0FBQTRCLEtBQUEsRUFBQUUsV0FLM0IsU0FBQUUsRUFBQXhELEVBQUFrRCxHQUlBLElBSEEsSUFBQUQsRUFBQSxHQUNBUSxFQUFBLEdBRUFoRyxFQUFBLEVBQWdCQSxFQUFBdUMsRUFBQXVCLE9BQWlCOUQsSUFBQSxDQUNqQyxJQUFBMkMsRUFBQUosRUFBQXZDLEdBQ0ErRCxFQUFBMEIsRUFBQVEsS0FBQXRELEVBQUEsR0FBQThDLEVBQUFRLEtBQUF0RCxFQUFBLEdBSUF1RCxFQUFBLENBQWNDLElBSGR4RCxFQUFBLEdBR2N5RCxNQUZkekQsRUFBQSxHQUVjSyxVQURkTCxFQUFBLElBR0FxRCxFQUFBakMsR0FDQWlDLEVBQUFqQyxHQUFBOEIsTUFBQTdCLEtBQUFrQyxHQURBVixFQUFBeEIsS0FBQWdDLEVBQUFqQyxHQUFBLENBQWtEQSxLQUFBOEIsTUFBQSxDQUFBSyxLQUlsRCxPQUFBVixFQUdBLFNBQUFhLEVBQUFaLEVBQUFhLEdBQ0EsSUFBQTNCLEVBQUFELEVBQUFlLEVBQUFjLFlBRUEsSUFBQTVCLEVBQ0EsVUFBQTZCLE1BQUEsK0dBR0EsSUFBQUMsRUFBQXBCLElBQUF2QixPQUFBLEdBRUEsV0FBQTJCLEVBQUFpQixTQUNBRCxFQUVHQSxFQUFBRSxZQUNIaEMsRUFBQWlDLGFBQUFOLEVBQUFHLEVBQUFFLGFBRUFoQyxFQUFBa0MsWUFBQVAsR0FKQTNCLEVBQUFpQyxhQUFBTixFQUFBM0IsRUFBQW1DLFlBTUF6QixFQUFBckIsS0FBQXNDLFFBQ0UsY0FBQWIsRUFBQWlCLFNBQ0YvQixFQUFBa0MsWUFBQVAsT0FDRSxxQkFBQWIsRUFBQWlCLFdBQUFqQixFQUFBaUIsU0FBQUssT0FJRixVQUFBUCxNQUFBLDhMQUhBLElBQUFHLEVBQUFqQyxFQUFBZSxFQUFBaUIsU0FBQUssT0FBQXBDLEdBQ0FBLEVBQUFpQyxhQUFBTixFQUFBSyxJQU1BLFNBQUFLLEVBQUFWLEdBQ0EsVUFBQUEsRUFBQVcsV0FBQSxTQUNBWCxFQUFBVyxXQUFBQyxZQUFBWixHQUVBLElBQUFhLEVBQUE5QixFQUFBK0IsUUFBQWQsR0FDQWEsR0FBQSxHQUNBOUIsRUFBQWdDLE9BQUFGLEVBQUEsR0FJQSxTQUFBRyxFQUFBN0IsR0FDQSxJQUFBYSxFQUFBakMsU0FBQWtELGNBQUEsU0FNQSxRQUpBQyxJQUFBL0IsRUFBQWdDLE1BQUFDLE9BQ0FqQyxFQUFBZ0MsTUFBQUMsS0FBQSxpQkFHQUYsSUFBQS9CLEVBQUFnQyxNQUFBRSxNQUFBLENBQ0EsSUFBQUEsRUFnQ0EsV0FDSyxFQUlMLE9BQVEvSCxFQUFBZ0ksR0FyQ1JDLEdBQ0FGLElBQ0FsQyxFQUFBZ0MsTUFBQUUsU0FPQSxPQUhBRyxFQUFBeEIsRUFBQWIsRUFBQWdDLE9BQ0FwQixFQUFBWixFQUFBYSxHQUVBQSxFQWlCQSxTQUFBd0IsRUFBQUMsRUFBQU4sR0FDQS9HLE9BQUFzSCxLQUFBUCxHQUFBUSxRQUFBLFNBQUExRyxHQUNBd0csRUFBQUcsYUFBQTNHLEVBQUFrRyxFQUFBbEcsTUFZQSxTQUFBdUUsRUFBQXFDLEVBQUExQyxHQUNBLElBQUFhLEVBQUE4QixFQUFBQyxFQUFBQyxFQUdBLEdBQUE3QyxFQUFBOEMsV0FBQUosRUFBQWhDLElBQUEsQ0FLQSxLQUpBbUMsRUFBQSxtQkFBQTdDLEVBQUE4QyxVQUNBOUMsRUFBQThDLFVBQUFKLEVBQUFoQyxLQUNBVixFQUFBOEMsVUFBQUMsUUFBQUwsRUFBQWhDLE1BU0Esb0JBSkFnQyxFQUFBaEMsSUFBQW1DLEVBVUEsR0FBQTdDLEVBQUFOLFVBQUEsQ0FDQSxJQUFBc0QsRUFBQXJELElBRUFrQixFQUFBbkIsTUFBQW1DLEVBQUE3QixJQUVBMkMsRUFBQU0sRUFBQWxILEtBQUEsS0FBQThFLEVBQUFtQyxHQUFBLEdBQ0FKLEVBQUFLLEVBQUFsSCxLQUFBLEtBQUE4RSxFQUFBbUMsR0FBQSxRQUdBTixFQUFBbkYsV0FDQSxtQkFBQTJGLEtBQ0EsbUJBQUFBLElBQUFDLGlCQUNBLG1CQUFBRCxJQUFBRSxpQkFDQSxtQkFBQUMsTUFDQSxtQkFBQWhHLE1BRUF3RCxFQWxFQSxTQUFBYixHQUNBLElBQUFzRCxFQUFBMUUsU0FBQWtELGNBQUEsUUFVQSxZQVJBQyxJQUFBL0IsRUFBQWdDLE1BQUFDLE9BQ0FqQyxFQUFBZ0MsTUFBQUMsS0FBQSxZQUVBakMsRUFBQWdDLE1BQUF1QixJQUFBLGFBRUFsQixFQUFBaUIsRUFBQXRELEVBQUFnQyxPQUNBcEIsRUFBQVosRUFBQXNELEdBRUFBLEVBdURBRSxDQUFBeEQsR0FDQTJDLEVBaUZBLFNBQUFXLEVBQUF0RCxFQUFBMEMsR0FDQSxJQUFBaEMsRUFBQWdDLEVBQUFoQyxJQUNBbkQsRUFBQW1GLEVBQUFuRixVQVFBa0csT0FBQTFCLElBQUEvQixFQUFBMEQsdUJBQUFuRyxHQUVBeUMsRUFBQTBELHVCQUFBRCxLQUNBL0MsRUFBQWIsRUFBQWEsSUFHQW5ELElBRUFtRCxHQUFBLHVEQUF1RHJELEtBQUFHLFNBQUFDLG1CQUFBQyxLQUFBQyxVQUFBSixNQUFBLE9BR3ZELElBQUFvRyxFQUFBLElBQUFOLEtBQUEsQ0FBQTNDLEdBQUEsQ0FBNkJ1QixLQUFBLGFBRTdCMkIsRUFBQU4sRUFBQU8sS0FFQVAsRUFBQU8sS0FBQVgsSUFBQUMsZ0JBQUFRLEdBRUFDLEdBQUFWLElBQUFFLGdCQUFBUSxJQTVHQTdILEtBQUEsS0FBQThFLEVBQUFiLEdBQ0E0QyxFQUFBLFdBQ0FyQixFQUFBVixHQUVBQSxFQUFBZ0QsTUFBQVgsSUFBQUUsZ0JBQUF2QyxFQUFBZ0QsU0FHQWhELEVBQUFnQixFQUFBN0IsR0FDQTJDLEVBc0RBLFNBQUE5QixFQUFBNkIsR0FDQSxJQUFBaEMsRUFBQWdDLEVBQUFoQyxJQUNBQyxFQUFBK0IsRUFBQS9CLE1BRUFBLEdBQ0FFLEVBQUE0QixhQUFBLFFBQUE5QixHQUdBLEdBQUFFLEVBQUFpRCxXQUNBakQsRUFBQWlELFdBQUFDLFFBQUFyRCxNQUNFLENBQ0YsS0FBQUcsRUFBQVEsWUFDQVIsRUFBQVksWUFBQVosRUFBQVEsWUFHQVIsRUFBQU8sWUFBQXhDLFNBQUFvRixlQUFBdEQsTUFyRUEzRSxLQUFBLEtBQUE4RSxHQUNBK0IsRUFBQSxXQUNBckIsRUFBQVYsS0FNQSxPQUZBOEIsRUFBQUQsR0FFQSxTQUFBdUIsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FDQUEsRUFBQXZELE1BQUFnQyxFQUFBaEMsS0FDQXVELEVBQUF0RCxRQUFBK0IsRUFBQS9CLE9BQ0FzRCxFQUFBMUcsWUFBQW1GLEVBQUFuRixVQUVBLE9BR0FvRixFQUFBRCxFQUFBdUIsUUFFQXJCLEtBMVBBdEksRUFBQUQsUUFBQSxTQUFBeUMsRUFBQWtELEdBQ0EsdUJBQUFrRSxjQUNBLGlCQUFBdEYsU0FBQSxVQUFBbUMsTUFBQSxpRUFHQWYsS0FBQSxJQUVBZ0MsTUFBQSxpQkFBQWhDLEVBQUFnQyxNQUFBaEMsRUFBQWdDLE1BQUEsR0FJQWhDLEVBQUFOLFdBQUEsa0JBQUFNLEVBQUFOLFlBQUFNLEVBQUFOLFVBQUFmLEtBR0FxQixFQUFBYyxhQUFBZCxFQUFBYyxXQUFBLFFBR0FkLEVBQUFpQixXQUFBakIsRUFBQWlCLFNBQUEsVUFFQSxJQUFBbEIsRUFBQU8sRUFBQXhELEVBQUFrRCxHQUlBLE9BRkFGLEVBQUFDLEVBQUFDLEdBRUEsU0FBQW1FLEdBR0EsSUFGQSxJQUFBQyxFQUFBLEdBRUE3SixFQUFBLEVBQWlCQSxFQUFBd0YsRUFBQTFCLE9BQW1COUQsSUFBQSxDQUNwQyxJQUFBMkMsRUFBQTZDLEVBQUF4RixJQUNBMEYsRUFBQXZCLEVBQUF4QixFQUFBb0IsS0FFQTRCLE9BQ0FrRSxFQUFBN0YsS0FBQTBCLEdBR0FrRSxHQUVBckUsRUFEQVEsRUFBQTZELEVBQUFuRSxHQUNBQSxHQUdBLElBQUF6RixFQUFBLEVBQWlCQSxFQUFBNkosRUFBQS9GLE9BQXNCOUQsSUFBQSxDQUN2QyxJQUFBMEYsRUFFQSxRQUZBQSxFQUFBbUUsRUFBQTdKLElBRUEyRixLQUFBLENBQ0EsUUFBQUMsRUFBQSxFQUFtQkEsRUFBQUYsRUFBQUcsTUFBQS9CLE9BQTJCOEIsSUFBQUYsRUFBQUcsTUFBQUQsWUFFOUN6QixFQUFBdUIsRUFBQTNCLFFBa05BLElBQ0ErRixFQURBQyxHQUNBRCxFQUFBLEdBRUEsU0FBQUUsRUFBQUMsR0FHQSxPQUZBSCxFQUFBRSxHQUFBQyxFQUVBSCxFQUFBSSxPQUFBQyxTQUFBekcsS0FBQSxRQUlBLFNBQUFnRixFQUFBcEMsRUFBQTBELEVBQUEzQixFQUFBRixHQUNBLElBQUFoQyxFQUFBa0MsRUFBQSxHQUFBRixFQUFBaEMsSUFFQSxHQUFBRyxFQUFBaUQsV0FDQWpELEVBQUFpRCxXQUFBQyxRQUFBTyxFQUFBQyxFQUFBN0QsT0FDRSxDQUNGLElBQUFpRSxFQUFBL0YsU0FBQW9GLGVBQUF0RCxHQUNBa0UsRUFBQS9ELEVBQUErRCxXQUVBQSxFQUFBTCxJQUFBMUQsRUFBQVksWUFBQW1ELEVBQUFMLElBRUFLLEVBQUF2RyxPQUNBd0MsRUFBQU0sYUFBQXdELEVBQUFDLEVBQUFMLElBRUExRCxFQUFBTyxZQUFBdUQsb0JDM1ZBckssRUFBQUQsUUFBQWtDLE9BQUFDLElBQUFDLFlBQUFvSSxvQ0NTZUMsSUFUYSxDQUN4QkMsS0FEd0IsU0FDbkJELEdBQ0lBLElBQ0Q5SCxLQUFLOEgsb0JBQXNCLElBRS9COUgsS0FBSzhILG9CQUFzQkEsR0FFL0JBLG9CQUFxQixxQkNQekJ4SyxFQUFBRCxRQUFBa0MsT0FBQUMsSUFBQXdJLE1BQUFDLDZCQ0FBM0ssRUFBQUQsUUFBQWtDLE9BQUFDLElBQUFDLFlBQUF5SSw0QkNDQSxJQUFBL0gsRUFBY2hELEVBQVEsSUFFdEIsaUJBQUFnRCxNQUFBLEVBQTRDN0MsRUFBQUMsRUFBUzRDLEVBQUEsTUFPckQsSUFBQTZDLEVBQUEsQ0FBZW1GLEtBQUEsRUFFZnJDLGVBUEFBLEVBUUFoQyxnQkFBQWlCLEdBRWE1SCxFQUFRLEVBQVJBLENBQTBFZ0QsRUFBQTZDLEdBRXZGN0MsRUFBQWlJLFNBQUE5SyxFQUFBRCxRQUFBOEMsRUFBQWlJLHVCQ2pCQTlLLEVBQUFELFFBQUFrQyxPQUFBQyxJQUFBQyxZQUFBNEksd0JDQUEvSyxFQUFBRCxRQUFBa0MsT0FBQUMsSUFBQUMsWUFBQTZJLDRDQ0FBaEwsRUFBQUQsUUFBQWtDLE9BQUFDLElBQUF3SSxNQUFBTyw4QkNBQWpMLEVBQUFELFFBQUFrQyxPQUFBQyxJQUFBQyxZQUFBK0ksNkJDQUFsTCxFQUFBRCxRQUFBa0MsT0FBQUMsSUFBQUMsWUFBQWdKLHVDQ0FBbkwsRUFBQUQsUUFBQWtDLE9BQUFDLElBQUFDLFlBQUFpSiwwQ0NFSXBMLEVBQU9ELFFBQVVzTCxFQUFRLHFCQ0Q3QixJQUFBeEksRUFBY2hELEVBQVEsSUFFdEIsaUJBQUFnRCxNQUFBLEVBQTRDN0MsRUFBQUMsRUFBUzRDLEVBQUEsTUFPckQsSUFBQTZDLEVBQUEsQ0FBZW1GLEtBQUEsRUFFZnJDLGVBUEFBLEVBUUFoQyxnQkFBQWlCLEdBRWE1SCxFQUFRLEVBQVJBLENBQXVFZ0QsRUFBQTZDLEdBRXBGN0MsRUFBQWlJLFNBQUE5SyxFQUFBRCxRQUFBOEMsRUFBQWlJLHVCQ2pCQTlLLEVBQUFELFFBQUFrQyxPQUFBQyxJQUFBQyxZQUFBbUosd0JDQ0EsSUFBQXpJLEVBQWNoRCxFQUFRLElBRXRCLGlCQUFBZ0QsTUFBQSxFQUE0QzdDLEVBQUFDLEVBQVM0QyxFQUFBLE1BT3JELElBQUE2QyxFQUFBLENBQWVtRixLQUFBLEVBRWZyQyxlQVBBQSxFQVFBaEMsZ0JBQUFpQixHQUVhNUgsRUFBUSxFQUFSQSxDQUFvRWdELEVBQUE2QyxHQUVqRjdDLEVBQUFpSSxTQUFBOUssRUFBQUQsUUFBQThDLEVBQUFpSSx5QkNoQkEsSUFBQWpJLEVBQWNoRCxFQUFRLElBRXRCLGlCQUFBZ0QsTUFBQSxFQUE0QzdDLEVBQUFDLEVBQVM0QyxFQUFBLE1BT3JELElBQUE2QyxFQUFBLENBQWVtRixLQUFBLEVBRWZyQyxlQVBBQSxFQVFBaEMsZ0JBQUFpQixHQUVhNUgsRUFBUSxFQUFSQSxDQUF1RWdELEVBQUE2QyxHQUVwRjdDLEVBQUFpSSxTQUFBOUssRUFBQUQsUUFBQThDLEVBQUFpSSx1QkNqQkE5SyxFQUFBRCxRQUFBa0MsT0FBQUMsSUFBQUMsWUFBQW9KLGtDQ0NBLElBQUExSSxFQUFjaEQsRUFBUSxJQUV0QixpQkFBQWdELE1BQUEsRUFBNEM3QyxFQUFBQyxFQUFTNEMsRUFBQSxNQU9yRCxJQUFBNkMsRUFBQSxDQUFlbUYsS0FBQSxFQUVmckMsZUFQQUEsRUFRQWhDLGdCQUFBaUIsR0FFYTVILEVBQVEsRUFBUkEsQ0FBb0VnRCxFQUFBNkMsR0FFakY3QyxFQUFBaUksU0FBQTlLLEVBQUFELFFBQUE4QyxFQUFBaUkseUJDaEJBLElBQUFqSSxFQUFjaEQsRUFBUSxJQUV0QixpQkFBQWdELE1BQUEsRUFBNEM3QyxFQUFBQyxFQUFTNEMsRUFBQSxNQU9yRCxJQUFBNkMsRUFBQSxDQUFlbUYsS0FBQSxFQUVmckMsZUFQQUEsRUFRQWhDLGdCQUFBaUIsR0FFYTVILEVBQVEsRUFBUkEsQ0FBMkRnRCxFQUFBNkMsR0FFeEU3QyxFQUFBaUksU0FBQTlLLEVBQUFELFFBQUE4QyxFQUFBaUksMEJDakJBOUssRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBdUQsSUFLbEZvRSxLQUFBLENBQWNqRSxFQUFBQyxFQUFTLHVCQ1N2QkQsRUFBQUQsUUFBQSxTQUFBcUcsR0FFQSxJQUFBb0YsRUFBQSxvQkFBQXZKLGVBQUF1SixTQUVBLElBQUFBLEVBQ0EsVUFBQS9FLE1BQUEsb0NBSUEsSUFBQUwsR0FBQSxpQkFBQUEsRUFDQSxPQUFBQSxFQUdBLElBQUFxRixFQUFBRCxFQUFBRSxTQUFBLEtBQUFGLEVBQUFHLEtBQ0FDLEVBQUFILEVBQUFELEVBQUFLLFNBQUFDLFFBQUEsaUJBMkRBLE9BL0JBMUYsRUFBQTBGLFFBQUEsK0RBQUFDLEVBQUFDLEdBRUEsSUFXQUMsRUFYQUMsRUFBQUYsRUFDQUcsT0FDQUwsUUFBQSxvQkFBQXBMLEVBQUEwTCxHQUF3QyxPQUFBQSxJQUN4Q04sUUFBQSxvQkFBQXBMLEVBQUEwTCxHQUF3QyxPQUFBQSxJQUd4QywwREFBQUMsS0FBQUgsR0FDQUgsR0FRQUUsRUFGQSxJQUFBQyxFQUFBN0UsUUFBQSxNQUVBNkUsRUFDRyxJQUFBQSxFQUFBN0UsUUFBQSxLQUVIb0UsRUFBQVMsRUFHQU4sRUFBQU0sRUFBQUosUUFBQSxZQUlBLE9BQUExSSxLQUFBQyxVQUFBNEksR0FBQSxzQ0MxRUEsSUFBQUssRUFBMkJ6TSxFQUFRLElBRW5DLFNBQUEwTSxLQUVBdk0sRUFBQUQsUUFBQSxXQUNBLFNBQUF5TSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbkIsRUFBQW9CLEVBQUFDLEdBQ0EsR0FBQUEsSUFBQVAsRUFBQSxDQUlBLElBQUFRLEVBQUEsSUFBQXJHLE1BQ0EsbUxBS0EsTUFEQXFHLEVBQUF0TSxLQUFBLHNCQUNBc00sR0FHQSxTQUFBQyxJQUNBLE9BQUFQLEVBRkFBLEVBQUFRLFdBQUFSLEVBTUEsSUFBQVMsRUFBQSxDQUNBQyxNQUFBVixFQUNBVyxLQUFBWCxFQUNBWSxLQUFBWixFQUNBYSxPQUFBYixFQUNBN0ssT0FBQTZLLEVBQ0FjLE9BQUFkLEVBQ0FlLE9BQUFmLEVBRUFnQixJQUFBaEIsRUFDQWlCLFFBQUFWLEVBQ0FXLFFBQUFsQixFQUNBbUIsV0FBQVosRUFDQWEsS0FBQXBCLEVBQ0FxQixTQUFBZCxFQUNBZSxNQUFBZixFQUNBZ0IsVUFBQWhCLEVBQ0FpQixNQUFBakIsRUFDQWtCLE1BQUFsQixHQU1BLE9BSEFFLEVBQUFpQixlQUFBM0IsRUFDQVUsRUFBQWtCLFVBQUFsQixFQUVBQSxpQ0M5Q0FqTixFQUFBRCxRQUZBLGdFQ1JBLElBQUE4QyxFQUFjaEQsRUFBUSxJQUV0QixpQkFBQWdELE1BQUEsRUFBNEM3QyxFQUFBQyxFQUFTNEMsRUFBQSxNQU9yRCxJQUFBNkMsRUFBQSxDQUFlbUYsS0FBQSxFQUVmckMsZUFQQUEsRUFRQWhDLGdCQUFBaUIsR0FFYTVILEVBQVEsRUFBUkEsQ0FBdUVnRCxFQUFBNkMsR0FFcEY3QyxFQUFBaUksU0FBQTlLLEVBQUFELFFBQUE4QyxFQUFBaUksMEJDakJBOUssRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBbUUsSUFLOUZvRSxLQUFBLENBQWNqRSxFQUFBQyxFQUFTLDBRQUEwUSx1QkNMalNGLEVBQUFDLEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQW1FLElBSzlGb0UsS0FBQSxDQUFjakUsRUFBQUMsRUFBUywrbURBQSttRCxLQUd0b0RGLEVBQUErSyxPQUFBLENBQ0FzRCxtQkFBQSw2Q0NUQXBPLEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQXNFLElBS2pHb0UsS0FBQSxDQUFjakUsRUFBQUMsRUFBUyxrY0FBa2Msc0JDSnpkLElBQUE0QyxFQUFjaEQsRUFBUSxJQUV0QixpQkFBQWdELE1BQUEsRUFBNEM3QyxFQUFBQyxFQUFTNEMsRUFBQSxNQU9yRCxJQUFBNkMsRUFBQSxDQUFlbUYsS0FBQSxFQUVmckMsZUFQQUEsRUFRQWhDLGdCQUFBaUIsR0FFYTVILEVBQVEsRUFBUkEsQ0FBdUVnRCxFQUFBNkMsR0FFcEY3QyxFQUFBaUksU0FBQTlLLEVBQUFELFFBQUE4QyxFQUFBaUksMEJDakJBOUssRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBbUUsSUFLOUZvRSxLQUFBLENBQWNqRSxFQUFBQyxFQUFTLDJ5QkFBMnlCLHNCQ0psMEIsSUFBQTRDLEVBQWNoRCxFQUFRLElBRXRCLGlCQUFBZ0QsTUFBQSxFQUE0QzdDLEVBQUFDLEVBQVM0QyxFQUFBLE1BT3JELElBQUE2QyxFQUFBLENBQWVtRixLQUFBLEVBRWZyQyxlQVBBQSxFQVFBaEMsZ0JBQUFpQixHQUVhNUgsRUFBUSxFQUFSQSxDQUF1RWdELEVBQUE2QyxHQUVwRjdDLEVBQUFpSSxTQUFBOUssRUFBQUQsUUFBQThDLEVBQUFpSSwwQkNqQkE5SyxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUFtRSxJQUs5Rm9FLEtBQUEsQ0FBY2pFLEVBQUFDLEVBQVMscU9BQXFPLHNCQ0o1UCxJQUFBNEMsRUFBY2hELEVBQVEsSUFFdEIsaUJBQUFnRCxNQUFBLEVBQTRDN0MsRUFBQUMsRUFBUzRDLEVBQUEsTUFPckQsSUFBQTZDLEVBQUEsQ0FBZW1GLEtBQUEsRUFFZnJDLGVBUEFBLEVBUUFoQyxnQkFBQWlCLEdBRWE1SCxFQUFRLEVBQVJBLENBQXVFZ0QsRUFBQTZDLEdBRXBGN0MsRUFBQWlJLFNBQUE5SyxFQUFBRCxRQUFBOEMsRUFBQWlJLDBCQ2pCQTlLLEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQW1FLElBSzlGb0UsS0FBQSxDQUFjakUsRUFBQUMsRUFBUywwQkNMdkJGLEVBQUFDLEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQWdFLElBSzNGb0UsS0FBQSxDQUFjakUsRUFBQUMsRUFBUyxxL0NBQXEvQyxLQUc1Z0RGLEVBQUErSyxPQUFBLENBQ0F1RCxrQkFBQSw0Q0NSQSxJQUFBeEwsRUFBY2hELEVBQVEsSUFFdEIsaUJBQUFnRCxNQUFBLEVBQTRDN0MsRUFBQUMsRUFBUzRDLEVBQUEsTUFPckQsSUFBQTZDLEVBQUEsQ0FBZW1GLEtBQUEsRUFFZnJDLGVBUEFBLEVBUUFoQyxnQkFBQWlCLEdBRWE1SCxFQUFRLEVBQVJBLENBQXVFZ0QsRUFBQTZDLEdBRXBGN0MsRUFBQWlJLFNBQUE5SyxFQUFBRCxRQUFBOEMsRUFBQWlJLDBCQ2pCQTlLLEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQW1FLElBSzlGb0UsS0FBQSxDQUFjakUsRUFBQUMsRUFBUyxtZ0JBQW1nQix1QkNMMWhCRixFQUFBQyxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUFtRSxJQUs5Rm9FLEtBQUEsQ0FBY2pFLEVBQUFDLEVBQVMsMGhEQUEwaEQsS0FHampERixFQUFBK0ssT0FBQSxDQUNBd0QsYUFBQSw0Q0NSQSxJQUFBekwsRUFBY2hELEVBQVEsSUFFdEIsaUJBQUFnRCxNQUFBLEVBQTRDN0MsRUFBQUMsRUFBUzRDLEVBQUEsTUFPckQsSUFBQTZDLEVBQUEsQ0FBZW1GLEtBQUEsRUFFZnJDLGVBUEFBLEVBUUFoQyxnQkFBQWlCLEdBRWE1SCxFQUFRLEVBQVJBLENBQXVFZ0QsRUFBQTZDLEdBRXBGN0MsRUFBQWlJLFNBQUE5SyxFQUFBRCxRQUFBOEMsRUFBQWlJLDBCQ2pCQTlLLEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQW1FLElBSzlGb0UsS0FBQSxDQUFjakUsRUFBQUMsRUFBUyxrTEFBa0wsc0JDSnpNLElBQUE0QyxFQUFjaEQsRUFBUSxJQUV0QixpQkFBQWdELE1BQUEsRUFBNEM3QyxFQUFBQyxFQUFTNEMsRUFBQSxNQU9yRCxJQUFBNkMsRUFBQSxDQUFlbUYsS0FBQSxFQUVmckMsZUFQQUEsRUFRQWhDLGdCQUFBaUIsR0FFYTVILEVBQVEsRUFBUkEsQ0FBMEVnRCxFQUFBNkMsR0FFdkY3QyxFQUFBaUksU0FBQTlLLEVBQUFELFFBQUE4QyxFQUFBaUksMEJDakJBOUssRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBc0UsSUFLakdvRSxLQUFBLENBQWNqRSxFQUFBQyxFQUFTLG8vQ0FBby9DLHNCQ0ozZ0QsSUFBQTRDLEVBQWNoRCxFQUFRLElBRXRCLGlCQUFBZ0QsTUFBQSxFQUE0QzdDLEVBQUFDLEVBQVM0QyxFQUFBLE1BT3JELElBQUE2QyxFQUFBLENBQWVtRixLQUFBLEVBRWZyQyxlQVBBQSxFQVFBaEMsZ0JBQUFpQixHQUVhNUgsRUFBUSxFQUFSQSxDQUF1RWdELEVBQUE2QyxHQUVwRjdDLEVBQUFpSSxTQUFBOUssRUFBQUQsUUFBQThDLEVBQUFpSSwwQkNqQkE5SyxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUFtRSxJQUs5Rm9FLEtBQUEsQ0FBY2pFLEVBQUFDLEVBQVMsMmxKQUE2bEosdUJDTHBuSkYsRUFBQUMsRUFBQUQsUUFBMkJGLEVBQVEsRUFBUkEsRUFBZ0UsSUFLM0ZvRSxLQUFBLENBQWNqRSxFQUFBQyxFQUFTLDBLQUEwSyxLQUdqTUYsRUFBQStLLE9BQUEsQ0FDQXlELFVBQUEsNENDUkEsSUFBQTFMLEVBQWNoRCxFQUFRLElBRXRCLGlCQUFBZ0QsTUFBQSxFQUE0QzdDLEVBQUFDLEVBQVM0QyxFQUFBLE1BT3JELElBQUE2QyxFQUFBLENBQWVtRixLQUFBLEVBRWZyQyxlQVBBQSxFQVFBaEMsZ0JBQUFpQixHQUVhNUgsRUFBUSxFQUFSQSxDQUFvRWdELEVBQUE2QyxHQUVqRjdDLEVBQUFpSSxTQUFBOUssRUFBQUQsUUFBQThDLEVBQUFpSSwwQkNqQkE5SyxFQUFBRCxRQUEyQkYsRUFBUSxFQUFSQSxFQUFnRSxJQUszRm9FLEtBQUEsQ0FBY2pFLEVBQUFDLEVBQVMseXhDQUF5eEMsc0JDSmh6QyxJQUFBNEMsRUFBY2hELEVBQVEsSUFFdEIsaUJBQUFnRCxNQUFBLEVBQTRDN0MsRUFBQUMsRUFBUzRDLEVBQUEsTUFPckQsSUFBQTZDLEVBQUEsQ0FBZW1GLEtBQUEsRUFFZnJDLGVBUEFBLEVBUUFoQyxnQkFBQWlCLEdBRWE1SCxFQUFRLEVBQVJBLENBQThEZ0QsRUFBQTZDLEdBRTNFN0MsRUFBQWlJLFNBQUE5SyxFQUFBRCxRQUFBOEMsRUFBQWlJLDBCQ2pCQTlLLEVBQUFELFFBQTJCRixFQUFRLEVBQVJBLEVBQTBELElBS3JGb0UsS0FBQSxDQUFjakUsRUFBQUMsRUFBUyxveUNBQW95QyxxRkNKNXlDdU8sRUFERDdOLE9BQU84TixPQUFPLEdBQUl4TSxPQUFPQyxJQUFJd00sU0NPNUJDLEVBTkYsQ0FDVDdOLElBRFMsU0FDTFUsR0FFQSxPQUFPb04sRUFBVUMsUUFEQSxRQUNvQnJOLGtCQ0M3QyxNQUFNc04sVUFBd0JDLFlBQzFCQyxTQUNJLE9BQ0lDLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVDLFdBQVksSUFBS0MsVUFBVSxjQUU3QjNNLEtBQUsrSixNQUFNNkMsUUFBUTNNLElBQUksQ0FBQzRNLEVBQVF0RixJQUNyQmdGLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVUzTiw0QkFBNkJ5SSxJQUFTbUYsV0FBWUcsRUFBT0MsS0FBTUgsVUFBV0UsRUFBT0EsT0FBUyxHQUFLLFNBQzVHTixFQUFBQyxFQUFBMUgsY0FBQSxVQUFLK0gsRUFBT0EsUUFBVSxlQVNsRFQsRUFBZ0JXLFVBQVksQ0FDeEJILFFBQVNuQixJQUFVakIsTUFBTUYsWUFJZDhCLDBDQ3RCUixTQUFTWSxFQUFXQyxFQUFXQyxHQUNsQyxJQUFLRCxFQUNELE1BQU8sR0FJWCxPQUZXLElBQUlFLEtBQUtGLEdBQ0NHLGNBQ0wsS0FDTCxJQUdKeEUsSUFBT3FFLEdBQVdJLE9BQU9uQixFQUFVb0IsY0FBY0MsUUFBc0IsSUFBZkwsRUFBc0IsTUFBUSxLQUcxRixTQUFTTSxFQUFjaFAsR0FFMUIsTUFEVyw0SkFDRG1MLEtBQUtuTCxHQVdaLFNBQVNpUCxFQUFLQyxFQUFPQyxFQUFRQyxHQVNoQyxPQVJBQSxPQUFrQjdJLElBQVY2SSxFQUFzQixNQUFRQSxFQUN0Q0YsRUFBUUEsRUFBTUQsS0FBSyxTQUFVakIsRUFBR3FCLEdBQzVCLE9BQUlyQixFQUFFbUIsR0FBVUUsRUFBRUYsR0FDRyxRQUFWQyxFQUFrQixHQUFLLEVBQzlCcEIsRUFBRW1CLEdBQVVFLEVBQUVGLEdBQ0csUUFBVkMsR0FBbUIsRUFBSSxFQUMzQixVQ2pDZixNQUFNRSxVQUFhekIsWUFDZkMsU0FDSSxPQUNJQyxFQUFBQyxFQUFBMUgsY0FBQSxNQUFJNkgsVUFBVSxzQkFDVDNNLEtBQUsrSixNQUFNZ0UsV0FNNUJELEVBQUtmLFVBQVksQ0FDYmdCLFNBQVV0QyxJQUFVUCxNQUdUNEMsUUNkZixNQUFNRSxVQUFpQjNCLFlBQ25CNEIsY0FDSUMsUUFDQWxPLEtBQUttTyxNQUFRLENBQUVDLE9BQU8sR0FHMUI5QixTQUNJLE9BQ0lDLEVBQUFDLEVBQUExSCxjQUFBLE1BQUk2SCxVQUFVLDBCQUEwQjBCLGFBQWMsSUFBTXJPLEtBQUtzTyxTQUFTLENBQUVGLE9BQU8sSUFDL0VHLGFBQWMsSUFBTXZPLEtBQUtzTyxTQUFTLENBQUVGLE9BQU8sSUFDM0NJLFFBQVN4TyxLQUFLK0osTUFBTTBFLGNBQ25Cek8sS0FBSytKLE1BQU1nRSxXQU01QkMsRUFBU2pCLFVBQVksQ0FDakIwQixhQUFjaEQsSUFBVWYsS0FBS0osV0FDN0J5RCxTQUFVdEMsSUFBVVAsS0FBS1osWUFHZDBELFFDUEFVLE1BbkJTLENBQ3BCQyxnQkFBaUIsa0JBQ2pCQyx1QkFBd0IseUJBQ3hCQyxZQUFhLGNBQ2JDLFlBQWEsY0FDYkMsWUFBYSxjQUNiQyxXQUFZLGFBQ1pDLGFBQWMsZUFDZEMsdUJBQXdCLHlCQUN4QkMsb0JBQXFCLHNCQUNyQkMsc0JBQXVCLHdCQUN2QkMsd0JBQXlCLDBCQUN6QkMsZUFBZ0IsaUJBQ2hCQyxpQkFBa0IsbUJBQ2xCQyw2QkFBOEIsK0JBQzlCQyxjQUFjLGdCQUNkQyxvQ0FBcUMsdUNDZnpDLFNBQVNDLEVBQStCakssR0FDcEMsSUFBSXBHLEVBQUksR0FDUixJQUFLLElBQUlELEtBQUtxRyxFQUNOQSxFQUFJdEcsZUFBZUMsSUFDbkJDLEVBQUVpQyxLQUFLZCxtQkFBbUJwQixHQUFLLElBQU1vQixtQkFBbUJpRixFQUFJckcsS0FHcEUsT0FBT0MsRUFBRTJCLEtBQUssS0EyRkgyTyxNQURLLElBeEZwQixNQUNJQyxvQkFBb0JDLEdBQ2hCLElBQUlDLEVBQUs3RCxFQUFVNkQsR0FLbkIsT0FIQUEsRUFBR0MsV0FBYSxhQUNoQkQsRUFBR0QsV0FBYUEsRUFFVEMsRUFFWEUsU0FBU0MsRUFBa0JDLEVBQVVDLEdBQ3RCcFEsS0FBSzZQLG9CQUFvQixTQUNqQ3pSLElBQUksWUFBY3VSLEVBQStCTyxHQUFtQixHQUFJQyxFQUFVQyxHQUV6RkMsZUFBZUMsRUFBdUJILEVBQVVDLEdBQ2pDcFEsS0FBSzZQLG9CQUFvQixTQUNqQ3pSLElBQUksaUJBQW1CdVIsRUFBK0JXLEdBQXdCLEdBQUlILEVBQVVDLEdBRW5HRyxvQkFBb0JDLEVBQWFMLEVBQVVDLEdBQzVCcFEsS0FBSzZQLG9CQUFvQixTQUNqQ1ksS0FBSyxzQkFBdUJELEVBQWFMLEVBQVVDLEdBRTFETSxlQUFlUCxFQUFVQyxHQUNWcFEsS0FBSzZQLG9CQUFvQixTQUNqQ3pSLElBQUksaUJBQWtCLEdBQUkrUixFQUFVQyxHQUUzQ08sV0FBV0gsRUFBYUwsRUFBVUMsR0FDbkJwUSxLQUFLNlAsb0JBQW9CLFNBQ2pDWSxLQUFLLGFBQWNELEVBQWFMLEVBQVVDLEdBRWpEUSxlQUFlQyxFQUFTVixFQUFVQyxHQUNuQnBRLEtBQUs2UCxvQkFBb0IsU0FDakNZLEtBQUssaUJBQWtCSSxFQUFTVixFQUFVQyxHQUVqRFUsb0JBQW9CTixFQUFhTCxFQUFVQyxHQUM1QnBRLEtBQUs2UCxvQkFBb0IsU0FDakNZLEtBQUssdUJBQXlCZCxFQUErQmEsR0FBYyxLQUFNTCxFQUFVQyxHQUVsR1csc0JBQXNCUCxFQUFhTCxFQUFVQyxHQUM5QnBRLEtBQUs2UCxvQkFBb0IsU0FDakNZLEtBQUsseUJBQTJCZCxFQUErQmEsR0FBYyxLQUFNTCxFQUFVQyxHQUVwR1ksV0FBV1IsRUFBYUwsRUFBVUMsR0FDbkJwUSxLQUFLNlAsb0JBQW9CLFNBQ2pDWSxLQUFLLGtCQUFvQmQsRUFBK0JhLEdBQWMsS0FBTUwsRUFBVUMsR0FFN0ZhLGVBQWVULEVBQWFMLEVBQVVDLEdBQ3ZCcFEsS0FBSzZQLG9CQUFvQixTQUNqQ1ksS0FBSyxrQkFBb0JkLEVBQStCYSxHQUFjLEtBQU1MLEVBQVVDLEdBRTdGYyxZQUFZVixFQUFhTCxFQUFVQyxHQUNwQnBRLEtBQUs2UCxvQkFBb0IsU0FDakNZLEtBQUssc0JBQXdCZCxFQUErQmEsR0FBYyxLQUFNTCxFQUFVQyxHQUVqR2Usc0JBQXNCWCxFQUFhTCxFQUFVQyxHQUM5QnBRLEtBQUs2UCxvQkFBb0IsU0FDakNZLEtBQUsseUJBQTJCZCxFQUErQmEsR0FBYyxLQUFNTCxFQUFVQyxHQUVwR2dCLHNCQUFzQlosRUFBYUwsRUFBVUMsR0FDOUJwUSxLQUFLNlAsb0JBQW9CLFNBQ2pDWSxLQUFLLHlCQUEyQmQsRUFBK0JhLEdBQWMsS0FBTUwsRUFBVUMsR0FFcEdpQixXQUFXYixFQUFhTCxFQUFVQyxHQUNuQnBRLEtBQUs2UCxvQkFBb0IsU0FDakNZLEtBQUssY0FBZ0JkLEVBQStCYSxHQUFjLEtBQU1MLEVBQVVDLEdBR3pGa0IsYUFBYXBCLEVBQWtCQyxFQUFVQyxHQUMxQnBRLEtBQUs2UCxvQkFBb0IsU0FDakN6UixJQUFJLGdCQUFrQnVSLEVBQStCTyxHQUFtQixHQUFJQyxFQUFVQyxHQUU3Rm1CLGdCQUFnQnJCLEVBQWtCQyxFQUFVQyxHQUM3QnBRLEtBQUs2UCxvQkFBb0IsU0FDakN6UixJQUFJLG1CQUFxQnVSLEVBQStCTyxHQUFtQixHQUFJQyxFQUFVQyxHQUVoR29CLGFBQWFYLEVBQVNZLEVBQVlDLEVBQVN2QixFQUFVQyxHQUN0Q3BRLEtBQUs2UCxvQkFBb0IsU0FDakNZLEtBQUssMkJBQTZCZ0IsRUFBYSxZQUFjQyxFQUFTYixFQUFTVixFQUFVQyxHQUVoR3VCLGVBQWVkLEVBQVNWLEVBQVVDLEdBQ25CcFEsS0FBSzZQLG9CQUFvQixTQUNqQ1ksS0FBSyxpQkFBa0JJLEVBQVNWLEVBQVVDLEdBR2pEd0Isd0JBQXdCekIsRUFBVUMsR0FDbkJwUSxLQUFLNlAsb0JBQW9CLFNBQ2pDelIsSUFBSSwwQkFBMEIsR0FBRytSLEVBQVNDLEtDM0ZyRCxTQUFTQSxFQUFjeUIsR0FDbkIzRixFQUFVNEYsWUFBWXBSLEtBQUtxUixNQUFNRixFQUFRRyxjQUFjQyxRQUFTLEtBcVByREMsTUFuUEssQ0FDaEJqQyxTQUFRLENBQUNDLEVBQWtCQyxJQUNmZ0MsSUFDSkMsRUFBWW5DLFNBQVNDLEVBQWtCbUMsSUFDbkNGLEVBQVMsQ0FDTGxOLEtBQU1xTixFQUFZM0QsZ0JBQ2xCa0MsUUFBU3dCLElBRVRsQyxHQUNBQSxFQUFTa0MsSUFFZGpDLElBR1hDLGVBQWMsQ0FBQ0MsRUFBdUJILElBQzFCZ0MsSUFDSkMsRUFBWS9CLGVBQWVDLEVBQXVCK0IsSUFDOUNGLEVBQVMsQ0FDTGxOLEtBQU1xTixFQUFZMUQsdUJBQ2xCaUMsUUFBU3dCLElBRVRsQyxHQUNBQSxFQUFTa0MsSUFFZGpDLElBR1hNLGVBQWVQLEdBQ0osS0FDSGlDLEVBQVkxQixlQUFlMkIsSUFDbkJsQyxHQUNBQSxFQUFTa0MsSUFFZGpDLElBR1hPLFdBQVUsQ0FBQ0gsRUFBYS9JLEVBQVEwSSxJQUNwQmdDLElBQ0pDLEVBQVl6QixXQUFXSCxFQUFhNkIsSUFDaENGLEVBQVMsQ0FDTGxOLEtBQU1xTixFQUFZekQsWUFDbEJnQyxRQUFTd0IsRUFDVDVLLE9BQVFBLElBRVIwSSxHQUNBQSxFQUFTa0MsSUFFZGpDLElBR1hHLG9CQUFtQixDQUFDQyxFQUFhTCxJQUNyQmdDLElBQ0pDLEVBQVk3QixvQkFBb0JDLEVBQWE2QixJQUN6Q0YsRUFBUyxDQUNMbE4sS0FBTXFOLEVBQVl4RCxZQUNsQitCLFFBQVN3QixJQUVUbEMsR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYUSxlQUFjLENBQUNDLEVBQVNWLElBQ2IsS0FDSGlDLEVBQVl4QixlQUFlQyxFQUFTd0IsSUFDNUJsQyxHQUNBQSxFQUFTa0MsSUFFZGpDLElBR1hVLG9CQUFtQixDQUFDRCxFQUFTVixJQUNsQixLQUNIaUMsRUFBWXRCLG9CQUFvQkQsRUFBU3dCLElBQ2pDbEMsR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYVyxzQkFBcUIsQ0FBQ0YsRUFBU1YsSUFDcEIsS0FDSGlDLEVBQVlyQixzQkFBc0JGLEVBQVN3QixJQUNuQ2xDLEdBQ0FBLEVBQVNrQyxJQUVkakMsSUFHWFksV0FBVSxDQUFDSCxFQUFTcEosRUFBUTBJLElBQ2hCZ0MsSUFDSixJQUFJSSxFQUFjdFUsT0FBTzhOLE9BQU8sR0FBSThFLEVBQVFMLGFBQzVDK0IsRUFBWUMsV0FBWSxFQUN4QkosRUFBWXBCLFdBQVcsQ0FBQ3lCLE9BQVE1QixFQUFRTCxZQUFZaUMsUUFBU0osSUFDekRGLEVBQVMsQ0FDTGxOLEtBQU1xTixFQUFZdkQsWUFDbEI4QixRQUFTMEIsRUFDVDlLLE9BQVFBLElBRVIwSSxHQUNBQSxFQUFTa0MsSUFFZGpDLElBR1hzQyxVQUFTLENBQUM3QixFQUFTVixJQUNQZ0MsSUFDSkMsRUFBWW5CLGVBQWVKLEVBQVN3QixJQUNoQ0YsRUFBUyxDQUNMbE4sS0FBTXFOLEVBQVl0RCxXQUNsQjZCLFFBQVMsQ0FBRTRCLE9BQVE1QixFQUFRNEIsVUFFM0J0QyxHQUNBQSxFQUFTa0MsSUFFZGpDLElBR1hjLFlBQVcsQ0FBQ0wsRUFBU3BKLEVBQVEwSSxJQUNqQmdDLElBQ0osSUFBSVEsRUFBZTFVLE9BQU84TixPQUFPLEdBQUk4RSxFQUFRTCxhQUM3Q21DLEVBQWFILFdBQVksRUFDekJKLEVBQVlsQixZQUFZLENBQUN1QixPQUFRNUIsRUFBUUwsWUFBWWlDLFFBQVNKLElBQzFERixFQUFTLENBQ0xsTixLQUFNcU4sRUFBWXJELGFBQ2xCNEIsUUFBUzhCLEVBQ1RsTCxPQUFRQSxJQUVSMEksR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYZSxzQkFBcUIsQ0FBQ04sRUFBU3BKLEVBQVEwSSxJQUMzQmdDLElBQ0pDLEVBQVlqQixzQkFBc0JOLEVBQVN3QixJQUN2Q0YsRUFBUyxDQUNMbE4sS0FBTXFOLEVBQVluRCxvQkFDbEIwQixRQUFTLENBQUU0QixPQUFRNUIsRUFBUTRCLE9BQVFHLGFBQWMvQixFQUFRK0IsY0FDekRuTCxPQUFRQSxJQUVSMEksR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYZ0Isc0JBQXFCLENBQUNQLEVBQVNnQyxFQUFZcEwsRUFBUTBJLElBQ3ZDZ0MsSUFDSixJQUFJVyxFQUFPN1UsT0FBTzhOLE9BQU8sR0FBSThFLEVBQVFMLGFBQ3JDc0MsRUFBS0QsV0FBYUEsRUFDbEJULEVBQVloQixzQkFBc0IsQ0FBRXFCLE9BQVE1QixFQUFRTCxZQUFZaUMsT0FBUUksV0FBWUEsR0FBY1IsSUFDOUZGLEVBQVMsQ0FDTGxOLEtBQU1xTixFQUFZOUMsNkJBQ2xCcUIsUUFBU2lDLEVBQ1RyTCxPQUFRQSxJQUVSMEksR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYMkMsV0FBVSxDQUFDbEMsRUFBU1YsSUFDUmdDLElBQ0osSUFBSVcsRUFBTzdVLE9BQU84TixPQUFPLEdBQUk4RSxFQUFRTCxhQUNyQzRCLEVBQVlmLFdBQVcsQ0FBRW9CLE9BQVE1QixFQUFRTCxZQUFZaUMsUUFBVUosSUFDM0RGLEVBQVMsQ0FDTGxOLEtBQU1xTixFQUFZN0MsY0FDbEJvQixRQUFTaUMsSUFFVDNDLEdBQ0FBLEVBQVNrQyxJQUVkakMsSUFHWGtCLGFBQVksQ0FBQ3BCLEVBQWtCQyxJQUNuQmdDLElBQ0pDLEVBQVlkLGFBQWFwQixFQUFrQm1DLElBQ3ZDRixFQUFTLENBQ0xsTixLQUFNcU4sRUFBWWxELHNCQUNsQnlCLFFBQVN3QixJQUVUbEMsR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYNEMsaUJBQWdCLElBQ0piLElBQ0pDLEVBQVlSLHdCQUF3QnFCLElBQ2hDZCxFQUFTLENBQ0xsTixLQUFNcU4sRUFBWTVDLG9DQUNsQm1CLFFBQVNvQyxPQUt6QjFCLGdCQUFlLENBQUNyQixFQUFrQkMsSUFDdEJnQyxJQUNKQyxFQUFZYixnQkFBZ0JyQixFQUFrQm1DLElBQzFDRixFQUFTLENBQ0xsTixLQUFNcU4sRUFBWWpELHdCQUNsQndCLFFBQVMsQ0FBRXFDLGFBQWNiLEtBRXpCbEMsR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYb0IsYUFBWSxDQUFDWCxFQUFTWSxFQUFZQyxFQUFTdkIsSUFDL0JnQyxJQUNKQyxFQUFZWixhQUFhWCxFQUFTWSxFQUFZQyxFQUFTVyxJQUNuREYsRUFBUyxDQUNMbE4sS0FBTXFOLEVBQVloRCxlQUNsQnVCLFFBQVN3QixJQUVUbEMsR0FDQUEsRUFBU2tDLElBRWRqQyxJQUdYdUIsZUFBYyxDQUFDZCxFQUFTVixJQUNaZ0MsSUFDSkMsRUFBWVQsZUFBZWQsRUFBU3dCLElBQ2hDRixFQUFTLENBQ0xsTixLQUFNcU4sRUFBWS9DLGlCQUNsQnNCLFFBQVMsQ0FBRTRCLE9BQVE1QixFQUFRNEIsT0FBUVUsT0FBUXRDLEVBQVFzQyxVQUVuRGhELEdBQ0FBLEVBQVNrQyxJQUVkakMsV0M1T2YsTUFBTWdELEVBQWEsQ0FBRUMsTUFBTyxRQUN0QkMsRUFBc0IsQ0FDeEJiLE9BQVEsRUFDUmMsU0FBVSxJQUdkLE1BQU1DLFVBQXVCbkgsWUFDekI0QixZQUFZbEUsR0FDUm1FLE1BQU1uRSxHQUNOL0osS0FBS21PLE1BQVEsQ0FDVHlDLGVBQWdCM1MsT0FBTzhOLE9BQU8sR0FBSXVILEdBQ2xDRyxPQUFRLENBQ0pGLFVBQVUsRUFDVkcsaUJBQWlCLEVBQ2pCQyxnQkFBZ0IsR0FFcEJELGdCQUFpQixJQUd6QkUscUJBQ0ksSUFBSWhELGVBQUNBLEdBQWtCNVEsS0FBS21PLE1BQzVCeUMsRUFBZTZCLE9BQVN6UyxLQUFLK0osTUFBTTBJLE9BQ25DN0IsRUFBZTJDLFNBQVcsR0FDMUJ2VCxLQUFLc08sU0FBUyxDQUNWc0MsbUJBR1JpRCwwQkFBMEJDLEdBQ3RCOVQsS0FBSytULE1BQU0sS0FDUCxJQUFJbkQsZUFBQ0EsR0FBa0I1USxLQUFLbU8sTUFDNUJ5QyxFQUFlNkIsT0FBU3FCLEVBQVNyQixPQUNqQ3pTLEtBQUtzTyxTQUFTLENBQ1ZzQyxxQkFLWm9ELFNBQVNsVixFQUFLb0IsR0FDVixHQUFZLG9CQUFScEIsRUFDQWtCLEtBQUtzTyxTQUFTLENBQ1ZvRixnQkFBaUJ4VCxFQUFLZ0MsT0FBTzFELE9BQzlCLEtBQ0N3QixLQUFLaVUscUJBRU4sQ0FDSCxJQUFJckQsZUFBQ0EsR0FBa0I1USxLQUFLbU8sTUFDNUJ5QyxFQUFlOVIsR0FBT29CLEVBQUtnQyxPQUFPMUQsTUFDbEN3QixLQUFLc08sU0FBUyxDQUFFc0Msa0JBQWtCLEtBQzlCNVEsS0FBS2lVLGtCQUlqQkMsT0FDUWxVLEtBQUtpVSxnQkFDTGpVLEtBQUsrSixNQUFNb0ksU0FBU2dDLEVBQW1CdkQsZUFBZTVRLEtBQUttTyxNQUFNeUMsZUFBZ0IsS0FDN0U1USxLQUFLb1UsU0FDTGxJLEVBQVVtSSxPQUFPQyxFQUFhbFcsSUFBSSxvQkFBcUIsUUFJbkU2VixlQUNJLElBQUlNLEdBQVEsR0FDUmQsT0FBQ0EsR0FBVXpULEtBQUttTyxNQUNwQnNGLEVBQU9GLFVBQVcsRUFDbEJFLEVBQU9DLGlCQUFrQixFQUN6QkQsRUFBT0UsZ0JBQWlCLEVBQ3hCLElBQUkvQyxlQUFDQSxHQUFrQjVRLEtBQUttTyxPQUN4QnVGLGdCQUFDQSxHQUFtQjFULEtBQUttTyxNQWU3QixNQWRnQyxLQUE1QnlDLEVBQWUyQyxXQUNmRSxFQUFPRixVQUFXLEVBQ2xCZ0IsR0FBUSxHQUUyQixLQUFuQzNELEVBQWU4QyxpQkFDZkQsRUFBT0MsaUJBQWtCLEVBQ3pCYSxHQUFRLEdBRUhiLElBQW9COUMsRUFBZTJDLFdBQ3hDRSxFQUFPRSxnQkFBaUIsRUFDeEJZLEdBQVEsR0FFWnZVLEtBQUtzTyxTQUFTLENBQUVtRixXQUVUYyxFQUVYUixNQUFNNUQsR0FDRm5RLEtBQUtzTyxTQUFTLENBQ1ZzQyxlQUFnQjNTLE9BQU84TixPQUFPLEdBQUl1SCxHQUNsQ0ksZ0JBQWlCLEdBQ2pCRCxPQUFRLENBQ0pGLFVBQVUsRUFDVkcsaUJBQWlCLEVBQ2pCQyxnQkFBZ0IsSUFFckIsS0FDeUIsbUJBQWJ4RCxHQUNQQSxNQUlaaUUsU0FDSXBVLEtBQUsrVCxRQUM4QixtQkFBeEIvVCxLQUFLK0osTUFBTXlLLFVBQ2xCeFUsS0FBSytKLE1BQU15SyxXQUVuQmxJLFNBQ0ksSUFBSTZCLE1BQUNBLEdBQVNuTyxLQUNkLE9BQU9BLEtBQUsrSixNQUFNMEssU0FBV2xJLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLDRCQUN4Q0osRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVUUsVUFBVSxnQkFDaEJKLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELEtBQ0lGLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLFNBQ1YySCxFQUFhbFcsSUFBSSxtQkFFdEJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEseUJBQUQsQ0FBMEJpSSxNQUFPSixFQUFhbFcsSUFBSSxlQUM5Q3VXLE1BQU94RyxFQUFNc0YsT0FBT0YsU0FDcEJTLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLFlBQ25DNFUsZUFBZ0JOLEVBQWFsVyxJQUFJLG9CQUNqQ3lXLGFBQWNQLEVBQWFsVyxJQUFJLHdCQUMvQnlGLE1BQU91UCxFQUNQbk8sS0FBSyxXQUNMNlAsYUFBYSxNQUNiMUIsV0FBWSxDQUFFMkIsYUFBYyxJQUM1QnZXLE1BQU8yUCxFQUFNeUMsZUFBZTJDLFdBQ2hDaEgsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHlCQUFELENBQTBCaUksTUFBT0osRUFBYWxXLElBQUksY0FDOUN1VyxNQUFPeEcsRUFBTXNGLE9BQU9DLGlCQUFtQnZGLEVBQU1zRixPQUFPRSxlQUNwREssU0FBVWhVLEtBQUtnVSxTQUFTalYsS0FBS2lCLEtBQU0sbUJBQ25DNFUsZUFBZ0JOLEVBQWFsVyxJQUFJLG1CQUNqQ3lXLGFBQWMxRyxFQUFNc0YsT0FBT0MsZ0JBQWtCWSxFQUFhbFcsSUFBSSx1QkFBeUJrVyxFQUFhbFcsSUFBSSxtQ0FDeEd5RixNQUFPdVAsRUFDUG5PLEtBQUssV0FDTG1PLFdBQVksQ0FBRTJCLGFBQWMsSUFDNUJELGFBQWEsTUFDYnRXLE1BQU8yUCxFQUFNdUYsbUJBRXJCbkgsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsS0FDSUYsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLE9BQUQsQ0FBUUUsVUFBVSxxQkFBcUJyTCxHQUFHLFlBQWEyRCxLQUFLLFlBQVl1SixRQUFTeE8sS0FBS29VLE9BQU9yVixLQUFLaUIsT0FBU3NVLEVBQWFsVyxJQUFJLGNBQzVIbU8sRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLE9BQUQsQ0FBUW5MLEdBQUcsMEJBQTBCMkQsS0FBSyxVQUFVdUosUUFBU3hPLEtBQUtrVSxLQUFLblYsS0FBS2lCLE9BQVNzVSxFQUFhbFcsSUFBSSxpQkFNMUhvVixFQUFlekcsVUFBWSxDQUN2Qm9GLFNBQVUxRyxJQUFVZixLQUFLSixXQUN6Qm1JLE9BQVFoSCxJQUFVakIsTUFBTUYsV0FDeEJtSyxRQUFTaEosSUFBVWhCLEtBQ25CK0osU0FBVS9JLElBQVVmLE1BRXhCOEksRUFBZXdCLGFBQWUsQ0FDMUJQLFNBQVMsR0FRRVEsd0JBTmYsU0FBeUI5RyxHQUNyQixNQUFPLENBQ0hxQyxZQUFhckMsRUFBTStHLE1BQU0xRSxjQUlsQnlFLENBQXlCekIsU0NyS2pDLFNBQVMyQixFQUFlQyxFQUFVdEMsR0FDckMsT0FBUUEsRUFBS3VDLGNBQWdCRCxFQUFTRSxTQUFXRixFQUFTRyxZQUFZQyxjQUduRSxTQUFTQyxFQUFpQkwsR0FDN0IsT0FBT0EsRUFBU0UsU0FBV0YsRUFBU0csWUFBWUcsZUFHN0MsU0FBU0MsRUFBZ0JQLEdBQzVCLE9BQU9BLEVBQVNFLFNBQVdGLEVBQVNHLFlBQVlLLGNBTzdDLFNBQVNDLEVBQWtCVCxFQUFVM0MsR0FFeEMsT0FBUTJDLEVBQVNFLFNBQVdGLEVBQVNHLFlBQVlPLGdCQUc5QyxTQUFTQyxFQUFnQlgsR0FFNUIsT0FBUUEsRUFBU0UsU0FBV0YsRUFBU0csWUFBWVMsY0NWckQsTUFBTUMsVUFBaUI1SixZQUNuQjRCLFlBQVlsRSxHQUNSbUUsTUFBTW5FLEdBQ04vSixLQUFLbU8sTUFBUSxDQUNUcUMsWUFBYXpHLEVBQU15RyxZQUNuQjBGLHVCQUF1QixHQUUzQmxXLEtBQUttVyxVQUFXLEVBQ2hCblcsS0FBS29XLFlBQWNwVyxLQUFLb1csWUFBWXJYLEtBQUtpQixNQUc3Q29XLFlBQVlDLElBQytCLGlCQUEzQkEsRUFBTW5VLE9BQU95SyxXQUE2RCxpQkFBM0IwSixFQUFNblUsT0FBT3lLLFlBQTJFLElBQWpEMEosRUFBTW5VLE9BQU95SyxVQUFVaEksUUFBUSxlQUM3SDNFLEtBQUsrSixNQUFNdU0sVUFHbkIxQyxxQkFDSWhTLFNBQVMyVSxpQkFBaUIsUUFBU3ZXLEtBQUtvVyxhQUFhLEdBQ3JELElBQUlyTSxNQUFDQSxHQUFTL0osVUFDWStFLElBQXRCZ0YsRUFBTXlHLGFBQTZCekcsRUFBTXlHLFlBQVlpQyxTQUFXMUksRUFBTTBJLFFBQ3RFelMsS0FBS21XLFVBQVcsRUFDaEJuVyxLQUFLcVEsZUFBZXRHLElBR3BCL0osS0FBS21XLFVBQVcsRUFHeEJ0QywwQkFBMEJDLFFBQ08vTyxJQUF6QitPLEVBQVN0RCxhQUE2QnNELEVBQVN0RCxZQUFZaUMsU0FBV3FCLEVBQVNyQixRQUMvRXpTLEtBQUttVyxVQUFXLEVBQ2hCblcsS0FBS3FRLGVBQWV5RCxJQUdwQjlULEtBQUttVyxVQUFXLEVBR3hCOUYsZUFBZXRHLEdBQ1hBLEVBQU1vSSxTQUFTZ0MsRUFBbUI5RCxlQUFlLENBQUVvQyxPQUFRMUksRUFBTTBJLFFBQVdKLElBQ3hFLElBQUk3QixFQUFjdlMsT0FBTzhOLE9BQU8sR0FBSXNHLEdBQ3BDclMsS0FBS3NPLFNBQVMsQ0FDVmtDLGVBQ0YsS0FDRXhRLEtBQUttVyxVQUFXLE9BSTVCSyxTQUNJeFcsS0FBS3FRLGVBQWVyUSxLQUFLK0osT0FFN0IwTSx1QkFDSTdVLFNBQVM4VSxvQkFBb0IsUUFBUzFXLEtBQUtvVyxhQUFhLEdBRTVEM0ksS0FBS0MsRUFBT0MsRUFBUUMsR0FTaEIsT0FSQUEsT0FBa0I3SSxJQUFWNkksRUFBc0IsTUFBUUEsRUFDdENGLEVBQVFBLEVBQU1ELEtBQUssU0FBVWpCLEVBQUdxQixHQUM1QixPQUFJckIsRUFBRW1CLEdBQVVFLEVBQUVGLEdBQ0csUUFBVkMsRUFBa0IsR0FBSyxFQUM5QnBCLEVBQUVtQixHQUFVRSxFQUFFRixHQUNHLFFBQVZDLEdBQW1CLEVBQUksRUFDM0IsSUFJZitJLFlBQVk3WCxHQUNSLE9BQVFBLEdBQ0osSUFBSyxnQkFDRGtCLEtBQUs0VyxxQkFDTDVXLEtBQUsrSixNQUFNdU0sVUFDWCxNQUNKLElBQUssaUJBQ0R0VyxLQUFLNlcsdUJBQ0wsTUFDSixJQUFLLHNCQUNEN1csS0FBSzhXLHNCQUNMOVcsS0FBSytKLE1BQU11TSxVQUNYLE1BQ0osSUFBSyxhQUNEdFcsS0FBS2dSLGFBQ0xoUixLQUFLK0osTUFBTXVNLFVBQ1gsTUFDSixJQUFLLGFBQ0R0VyxLQUFLaVIsaUJBQ0xqUixLQUFLK0osTUFBTXVNLFVBQ1gsTUFDSixJQUFLLGNBQ0R0VyxLQUFLa1IsY0FDTGxSLEtBQUsrSixNQUFNdU0sVUFDWCxNQUNKLElBQUssaUJBQ0R0VyxLQUFLb1IsdUJBQXNCLEdBQzNCcFIsS0FBSytKLE1BQU11TSxVQUNYLE1BQ0osSUFBSyxlQUNEdFcsS0FBS29SLHVCQUFzQixHQUMzQnBSLEtBQUsrSixNQUFNdU0sVUFDWCxNQUNKLElBQUssWUFDRHRXLEtBQUsrUyxhQUNML1MsS0FBSytKLE1BQU11TSxVQUNYLE1BQ0osSUFBSyxxQkFDRHRXLEtBQUttUix1QkFBc0IsR0FDM0JuUixLQUFLK0osTUFBTXVNLFVBQ1gsTUFDSixJQUFLLHNCQUNEdFcsS0FBS21SLHVCQUFzQixHQUMzQm5SLEtBQUsrSixNQUFNdU0sVUFDWCxNQUNKLElBQUssY0FDRHRXLEtBQUsrVyxnQkFDTC9XLEtBQUsrSixNQUFNdU0sVUFDWCxNQUNKLFFBQzZDLG1CQUE5QnRXLEtBQUsrSixNQUFNaU4sZ0JBQ2xCaFgsS0FBSytKLE1BQU1pTixlQUFlbFksRUFBS2tCLEtBQUttTyxNQUFNcUMsYUFDOUN4USxLQUFLK0osTUFBTXVNLFdBS3ZCUyxnQkFDSTdLLEVBQVUrSyxnQkFBZ0IsS0FDdEIxWCxPQUFPMlgsSUFBSXBPLFNBQVc5SSxLQUFLbU8sTUFBTXFDLFlBQVkyRyxhQUdyRFAscUJBQ0k1VyxLQUFLK0osTUFBTW9JLFNBQVNnQyxFQUFtQnBELHNCQUFzQixDQUFFMEIsT0FBUXpTLEtBQUsrSixNQUFNMEksUUFBVSxLQUN4RnZHLEVBQVVtSSxPQUFPQyxFQUFhbFcsSUFBSSxnQkFBaUIsUUFHM0Q0UyxhQUNJOUUsRUFBVWtMLFFBQVE5QyxFQUFhbFcsSUFBSSxzQkFBdUJrVyxFQUFhbFcsSUFBSSxVQUFXa1csRUFBYWxXLElBQUksVUFBVyxLQUM5RzRCLEtBQUsrSixNQUFNb0ksU0FBU2dDLEVBQW1CbkQsV0FBVyxDQUFFUixZQUFheFEsS0FBSytKLE1BQU15RyxhQUFleFEsS0FBSytKLE1BQU10QyxPQUFRLEtBQzFHeUUsRUFBVW1JLE9BQU9DLEVBQWFsVyxJQUFJLGVBQWdCLEtBQ2xENEIsS0FBS3dXLGNBSWpCdkYsaUJBQ0kvRSxFQUFVa0wsUUFBUTlDLEVBQWFsVyxJQUFJLHNCQUF1QmtXLEVBQWFsVyxJQUFJLFVBQVdrVyxFQUFhbFcsSUFBSSxVQUFXLEtBQzlHNEIsS0FBSytKLE1BQU1vSSxTQUFTZ0MsRUFBbUJ6QixVQUFVLENBQUVELE9BQVF6UyxLQUFLK0osTUFBTTBJLFlBRzlFdkIsY0FDSWxSLEtBQUsrSixNQUFNb0ksU0FBU2dDLEVBQW1CakQsWUFBWSxDQUFFVixZQUFheFEsS0FBSytKLE1BQU15RyxhQUFleFEsS0FBSytKLE1BQU10QyxPQUFRLEtBQzNHeUUsRUFBVW1JLE9BQU9DLEVBQWFsVyxJQUFJLGdCQUFpQixLQUNuRDRCLEtBQUt3VyxZQUdiTSxzQkFDSTlXLEtBQUsrSixNQUFNb0ksU0FBU2dDLEVBQW1CckQsb0JBQW9CLENBQUUyQixPQUFRelMsS0FBSytKLE1BQU0wSSxRQUFVLEtBQ3RGdkcsRUFBVW1JLE9BQU9DLEVBQWFsVyxJQUFJLDZCQUE4QixLQUNoRTRCLEtBQUt3VyxZQUdicEYsc0JBQXNCeUIsR0FDbEI3UyxLQUFLK0osTUFBTW9JLFNBQVNnQyxFQUFtQi9DLHNCQUFzQixDQUFFWixZQUFheFEsS0FBSytKLE1BQU15RyxhQUFlcUMsRUFBWTdTLEtBQUsrSixNQUFNdEMsT0FBUSxLQUNqSXlFLEVBQVVtSSxPQUFPeEIsRUFBYXlCLEVBQWFsVyxJQUFJLGtCQUFtQmtXLEVBQWFsVyxJQUFJLG9CQUFxQixLQUN4RzRCLEtBQUt3VyxZQUdiekQsYUFDSS9TLEtBQUsrSixNQUFNb0ksU0FBU2dDLEVBQW1CcEIsV0FBVyxDQUFFdkMsWUFBYXhRLEtBQUsrSixNQUFNeUcsYUFBZSxLQUN2RnRFLEVBQVVtSSxPQUFPQyxFQUFhbFcsSUFBSSxnQkFBaUIsS0FDbkQ0QixLQUFLd1csWUFHYnJGLHNCQUFzQnlCLEdBQ2xCNVMsS0FBSytKLE1BQU1vSSxTQUFTZ0MsRUFBbUJoRCxzQkFBc0IsQ0FBRXNCLE9BQVF6UyxLQUFLK0osTUFBTTBJLE9BQVFHLGFBQWNBLEdBQWdCNVMsS0FBSytKLE1BQU10QyxPQUFRLEtBQ3ZJekgsS0FBS3dXLFlBR2JLLHFCQUFxQlEsR0FDakIsTUFBTUMsR0FBUXRYLEtBQUttTyxNQUFNK0gsc0JBQ3pCbFcsS0FBS3NPLFNBQVMsQ0FBRTRILHNCQUF1Qm9CLElBQ25DRCxHQUNBclgsS0FBSytKLE1BQU11TSxVQUduQmhLLFNBRUksSUFBSWlMLEVBQWUsQ0FBQyxDQUFFelksSUFBSSxjQUFlMFksTUFBUWxELEVBQWFsVyxJQUFJLGVBQWdCbUosTUFBTyxLRDVKMUYsSUFBMEI2TixFQUFVM0MsRUM2TW5DLE9EN015QjJDLEVDOEpKcFYsS0FBSytKLE1BQU0wTixZQUFZM1Asb0JBQW9Cc04sU0Q5SjdCM0MsRUM4SnVDelMsS0FBS21PLE1BQU1xQyxZQUFZaUMsT0Q3SjlGMkMsRUFBU3NDLFFBQVVqRixJQUFTMkMsRUFBUzNDLFNDK0ovQnpTLEtBQUttTyxNQUFNcUMsWUFBWTZFLFlBR25CclYsS0FBS21PLE1BQU1xQyxZQUFZNkUsY0FFNUJrQyxFQUFlLENBQUMsQ0FBRXpZLElBQUksc0JBQXVCMFksTUFBUWxELEVBQWFsVyxJQUFJLHVCQUF3Qm1KLE1BQU8sS0FBTXZHLE9BQU91VyxJQUpsSEEsRUFBZSxDQUFDLENBQUV6WSxJQUFJLHFCQUFzQjBZLE1BQVFsRCxFQUFhbFcsSUFBSSxzQkFBdUJtSixNQUFPLEtBQU12RyxPQUFPdVcsSUFPcEgxQixFQUFrQjdWLEtBQUsrSixNQUFNME4sWUFBWTNQLG9CQUFvQnNOLFNBQVVwVixLQUFLbU8sTUFBTXFDLFlBQVlpQyxVQUU5RjhFLEVBQWUsQ0FBQyxDQUFFelksSUFBSSxnQkFBaUIwWSxNQUFPbEQsRUFBYWxXLElBQUksaUJBQWtCbUosTUFBTyxLQUFNdkcsT0FBT3VXLEdBQ3JHQSxFQUFlLENBQUMsQ0FBRXpZLElBQUksaUJBQWtCMFksTUFBT2xELEVBQWFsVyxJQUFJLGtCQUFtQm1KLE1BQU8sS0FBTXZHLE9BQU91VyxHQUNsR3ZYLEtBQUttTyxNQUFNcUMsWUFBWW1ILHFCQUN4QkosRUFBZSxDQUFDLENBQUV6WSxJQUFJLHNCQUF1QjBZLE1BQVFsRCxFQUFhbFcsSUFBSSx1QkFBd0JtSixNQUFPLEtBQU12RyxPQUFPdVcsS0R6TDNILFNBQXVCbkMsRUFBVTNDLEdBRXBDLE9BQVEyQyxFQUFTRSxTQUFXRixFQUFTRyxZQUFZeEcsY0FDMUMwRCxJQUFTMkMsRUFBUzNDLE9DeUxqQm1GLENBQWM1WCxLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixTQUFVcFYsS0FBS21PLE1BQU1xQyxZQUFZaUMsVUFFdEZ6UyxLQUFLbU8sTUFBTXFDLFlBQVlnQyxXQUN2QitFLEVBQWUsQ0FBQyxDQUFFelksSUFBSSxjQUFlMFksTUFBUWxELEVBQWFsVyxJQUFJLGVBQWdCbUosTUFBTyxLQUFNdkcsT0FBT3VXLEdBQ2xHQSxFQUFlLENBQUMsQ0FBRXpZLElBQUksYUFBYzBZLE1BQVFsRCxFQUFhbFcsSUFBSSxjQUFlbUosTUFBTyxLQUFNdkcsT0FBT3VXLElBR2hHQSxFQUFlLENBQUMsQ0FBRXpZLElBQUksYUFBYzBZLE1BQVFsRCxFQUFhbFcsSUFBSSxjQUFlbUosTUFBTyxLQUFNdkcsT0FBT3VXLElEN0x6RyxTQUFxQ25DLEVBQVUzQyxHQUVsRCxPQUFRMkMsRUFBU0UsU0FBV0YsRUFBU0csWUFBWXNDLDZCQUMxQ3BGLElBQVMyQyxFQUFTM0MsT0M2TGpCcUYsQ0FBNEI5WCxLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixTQUFVcFYsS0FBS21PLE1BQU1xQyxZQUFZaUMsVUFHcEc4RSxFQURBdlgsS0FBS21PLE1BQU1xQyxZQUFZcUMsV0FDUixDQUFDLENBQUUvVCxJQUFJLGlCQUFrQjBZLE1BQVFsRCxFQUFhbFcsSUFBSSxrQkFBbUJtSixNQUFPLEtBQU12RyxPQUFPdVcsR0FJekYsQ0FBQyxDQUFFelksSUFBSSxlQUFnQjBZLE1BQVFsRCxFQUFhbFcsSUFBSSxnQkFBaUJtSixNQUFPLEtBQU12RyxPQUFPdVcsR0FFcEd2WCxLQUFLbU8sTUFBTXFDLFlBQVl1SCxXQUN2QlIsRUFBZSxDQUFDLENBQUV6WSxJQUFJLFlBQWEwWSxNQUFRbEQsRUFBYWxXLElBQUksZ0JBQWlCbUosTUFBTyxNQUFPdkcsT0FBT3VXLEtBSTFHQSxFQUFlQSxFQUFhdlcsT0FBUWhCLEtBQUsrSixNQUFNaU8sYUFBZWhZLEtBQUsrSixNQUFNaU8sWUFBWWhZLEtBQUttTyxNQUFNcUMsY0FBaUIsSUFFakgrRyxFQUFldlgsS0FBS3lOLEtBQUs4SixFQUFjLFNBQ3hCdlgsS0FBS21XLFNBSVA1SixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVRSxVQUFVLDJCQUEyQnNMLElBQU0vTSxHQUFTbEwsS0FBS2tZLFlBQWNoTixJQUNwRmxMLEtBQUttTyxNQUFNK0gsdUJBQ1QzSixFQUFBQyxFQUFBMUgsY0FBQ3FULEVBQUQsS0FFUVosRUFBYXRYLElBQUksQ0FBQ21ZLEVBQU03USxJQUNiZ0YsRUFBQUMsRUFBQTFILGNBQUN1VCxFQUFELENBQVV2WixpQkFBa0J5SSxJQUFTa0gsYUFBY3pPLEtBQUsyVyxZQUFZNVgsS0FBS2lCLEtBQU1vWSxFQUFLdFosTUFBUXNaLEVBQUtaLFNBS3ZIeFgsS0FBS21PLE1BQU0rSCx1QkFDUjNKLEVBQUFDLEVBQUExSCxjQUFDd1QsRUFBRCxDQUFnQjlELFNBQVV4VSxLQUFLNlcscUJBQXFCOVgsS0FBS2lCLE1BQU0sR0FBUXlTLE9BQVF6UyxLQUFLK0osTUFBTTBJLFVBTzNGbEcsRUFBQUMsRUFBQTFILGNBQUEsYUFLbkJtUixFQUFTbEosVUFBWSxDQUNqQm9GLFNBQVUxRyxJQUFVZixLQUFLSixXQUN6Qm1JLE9BQVFoSCxJQUFVZCxPQUFPTCxXQUN6QmdNLFFBQVM3SyxJQUFVZixLQUFLSixXQUN4QmtHLFlBQWEvRSxJQUFVeE0sT0FDdkIrWSxZQUFhdk0sSUFBVWYsS0FBS0osV0FDNUIwTSxlQUFnQnZMLElBQVVmLEtBQUtKLFdBQy9CbU4sWUFBYWhNLElBQVV4TSxPQUN2QndJLE9BQVFnRSxJQUFVZCxRQVNQc0ssd0JBTmYsU0FBeUI5RyxHQUNyQixNQUFPLENBQ0hxQyxZQUFhckMsRUFBTStHLE1BQU0xRSxjQUlsQnlFLENBQXlCZ0IsR0M3UnpCc0MsRUFBQSxDQUFDLENBQUNoUixNQUFNLEVBQUd1RixLQUFLLElBQUssQ0FBQ3ZGLE1BQU0sR0FBSXVGLEtBQUssSUFBSyxDQUFDdkYsTUFBTSxHQUFJdUYsS0FBSyxJQUFLLENBQUN2RixNQUFNLEdBQUl1RixLQUFLLEtDVTlGLE1BQU0wTCxVQUFtQm5NLFlBQ3JCNEIsY0FDSUMsUUFDQWxPLEtBQUtvVyxZQUFjcFcsS0FBS29XLFlBQVlyWCxLQUFLaUIsTUFDekNBLEtBQUtrWSxZQUFjeFksSUFBTStZLFlBQ3pCelksS0FBS21PLE1BQVEsQ0FDVHVLLFFBQVEsRUFDUnZDLFVBQVUsR0FHbEJ3QyxvQkFDSS9XLFNBQVMyVSxpQkFBaUIsUUFBU3ZXLEtBQUtvVyxhQUN4Q3BXLEtBQUs0WSxZQUFhLEVBR3RCbkMsdUJBQ0k3VSxTQUFTOFUsb0JBQW9CLFFBQVMxVyxLQUFLb1csYUFDM0NwVyxLQUFLNFksWUFBYSxFQUV0QmhGLHFCQUNJLElBQUk4RSxFQUFnQyxLQUF0QjFZLEtBQUsrSixNQUFNOE8sUUFBaUI3WSxLQUFLK0osTUFBTXpJLEtBQU90QixLQUFLK0osTUFBTThPLE9BQ3ZFN1ksS0FBS3NPLFNBQVMsQ0FDVm9LLFdBR1J0QyxZQUFZQyxHQUlIclcsS0FBSzRZLFlBQzZCLGlCQUEzQnZDLEVBQU1uVSxPQUFPeUssWUFBOEUsSUFBcEQwSixFQUFNblUsT0FBT3lLLFVBQVVoSSxRQUFRLGlCQUNyRCxlQUFwQjBSLEVBQU1uVSxPQUFPWixJQUEyQyxjQUFwQitVLEVBQU1uVSxPQUFPWixJQUE2QyxRQUF0QnRCLEtBQUsrSixNQUFNOE8sUUFDN0QsS0FBdEI3WSxLQUFLK0osTUFBTThPLFFBQWlCN1ksS0FBSytKLE1BQU16SSxLQUFPdEIsS0FBSytKLE1BQU04TyxRQUMxRDdZLEtBQUsrSixNQUFNK08sV0FJdkJDLE9BQU94UixHQUN3QixLQUF0QnZILEtBQUsrSixNQUFNOE8sUUFBaUI3WSxLQUFLK0osTUFBTXpJLEtBQU90QixLQUFLK0osTUFBTThPLFFBQVc3WSxLQUFLK0osTUFBTWlQLGVBQWlCelIsRUFDakd2SCxLQUFLK0osTUFBTStPLFdBRVg5WSxLQUFLK0osTUFBTWtQLGFBQWFqWixLQUFLK0osTUFBTXpJLEdBQUlpRyxHQUcvQzJSLGlCQUNJLE1BQU01QixHQUFRdFgsS0FBS21PLE1BQU1nSSxTQUN6Qm5XLEtBQUtzTyxTQUFTLENBQUU2SCxTQUFVbUIsSUFJOUI2QixlQUFlckcsRUFBTTRGLEdBQ2pCLElBQUlVLEVBQWMsR0FDbEJBLEVBQWNBLEVBQVlwWSxPQUFRaEIsS0FBSytKLE1BQU1zUCxrQkFBb0JyWixLQUFLK0osTUFBTXNQLGlCQUFpQnZHLElBQVUsSUFFbkcyQyxFQUFpQnpWLEtBQUsrSixNQUFNME4sWUFBWTNQLG9CQUFvQnNOLFlBRTVEZ0UsRUFBY0EsRUFBWXBZLE9BQU8sQ0FBQyxDQUM5QnVHLE1BQU8sR0FDUCtSLEtBQU1DLFdBQVNDLFNBQ2ZoQyxNQUFPbEQsRUFBYWxXLElBQUksMkJBRzVCdVgsRUFBZ0IzVixLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixZQUMzRGdFLEVBQWNBLEVBQVlwWSxPQUFPLENBQUMsQ0FDOUJ1RyxNQUFPLEdBQ1ArUixLQUFNQyxXQUFTRSxhQUNmakMsTUFBT2xELEVBQWFsVyxJQUFJLDRCQUk1QitXLEVBQWVuVixLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixTQUFVdEMsS0FFcEVzRyxFQUFjQSxFQUFZcFksT0FBTyxDQUFDLENBQzlCdUcsTUFBTyxFQUNQK1IsS0FBTUMsV0FBU0csV0FDZmxDLE1BQU9sRCxFQUFhbFcsSUFBSSx5QkFJaEMsSUFBSWIsRUFBSSxFQUNKMlUsRUFBY3pFLEVBQUsyTCxFQUFhLFFBQVMsUUFBUW5aLElBQUswWixJQUN0RCxJQUFJM08sRUFBVXVCLEVBQUFDLEVBQUExSCxjQUFBLE9BQUtoRyxtQkFBb0J2QixJQUFLaWEsTUFBT21DLEVBQVduQyxNQUFPN0ssVUFBWSxzQkFBd0IrTCxHQUFVMVksS0FBSytKLE1BQU1pUCxlQUFpQnpiLEdBQUtxYyx3QkFBeUIsQ0FBRUMsT0FBUUYsRUFBV0wsTUFBUTlLLFFBQVV4TyxLQUFLK1ksT0FBT2hhLEtBQUtpQixLQUFNekMsS0FFM08sT0FEQUEsSUFDT3lOLElBRVgsTUFBUSxDQUFDdUIsRUFBQUMsRUFBQTFILGNBQUEsT0FBS2hHLDJCQUE0QmdVLEVBQUtMLFNBQVU1TyxNQUFPLENBQUVpVyxTQUFVLGFBQ3hFdk4sRUFBQUMsRUFBQTFILGNBQUEsT0FBSzZILFVBQVcscUJBQXVCM00sS0FBS21PLE1BQU1nSSxTQUFVeUQsd0JBQXlCLENBQUVDLE9BQVFOLFdBQVNRLGNBQ3BHdkwsUUFBU3hPLEtBQUtrWixlQUFlbmEsS0FBS2lCLFFBRXBDQSxLQUFLbU8sTUFBTWdJLFVBQVk1SixFQUFBQyxFQUFBMUgsY0FBQ2tWLEVBQUQsQ0FBVXZTLE9BQVF6SCxLQUFLK0osTUFBTXRDLE9BQVFnUSxZQUFhelgsS0FBSytKLE1BQU0wTixZQUFhTyxZQUFhaFksS0FBSytKLE1BQU1pTyxhQUFlaFksS0FBSytKLE1BQU1pTyxZQUFZalosS0FBS2lCLE1BQU9nWCxlQUFnQmhYLEtBQUsrSixNQUFNaU4sZ0JBQWtCaFgsS0FBSytKLE1BQU1pTixlQUFlalksS0FBS2lCLE1BQU9zVyxRQUFTdFcsS0FBS2taLGVBQWVuYSxLQUFLaUIsTUFDOVJ5UyxPQUFRSyxFQUFLTCxXQUNaelIsT0FBT2tSLEdBRXBCK0gsZUFBZW5ILEVBQU14UixFQUFJb1gsR0FDckIsSUFBSXhHLEVBQWNsUyxLQUFLbVosZUFBZXJHLEVBQU00RixHQUN4Q3dCLEVBQWVsYSxLQUFLK0osTUFBTWtRLGdCQUFrQmphLEtBQUsrSixNQUFNa1EsZUFBZW5ILEdBQ3RFcUgsT0FBc0NwVixJQUF6Qi9FLEtBQUsrSixNQUFNb1EsWUFBeUJuYSxLQUFLK0osTUFBTW9RLFlBQWFDLEVBOEI3RSxPQUFPM00sRUE3QlcsQ0FDZCxDQUNJbEcsTUFBTyxFQUNQcEgsUUFBU29NLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVDLFdBQVl5TixFQUFZRSxLQUFLQyxHQUFhLElBQVZBLEVBQUUvUyxPQUFXdUYsS0FBT0gsVUFBVyxjQUFnQm1HLEVBQUtOLFVBQVksV0FBYSxLQUM1SGpHLEVBQUFDLEVBQUExSCxjQUFBLFVBQ0l5SCxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsb0JBQUQsQ0FBcUJFLFVBQVUsYUFBYTROLEtBQU16SCxFQUFLMEgsWUFBYUMsU0FBVSxPQUU1RCxNQUFyQjNILEVBQUswSCxhQUF1QmpPLEVBQUFDLEVBQUExSCxjQUFBLFNBQUlnTyxFQUFLNEgsWUFHOUMsQ0FDSW5ULE1BQU8sR0FDUHBILFFBQVNvTSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVQyxXQUFZeU4sRUFBWUUsS0FBS0MsR0FBYSxLQUFWQSxFQUFFL1MsT0FBWXVGLEtBQU9ILFVBQVcsZUFBaUJtRyxFQUFLTixVQUFZLFdBQWEsS0FDOUhqRyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsb0JBQUQsQ0FBcUJFLFVBQVUsYUFBYWdPLFVBQVUsRUFBTTlULEtBQU0sVUFBWWlNLEVBQUs4SCxNQUFPTCxLQUFNekgsRUFBSzhILE1BQU9ILFNBQVUsUUFHOUgsQ0FDSWxULE1BQU8sR0FDUHBILFFBQVNvTSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVQyxXQUFZeU4sRUFBWUUsS0FBS0MsR0FBYSxLQUFWQSxFQUFFL1MsT0FBWXVGLEtBQU9ILFVBQVcsZUFBaUJtRyxFQUFLTixVQUFZLFdBQWEsS0FDdEcsTUFBdkJNLEVBQUsrSCxlQUF5QnRPLEVBQUFDLEVBQUExSCxjQUFBLFNBQUlrSSxFQUFXOEYsRUFBSytILGdCQUMzQixNQUF2Qi9ILEVBQUsrSCxlQUF5Qi9ILEVBQUsrSCxnQkFHNUMsQ0FDSXRULE1BQU8sR0FDUHBILFFBQWdCLFFBQVBtQixHQUFnQmlMLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVDLFdBQVl5TixFQUFZRSxLQUFLQyxHQUFhLEtBQVZBLEVBQUUvUyxPQUFZdUYsS0FBTWpKLE1BQU8sQ0FBQ2lYLE1BQU0sUUFBU0MsVUFBVSxRQUFTQyxhQUFjLElBQUs5SSxLQUUxSmxSLE9BQVFrWixHQUFpQixJQUVGLFNBQVNqYSxJQUFLME4sR0FDNUJBLEVBQU94TixTQUl0Qm1NLFNBQ0ksTUFBTXZDLE1BQUNBLEdBQVMvSixLQUNoQixJQUFJOFMsS0FBQ0EsR0FBUTlTLEtBQUsrSixNQUNkMk8sRUFBMkIsS0FBakIzTyxFQUFNOE8sUUFBaUI5TyxFQUFNekksS0FBT3lJLEVBQU04TyxPQUNwRG9DLEVBQVcsV0FBYUMsS0FBS0MsU0FBV2hPLEtBQUtpTyxXQUNwQ3JXLElBQVQrTixJQUNBQSxFQUFPLENBQ0h1SSxPQUFRLElBQ1JiLFlBQWEsSUFDYkUsU0FBVSxJQUNWRSxNQUFPLElBQ1BDLGNBQWUsSUFDZmhJLFdBQVksTUFHcEIsSUFBSXlJLEVBQWN0YixLQUFLaWEsZUFBZW5ILEVBQU0vSSxFQUFNekksR0FBSW9YLEdBQ3RELE9BRUluTSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVRSxVQUFXLDhCQUErQnJMLEdBQUkyWixFQUFVaEQsSUFBTS9NLEdBQVNsTCxLQUFLa1ksWUFBY2hOLEdBQ2hHcUIsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBV0UsVUFBVyw2QkFBK0IrTCxHQUNqRG5NLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVc1SixJQUFPMkksbUJBQXFCLElBQU0zQixFQUFNd1IsWUFBYTdPLFdBQVksT0FDL0UzQyxFQUFNd1IsYUFBcUMsZUFBdEJ4UixFQUFNd1IsY0FBaUNoUCxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxLQUMxRDZPLEdBRUwvTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsWUFBRCxDQUFhK08sV0FBVyxFQUFNQyxTQUFVL0MsRUFBUWdELHNCQUFzQixFQUFNL08sVUFBVSxtQkFDakYrTCxHQUFVM08sRUFBTWdFLGNBUzdDeUssRUFBV3pMLFVBQVksQ0FDbkIrRixLQUFNckgsSUFBVXhNLE9BQ2hCZ2EsYUFBY3hOLElBQVVmLEtBQ3hCb08sU0FBVXJOLElBQVVmLEtBQ3BCcEosR0FBSW1LLElBQVViLE9BQ2RpTyxPQUFRcE4sSUFBVWIsT0FDbEJvTyxhQUFjdk4sSUFBVWQsT0FDeEIwTyxpQkFBa0I1TixJQUFVZixLQUM1QnVQLGVBQWdCeE8sSUFBVWYsS0FDMUJzTixZQUFhdk0sSUFBVWYsS0FBS0osV0FDNUIwTSxlQUFnQnZMLElBQVVmLEtBQUtKLFdBQy9CbU4sWUFBYWhNLElBQVV4TSxPQUN2QmtiLFlBQWExTyxJQUFVakIsTUFDdkIvQyxPQUFRZ0UsSUFBVWQsUUFHdEI2TixFQUFXeEQsYUFBZSxDQUN0QjJHLFFBQVEsR0FHR25ELGNDL0xmLE1BQU1vRCxVQUE0QnZQLFlBQzlCNEIsY0FDSUMsUUFFSjVCLFNBQ0ksTUFBTXZDLE1BQUNBLEdBQVMvSixLQUNoQixPQUFPK0osRUFBTThSLGFBQWUsR0FBSzlSLEVBQU1nRSxTQUFTaEUsRUFBTThSLGNBRzlERCxFQUFvQjdPLFVBQVksQ0FDNUI4TyxZQUFhcFEsSUFBVWQsT0FDdkJvRCxTQUFVdEMsSUFBVWpCLE9BRXhCb1IsRUFBb0I1RyxhQUFlLENBQy9CNkcsWUFBYSxHQUdERCx5QkNwQkhFLEVBQ0gsT0FER0EsRUFFSCxPQUZHQSxFQUdELFNBR0NDLEVBQXNCLFNBQUN4SSxFQUFVM0IsR0FDMUMsR0FBSUEsUUFDQSxPQUFPLEtBR1gsSUFBSW9LLEVBQWtCQyxFQUF1QjFJLEVBQVMzQixHQUV0RCxPQUFJMkIsRUFBU2xTLFFBQVUsRUFDWixLQUVQMmEsRUFBZ0JFLE9BQVMsRUFDbEJKLEVBRVBFLEVBQWdCRSxPQUFTLEVBQ2xCSixFQUVQRSxFQUFnQkUsUUFBVSxFQUNuQkosT0FEWCxHQUtTRyxFQUF5QixTQUFDMUksRUFBVXZRLEdBQzdDLElBQUlrWixFQUFTLEVBR1RDLEVBQVluWixFQUFRbVosVUFFcEJDLEdBQXNCLEVBQ3RCQyxHQUFzQixFQUN0QkMsR0FBNkIsRUFDN0JDLEdBQW9CLEVBQ3BCQyxHQUFvQixFQUNwQkMsR0FBNEIsRUFFNUJDLEVBQTBCMVosRUFBUTBaLHlCQUEyQixFQUM3REMsRUFBdUIzWixFQUFRMlosc0JBQXdCLEdBRTNELEdBQUlwSixFQUFTbFMsT0FBUyxFQUFHLENBRWpCa1MsRUFBU3FKLE1BQU0sV0FDZlYsSUFDQUcsR0FBc0IsR0FFdEI5SSxFQUFTcUosTUFBTSxXQUNmVixJQUNBRSxHQUFzQixHQUV0QjdJLEVBQVNxSixNQUFNLFlBQ2ZWLElBQ0FLLEdBQW9CLEdBR3hCLElBQUlNLEVBQVV0SixFQUFTcUosTUFBTSx3RUFDekJDLEdBQVdBLEVBQVF4YixRQUFVcWIsSUFDN0JSLElBQ0FJLEdBQTZCLEdBRzdCL0ksRUFBU2xTLFFBQVU4YSxJQUNuQkQsSUFDQU0sR0FBb0IsR0FHcEJqSixFQUFTbFMsUUFBVThhLEVBQVksR0FDL0JELElBR0FTLElBQ0FGLEVBQTRCLElBQUlLLE9BQU9ILEVBQXNCLEtBQU1oVCxLQUFLNEosSUFHaEYsTUFBTyxDQUNIMkksT0FBUUEsRUFDUmEsVUFBVyxFQUNYWCxvQkFBcUJBLEVBQ3JCQyxvQkFBcUJBLEVBQ3JCQywyQkFBNEJBLEVBQzVCQyxrQkFBbUJBLEVBQ25CQyxrQkFBbUJBLEVBQ25CQywwQkFBMkJBLFVDNUVuQyxNQUFNTyxVQUFpQjNRLFlBQ25CNEIsWUFBWWxFLEdBQ1JtRSxNQUFNbkUsR0FHVjRPLG9CQUNJM1ksS0FBSytKLE1BQU1rVCw4QkFHZjNRLFNBQ0ksT0FDSUMsRUFBQUMsRUFBQTFILGNBQUEsV0FDSXlILEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSx5QkFBRCxDQUEwQmlJLE1BQU9KLEVBQWFsVyxJQUFJLFlBQzlDdVcsTUFBTzNVLEtBQUsrSixNQUFNNEssTUFBTXBCLFNBQ3hCUyxTQUFVaFUsS0FBSytKLE1BQU1tVCxpQkFDckJ0SSxlQUFnQk4sRUFBYWxXLElBQUksaUJBQ2pDeVcsYUFBY1AsRUFBYWxXLElBQUkscUJBQy9CeUYsTUFBTzdELEtBQUsrSixNQUFNbEcsTUFDbEJ1UCxXQUFhcFQsS0FBSytKLE1BQU1vVCwwQkFBbUQsQ0FBRXBJLGFBQWMsR0FBdkMsQ0FBRUEsYUFBYyxJQUNwRTlQLEtBQUssV0FDTDZQLGFBQWEsTUFDYnRXLE1BQU93QixLQUFLK0osTUFBTXFULFlBQVk3SixTQUFXOEosU0FBVSxJQUV2RDlRLEVBQUFDLEVBQUExSCxjQUFBLE9BQUt4RCxHQUFHLHNCQUFzQnFMLFVBQVcsb0JBQXNCb1AsRUFBb0IvYixLQUFLK0osTUFBTXFULFlBQVk3SixTQUFVdlQsS0FBSytKLE1BQU02SCwyQkFDL0hyRixFQUFBQyxFQUFBMUgsY0FBQSxPQUFLeEQsR0FBRyx3QkFBd0JxTCxVQUFXLHlCQUEyQm9QLEVBQW9CL2IsS0FBSytKLE1BQU1xVCxZQUFZN0osU0FBVXZULEtBQUsrSixNQUFNNkgsMEJBQ2pJbUssRUFBb0IvYixLQUFLK0osTUFBTXFULFlBQVk3SixTQUFVdlQsS0FBSytKLE1BQU02SCw0QkFPckZvTCxFQUFTalEsVUFBWSxDQUNqQjRILE1BQU1sSixJQUFVeE0sT0FDaEI0RSxNQUFPNEgsSUFBVXhNLE9BQU9xTCxXQUN4QjhTLFlBQWEzUixJQUFVeE0sT0FBT3FMLFdBQzlCNlMsMEJBQTRCMVIsSUFBVWhCLEtBQUtILFdBQzNDNFMsaUJBQW1CelIsSUFBVWYsS0FBS0osV0FDbENzSCx3QkFBMEJuRyxJQUFVeE0sT0FDcENnZSw0QkFBOEJ4UixJQUFVZixNQWlCN0J1Syx3QkFkVTlHLElBQ2QsQ0FDSHlELHdCQUEwQnpELEVBQU0rRyxNQUFNdEQsMEJBSWxCTyxJQUNqQixDQUNIOEssNEJBQThCLEtBQzFCOUssRUFBU21MLEVBQVl0Syx1QkFLbEJpQyxDQUE0QytILEdDdEQzRCxNQUFNNUosR0FBYSxDQUFFQyxNQUFPLFFBQ3RCa0ssR0FBNkIsQ0FDL0JDLFVBQVcsR0FDWEMsU0FBVSxHQUNWN0MsTUFBTyxHQUNQRixTQUFVLEdBQ1ZuSCxTQUFVLEdBQ1ZtSyxTQUFVLEdBQ1ZDLE9BQVEsR0FDUkMsZ0JBQWdCLEVBQ2hCQyxXQUFXLEVBQ1h4SixRQUFRLEdBR1osTUFBTXlKLFdBQXNCelIsWUFDeEI0QixZQUFZbEUsR0FDUm1FLE1BQU1uRSxHQUNOL0osS0FBS21PLE1BQVEsQ0FDVGlQLFlBQWFuZixPQUFPOE4sT0FBTyxHQUFJd1IsSUFDL0I3SixnQkFBaUIsR0FDakJELE9BQVEsQ0FDSitKLFdBQVcsRUFDWEMsVUFBVSxFQUNWL0MsVUFBVSxFQUNWRSxPQUFPLEVBQ1BySCxVQUFVLEVBQ1ZHLGlCQUFpQixFQUNqQkMsZ0JBQWdCLEVBQ2hCK0osVUFBVSxFQUNWQyxRQUFRLElBR2hCM2QsS0FBSytkLFdBQVksRUFHckJiLGlCQUFpQjdHLEdBQ2JyVyxLQUFLc08sU0FBUyxDQUNWOE8sWUFBWSxJQUNMcGQsS0FBS21PLE1BQU1pUCxZQUFZN0osU0FBVThDLEVBQU1uVSxPQUFPMUQsT0FFckRpVixPQUFPLElBQUl6VCxLQUFLbU8sTUFBTXNGLE9BQVFGLFVBQVMsS0FLL0NTLFNBQVNsVixFQUFLb0IsR0FDVixJQUFJa2QsWUFBQ0EsR0FBZXBkLEtBQUttTyxNQUN6QixHQUFZLG1CQUFSclAsR0FBb0MsY0FBUkEsR0FBK0IsV0FBUkEsRUFDbkRzZSxFQUFZdGUsR0FBT29CLE9BQ2hCLEdBQVksb0JBQVJwQixFQUEyQixDQUNsQyxJQUFJNFUsZ0JBQUNBLEdBQW1CMVQsS0FBS21PLE1BQzdCdUYsRUFBa0J4VCxFQUFLZ0MsT0FBTzFELE1BQzlCd0IsS0FBS3NPLFNBQVMsQ0FBRW9GLHlCQUdoQjBKLEVBQVl0ZSxHQUFPb0IsRUFBS2dDLE9BQU8xRCxNQUVuQ3dCLEtBQUtzTyxTQUFTLEdBQUksS0FDZHRPLEtBQUtpVSxpQkFHYkMsT0FDSWxVLEtBQUsrZCxXQUFZLEVBQ2IvZCxLQUFLaVUsZ0JBQ0xqVSxLQUFLK0osTUFBTW1LLEtBQUtDLEVBQW1CeEQsV0FBVzNRLEtBQUttTyxNQUFNaVAsWUFBYXBkLEtBQUsrSixNQUFNdEMsT0FBUSxLQUNyRnpILEtBQUtvVSxTQUNMbEksRUFBVW1JLE9BQU9DLEVBQWFsVyxJQUFJLGVBQWdCLFFBSzlENGYsVUFBVTdOLEdBQ04sSUFBSWlOLFlBQUNBLEdBQWVwZCxLQUFLbU8sTUFDekJpUCxFQUFjbmYsT0FBTzhOLE9BQU8sR0FBSXdSLElBQ2hDLElBQUk5SixPQUFDQSxHQUFVelQsS0FBS21PLE1BQ3BCc0YsRUFBTytKLFdBQVksRUFDbkIvSixFQUFPZ0ssVUFBVyxFQUNsQmhLLEVBQU9pSCxVQUFXLEVBQ2xCakgsRUFBT21ILE9BQVEsRUFDZm5ILEVBQU9GLFVBQVcsRUFDbEJFLEVBQU9DLGlCQUFrQixFQUN6QkQsRUFBT0UsZ0JBQWlCLEVBQ3hCRixFQUFPaUssVUFBVyxFQUNsQmpLLEVBQU9rSyxRQUFTLEVBQ2hCM2QsS0FBSytkLFdBQVksRUFDakIvZCxLQUFLc08sU0FBUyxDQUNWOE8sY0FDQTNKLFNBQ0FDLGdCQUFpQixJQUNsQixLQUN5QixtQkFBYnZELEdBQ1BBLE1BSVppRSxTQUNJcFUsS0FBS2dlLFVBQVUsS0FDWGhlLEtBQUsrSixNQUFNeUssYUFHbkJQLGVBQ0ksTUFBTWxLLE1BQUNBLEdBQVUvSixLQUVqQixJQUFJdVUsR0FBUSxFQUNSNEksRUFBNEJwVCxFQUFNME4sWUFBWTNQLG9CQUFvQnNOLFNBQVMrSCwwQkFDL0UsR0FBSW5kLEtBQUsrZCxVQUFXLENBQ2hCLElBQUlYLFlBQUNBLEdBQWVwZCxLQUFLbU8sT0FDckJzRixPQUFDQSxHQUFVelQsS0FBS21PLE1BQ3BCc0YsRUFBTytKLFdBQVksRUFDbkIvSixFQUFPZ0ssVUFBVyxFQUNsQmhLLEVBQU9pSCxVQUFXLEVBQ2xCakgsRUFBT21ILE9BQVEsRUFDZm5ILEVBQU9GLFVBQVcsRUFDbEJFLEVBQU9DLGlCQUFrQixFQUN6QkQsRUFBT0UsZ0JBQWlCLEVBQ3hCRixFQUFPaUssVUFBVyxFQUNsQmpLLEVBQU9rSyxRQUFTLEVBQ2MsS0FBMUJQLEVBQVlJLFlBQ1ovSixFQUFPK0osV0FBWSxFQUNuQmpKLEdBQVEsR0FFaUIsS0FBekI2SSxFQUFZSyxXQUNaaEssRUFBT2dLLFVBQVcsRUFDbEJsSixHQUFRLEdBRWlCLEtBQXpCNkksRUFBWTFDLFdBQ1pqSCxFQUFPaUgsVUFBVyxFQUNsQm5HLEdBQVEsR0FFYyxLQUF0QjZJLEVBQVl4QyxPQUFpQnBOLEVBQWM0UCxFQUFZeEMsU0FDdkRuSCxFQUFPbUgsT0FBUSxFQUNmckcsR0FBUSxJQUV1QixJQUEvQjZJLEVBQVlRLGdCQUFxRCxLQUF6QlIsRUFBWTdKLFdBQ3BERSxFQUFPRixVQUFXLEVBQ2xCZ0IsR0FBUSxJQUV1QixJQUEvQjZJLEVBQVlRLGdCQUEyRCxLQUEvQjVkLEtBQUttTyxNQUFNdUYsaUJBQ25ERCxFQUFPQyxpQkFBa0IsRUFDekJhLEdBQVEsSUFFNEIsSUFBL0I2SSxFQUFZUSxnQkFBNEI1ZCxLQUFLbU8sTUFBTXVGLGtCQUFvQjBKLEVBQVk3SixXQUN4RkUsRUFBT0UsZ0JBQWlCLEVBQ3hCWSxHQUFRLEdBR1I0SSxJQUM2QixLQUF6QkMsRUFBWU0sV0FDWmpLLEVBQU9pSyxVQUFXLEVBQ2xCbkosR0FBUSxHQUVlLEtBQXZCNkksRUFBWU8sU0FDWmxLLEVBQU9rSyxRQUFTLEVBQ2hCcEosR0FBUSxJQUloQnZVLEtBQUtzTyxTQUFTLENBQUVtRixXQUVwQixPQUFPYyxFQUVYakksU0FDSSxNQUFNdkMsTUFBQ0EsRUFBRG9FLE1BQVFBLEdBQVVuTyxLQUN4QixJQUFJbWQsRUFBNEJwVCxFQUFNME4sWUFBWTNQLG9CQUFvQnNOLFNBQVMrSCwwQkFDL0UsT0FDSTVRLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVc1SixJQUFPNEksa0JBQW1COUgsTUFBT2tHLEVBQU1sRyxPQUN4RDBJLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVUsZ0JBQ2hCSixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsV0FBRCxDQUFZRSxVQUFVLDhCQUNsQkosRUFBQUMsRUFBQTFILGNBQUEsV0FDSXlILEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSx5QkFBRCxDQUEwQmpPLE1BQU8yUCxFQUFNaVAsWUFBWUksVUFDL0M3SSxNQUFPeEcsRUFBTXNGLE9BQU8rSixVQUNwQnhKLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLGFBQ25DMFUsTUFBT0osRUFBYWxXLElBQUksYUFDeEJ3VyxlQUFnQk4sRUFBYWxXLElBQUksa0JBQ2pDeVcsYUFBY1AsRUFBYWxXLElBQUksc0JBQy9CeUYsTUFBT3VQLEdBQ1AwQixhQUFhLE1BQ2IxQixXQUFZLENBQUUyQixhQUFjLElBQU1zSSxTQUFVLElBQ2hEOVEsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHlCQUFELENBQTBCak8sTUFBTzJQLEVBQU1pUCxZQUFZMUMsU0FDL0MvRixNQUFPeEcsRUFBTXNGLE9BQU9pSCxTQUNwQjFHLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLFlBQ25DMFUsTUFBT0osRUFBYWxXLElBQUksWUFDeEJ3VyxlQUFnQk4sRUFBYWxXLElBQUksaUJBQ2pDeVcsYUFBY1AsRUFBYWxXLElBQUkscUJBQy9CeUYsTUFBT3VQLEdBQ1AwQixhQUFhLE1BQ2IxQixXQUFZLENBQUUyQixhQUFjLElBQU9zSSxTQUFVLElBQ2pEOVEsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLE9BQUQsQ0FBUWpPLE1BQU8yUCxFQUFNaVAsWUFBWVMsVUFDN0JuSixNQUFPSixFQUFhbFcsSUFBSSxZQUFhb1osTUFBT2xELEVBQWFsVyxJQUFJLGlCQUM3RDRWLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLGFBQWdCcWQsU0FBVSxFQUM3RFksT0FBUTNKLEVBQWFsVyxJQUFJLFlBQWE4ZixRQUFTNUosRUFBYWxXLElBQUksZ0JBRXhFbU8sRUFBQUMsRUFBQTFILGNBQUEsV0FDSXlILEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSx5QkFBRCxDQUEwQmpPLE1BQU8yUCxFQUFNaVAsWUFBWUssU0FDL0M5SSxNQUFPeEcsRUFBTXNGLE9BQU9nSyxTQUNwQnpKLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLFlBQ25DMFUsTUFBT0osRUFBYWxXLElBQUksWUFDeEJ3VyxlQUFnQk4sRUFBYWxXLElBQUksaUJBQ2pDeVcsYUFBY1AsRUFBYWxXLElBQUkscUJBQy9CeUYsTUFBT3VQLEdBQ1AwQixhQUFhLE1BQ2IxQixXQUFZLENBQUUyQixhQUFjLElBQU9zSSxTQUFVLElBQ2pEOVEsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHlCQUFELENBQTBCak8sTUFBTzJQLEVBQU1pUCxZQUFZeEMsTUFDL0NqRyxNQUFPeEcsRUFBTXNGLE9BQU9tSCxNQUNwQjVHLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLFNBQ25DMFUsTUFBT0osRUFBYWxXLElBQUksU0FDeEJ3VyxlQUFnQk4sRUFBYWxXLElBQUksY0FDakN5VyxhQUFjUCxFQUFhbFcsSUFBSSxrQkFDL0J5RixNQUFPdVAsR0FDUDBCLGFBQWEsTUFDYjFCLFdBQVksQ0FBRTJCLGFBQWMsSUFBT3NJLFNBQVUsSUFDakQ5USxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsT0FBRCxDQUFRak8sTUFBTzJQLEVBQU1pUCxZQUFZUSxlQUFnQnBHLE1BQU9sRCxFQUFhbFcsSUFBSSxlQUNyRXNXLE1BQU9KLEVBQWFsVyxJQUFJLFVBQVksSUFDcEM0VixTQUFVaFUsS0FBS2dVLFNBQVNqVixLQUFLaUIsS0FBTSxrQkFBcUJxZCxTQUFVLEVBQ2xFWSxPQUFRM0osRUFBYWxXLElBQUksWUFBYThmLFFBQVM1SixFQUFhbFcsSUFBSSxrQkFHMUUrUCxFQUFNaVAsWUFBWVEsZ0JBQWtCclIsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsS0FBVUYsRUFBQUMsRUFBQTFILGNBQUEsYUFDOUNxSixFQUFNaVAsWUFBWVEsZ0JBQWtCclIsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsS0FHOUJGLEVBQUFDLEVBQUExSCxjQUFDcVosRUFBRCxDQUNJeEosTUFBT3hHLEVBQU1zRixPQUNieUosaUJBQWtCbGQsS0FBS2tkLGlCQUFpQm5lLEtBQUtpQixNQUM3QzZELE1BQU91UCxHQUNQQSxXQUFhK0osRUFBbUQsQ0FBRXBJLGFBQWMsR0FBdkMsQ0FBRUEsYUFBYyxJQUN6RHFJLFlBQWFwZCxLQUFLbU8sTUFBTWlQLGNBRzVCN1EsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHlCQUFELENBQTBCaUksTUFBT0osRUFBYWxXLElBQUksV0FDOUN1VyxNQUFPeEcsRUFBTXNGLE9BQU9DLGlCQUFtQnZGLEVBQU1zRixPQUFPRSxlQUNwREssU0FBVWhVLEtBQUtnVSxTQUFTalYsS0FBS2lCLEtBQUssbUJBQ2xDNFUsZUFBZ0JOLEVBQWFsVyxJQUFJLGdCQUNqQ3lXLGFBQWMxRyxFQUFNc0YsT0FBT0MsZ0JBQWtCWSxFQUFhbFcsSUFBSSxvQkFBc0JrVyxFQUFhbFcsSUFBSSxnQ0FDckd5RixNQUFPdVAsR0FDUG5PLEtBQUssV0FDTDZQLGFBQWEsTUFDYjFCLFdBQWErSixFQUFtRCxDQUFFcEksYUFBYyxHQUF2QyxDQUFFQSxhQUFjLElBQ3pEdlcsTUFBTzJQLEVBQU11RixnQkFBa0IySixTQUFVLEtBSXBERixHQUE2QjVRLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxXQUFELEtBQzFCRixFQUFBQyxFQUFBMUgsY0FBQSxXQUNJeUgsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHlCQUFELENBQTBCaUksTUFBT0osRUFBYWxXLElBQUksWUFDOUN1VyxNQUFPeEcsRUFBTXNGLE9BQU9pSyxTQUNwQjFKLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLFlBQ25DNFUsZUFBZ0JOLEVBQWFsVyxJQUFJLGlCQUNqQ3lXLGFBQWNQLEVBQWFsVyxJQUFJLHFCQUMvQnlGLE1BQU91UCxHQUNQQSxXQUFZLENBQUUyQixhQUFjLElBQzVCRCxhQUFhLE1BQ2J0VyxNQUFPMlAsRUFBTWlQLFlBQVlNLFNBQVdMLFNBQVUsS0FFdEQ5USxFQUFBQyxFQUFBMUgsY0FBQSxXQUNJeUgsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHlCQUFELENBQTBCaUksTUFBT0osRUFBYWxXLElBQUksVUFDOUN1VyxNQUFPeEcsRUFBTXNGLE9BQU9rSyxPQUNwQjNKLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLFVBQ25DNFUsZUFBZ0JOLEVBQWFsVyxJQUFJLGVBQ2pDeVcsYUFBY1AsRUFBYWxXLElBQUksbUJBQy9CeUYsTUFBT3VQLEdBQ1AwQixhQUFhLE1BQ2IxQixXQUFZLENBQUUyQixhQUFjLElBQzVCdlcsTUFBTzJQLEVBQU1pUCxZQUFZTyxPQUFTTixTQUFVLE9BR3hEOVEsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVUMsV0FBWSxJQUFLQyxVQUFVLDJCQUNqQ0osRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVWpPLE1BQU8yUCxFQUFNaVAsWUFBWS9JLE9BQy9CSyxNQUFPSixFQUFhbFcsSUFBSSxVQUN4QjRWLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLFVBQWFxZCxTQUFVLEtBRWxFOVEsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVUMsV0FBWSxJQUFLQyxVQUFVLGdCQUNqQ0osRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLE9BQUQsQ0FBUW5MLEdBQUcsWUFBYTJELEtBQUssWUFBWXVKLFFBQVN4TyxLQUFLb1UsT0FBT3JWLEtBQUtpQixNQUFTcWQsU0FBVSxJQUFLL0ksRUFBYWxXLElBQUksY0FDNUdtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsT0FBRCxDQUFRbkwsR0FBRyxhQUFhMkQsS0FBSyxVQUFVdUosUUFBU3hPLEtBQUtrVSxLQUFLblYsS0FBS2lCLE1BQVFxZCxTQUFVLElBQUsvSSxFQUFhbFcsSUFBSSxnQkFRL0gwZixHQUFjL1EsVUFBWSxDQUN0Qm1ILEtBQU16SSxJQUFVZixLQUFLSixXQUNyQmtLLFNBQVUvSSxJQUFVZixLQUFLSixXQUN6QnpHLE1BQU80SCxJQUFVeE0sT0FDakJ3SSxPQUFRZ0UsSUFBVWQsT0FDbEI4TSxZQUFhaE0sSUFBVXhNLFFBV1pnVyx5QkFBUSxPQVJLOUMsSUFDakIsQ0FDSCtCLEtBQVEvRCxJQUNKZ0MsRUFBU2hDLE1BS044RSxDQUFtQzZJLHdCQ3pTbEQsTUFBTTFLLEdBQWEsQ0FBRUMsTUFBTyxRQUN0QitLLEdBQXVCLENBQ3pCM0wsT0FBUSxFQUNSK0gsWUFBYSxHQUNiRSxTQUFVLEdBQ1ZFLE1BQU8sSUFHWCxNQUFNeUQsV0FBcUJoUyxZQUN2QjRCLFlBQVlsRSxHQUNSbUUsTUFBTW5FLEdBQ04vSixLQUFLbU8sTUFBUSxDQUNUbVEsZ0JBQWlCcmdCLE9BQU84TixPQUFPcVMsSUFDL0I1TixZQUFhekcsRUFBTXlHLFlBQ25CaUQsT0FBUSxDQUNKK0csYUFBYSxFQUNiRSxVQUFVLEVBQ1Y2RCxTQUFTLEVBQ1QzRCxPQUFPLEdBRVgxRSx1QkFBdUIsR0FHL0J0QyxxQkFDSSxJQUFJN0osTUFBQ0EsR0FBUy9KLFVBQ1krRSxJQUF0QmdGLEVBQU15RyxhQUE2QnpHLEVBQU15RyxZQUFZaUMsU0FBVzFJLEVBQU0wSSxPQUN0RXpTLEtBQUtxUSxlQUFldEcsRUFBT0EsRUFBTTBJLFFBSWpDelMsS0FBS3dlLHVCQUF1QnpVLEVBQU15RyxhQUcxQ3FELDBCQUEwQkMsUUFDTy9PLElBQXpCK08sRUFBU3RELGFBQTZCc0QsRUFBU3RELFlBQVlpQyxTQUFXcUIsRUFBU3JCLE9BQy9FelMsS0FBS3FRLGVBQWV5RCxFQUFVQSxFQUFTckIsUUFJdkN6UyxLQUFLd2UsdUJBQXVCMUssRUFBU3RELGFBSTdDaU8sYUFBYS9ZLEdBQ1QsSUFBSWdaLEVBQVl6Z0IsT0FBTzhOLE9BQU8sR0FBSXJHLEdBR2xDLE9BRmF6SCxPQUFPc0gsS0FBS21aLEdBQ3BCbFosUUFBUTFHLEdBQU80ZixFQUFVNWYsR0FBTyxJQUM5QjRmLEVBR1hyTyxlQUFldEcsRUFBTzBJLEdBQ2xCLE1BQU02TCxFQUFrQnRlLEtBQUt5ZSxhQUFhemUsS0FBS21PLE1BQU1tUSxpQkFDL0M5TixFQUFjeFEsS0FBS3llLGFBQWF6ZSxLQUFLbU8sTUFBTXFDLGFBQ2pEeFEsS0FBS3NPLFNBQVMsQ0FBQ2dRLGtCQUFpQjlOLGNBQWErTixTQUFTLElBQ3REeFUsRUFBTW9JLFNBQVNnQyxFQUFtQjlELGVBQWUsQ0FBRW9DLE9BQVFBLEdBQVdKLElBQ2xFclMsS0FBS3dlLHVCQUF1Qm5NLE1BR3BDbU0sdUJBQXVCRyxHQUNuQixJQUFJbk8sRUFBY3ZTLE9BQU84TixPQUFPLEdBQUk0UyxJQUNoQ0wsZ0JBQUNBLEdBQW1CdGUsS0FBS21PLE1BQzdCbVEsRUFBZ0I5RCxZQUFjaEssRUFBWWdLLFlBQzFDOEQsRUFBZ0I1RCxTQUFXbEssRUFBWWtLLFNBQ3ZDNEQsRUFBZ0IxRCxNQUFRcEssRUFBWW9LLE1BQ3BDMEQsRUFBZ0I3TCxPQUFTakMsRUFBWWlDLE9BQ3JDelMsS0FBS3NPLFNBQVMsQ0FDVmdRLGtCQUNBOU4sY0FDQStOLFNBQVMsSUFJakJ2SyxTQUFTbFYsRUFBS29CLEdBQ1YsR0FBSUYsS0FBS21PLE1BQU1vUSxRQUNYLE9BRUosSUFBSUQsZ0JBQUNBLEdBQW1CdGUsS0FBS21PLE1BQzdCbVEsRUFBZ0J4ZixHQUFPb0IsRUFBS2dDLE9BQU8xRCxNQUNuQ3dCLEtBQUtzTyxTQUFTLENBQUVnUSxtQkFBbUIsS0FDL0J0ZSxLQUFLaVUsY0FBYSxLQUkxQkMsT0FDUWxVLEtBQUtpVSxnQkFDTGpVLEtBQUsrSixNQUFNb0ksU0FBU2dDLEVBQW1CNUQsb0JBQW9CdlEsS0FBS21PLE1BQU1tUSxnQkFBaUIsS0FDbkZwUyxFQUFVbUksT0FBT0MsRUFBYWxXLElBQUksZUFBZ0IsS0FDbEQ0QixLQUFLcVEsZUFBZXJRLEtBQUsrSixNQUFPL0osS0FBS21PLE1BQU1tUSxnQkFBZ0I3TCxRQUMzRHpTLEtBQUsrSixNQUFNNlUsY0FLdkIzSyxlQUNJLElBQUlNLEdBQVEsR0FDUmQsT0FBQ0EsR0FBVXpULEtBQUttTyxNQUNwQnNGLEVBQU8rRyxhQUFjLEVBQ3JCL0csRUFBT2lILFVBQVcsRUFDbEJqSCxFQUFPbUgsT0FBUSxFQUNmLElBQUkwRCxnQkFBQ0EsR0FBbUJ0ZSxLQUFLbU8sTUFlN0IsTUFkb0MsS0FBaENtUSxFQUFnQjlELGNBQ2hCL0csRUFBTytHLGFBQWMsRUFDckJqRyxHQUFRLEdBRXFCLEtBQTdCK0osRUFBZ0I1RCxXQUNoQmpILEVBQU9pSCxVQUFXLEVBQ2xCbkcsR0FBUSxHQUVrQixLQUExQitKLEVBQWdCMUQsT0FBaUJwTixFQUFjOFEsRUFBZ0IxRCxTQUMvRG5ILEVBQU9tSCxPQUFRLEVBQ2ZyRyxHQUFRLEdBRVp2VSxLQUFLc08sU0FBUyxDQUFFbUYsV0FFVGMsRUFFWHNLLG1CQUNJN2UsS0FBS3NPLFNBQVMsQ0FDVjRILHVCQUF1QixJQUcvQmdILG1CQUNRbGQsS0FBS21PLE1BQU1vUSxTQUdmdmUsS0FBS3NPLFNBQVMsQ0FDVjRILHVCQUF1QixJQUcvQjRJLHdCQUNROWUsS0FBS21PLE1BQU1vUSxTQUdmdmUsS0FBSytKLE1BQU1vSSxTQUFTZ0MsRUFBbUJyRCxvQkFBb0IsQ0FBRTJCLE9BQVF6UyxLQUFLK0osTUFBTTBJLFFBQVUsS0FDdEZ2RyxFQUFVbUksT0FBT0MsRUFBYWxXLElBQUksNkJBQThCLEtBQ2hFLElBQUlvUyxZQUFDQSxHQUFleFEsS0FBS21PLE1BQ3pCcUMsRUFBWW1ILG9CQUFxQixFQUNqQzNYLEtBQUtzTyxTQUFTLENBQUVrQyxtQkFHeEJvRyxxQkFDUTVXLEtBQUttTyxNQUFNb1EsU0FHZnZlLEtBQUsrSixNQUFNb0ksU0FBU2dDLEVBQW1CcEQsc0JBQXNCLENBQUUwQixPQUFRelMsS0FBSytKLE1BQU0wSSxRQUFVLEtBQ3hGdkcsRUFBVW1JLE9BQU9DLEVBQWFsVyxJQUFJLGdCQUFpQixRQUczRDJnQixpQkFBaUJ2Z0IsR0FDYixNQUFjLEtBQVZBLEVBQ08sR0FFSkEsRUFBUThWLEVBQWFsVyxJQUFJLFFBQVVrVyxFQUFhbFcsSUFBSSxTQUcvRGtPLFNBQ0ksSUFBSTZCLE1BQUNBLEdBQVNuTyxLQUNkLE9BQU91TSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVRSxVQUFXNUosS0FBTzZJLGNBQy9CVyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxLQUNJRixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVRSxVQUFVLFlBQVlELFdBQVksSUFDeENILEVBQUFDLEVBQUExSCxjQUFDd1QsRUFBRCxDQUFnQjdELFFBQVN6VSxLQUFLbU8sTUFBTStILHNCQUF1QjFCLFNBQVV4VSxLQUFLNmUsaUJBQWlCOWYsS0FBS2lCLE1BQVF5UyxPQUFRelMsS0FBSytKLE1BQU0wSSxTQUMzSGxHLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLFNBQ1YySCxFQUFhbFcsSUFBSSxvQkFFdEJtTyxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVzNNLEtBQUttTyxNQUFNb1EsUUFBVSxZQUFjLElBQy9DaFMsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHlCQUFELENBQTBCak8sTUFBTzJQLEVBQU1tUSxnQkFBZ0I1RCxTQUNuRC9GLE1BQU94RyxFQUFNc0YsT0FBT2lILFNBQ3BCMUcsU0FBVWhVLEtBQUtnVSxTQUFTalYsS0FBS2lCLEtBQU0sWUFDbkMwVSxNQUFPSixFQUFhbFcsSUFBSSxZQUN4QndXLGVBQWdCTixFQUFhbFcsSUFBSSxpQkFDakN5VyxhQUFjUCxFQUFhbFcsSUFBSSxxQkFDL0J5RixNQUFPdVAsR0FDUDBCLGFBQWEsTUFDYmtLLFFBQVNqSixFQUFnQi9WLEtBQUsrSixNQUFNME4sWUFBWTNQLG9CQUFvQnNOLFVBQ3BFaEMsV0FBWSxDQUFFMkIsYUFBYyxNQUNoQ3hJLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSx5QkFBRCxDQUEwQmpPLE1BQU8yUCxFQUFNbVEsZ0JBQWdCOUQsWUFDbkQ3RixNQUFPeEcsRUFBTXNGLE9BQU8rRyxZQUNwQnhHLFNBQVVoVSxLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNLGVBQ25DMFUsTUFBT0osRUFBYWxXLElBQUksZUFDeEJ3VyxlQUFnQk4sRUFBYWxXLElBQUksb0JBQ2pDeVcsYUFBY1AsRUFBYWxXLElBQUksd0JBQy9CeUYsTUFBT3VQLEdBQ1AwQixhQUFhLE1BQ2JrSyxRQUFTakosRUFBZ0IvVixLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixVQUNwRWhDLFdBQVksQ0FBRTJCLGFBQWMsTUFDaEN4SSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEseUJBQUQsQ0FBMEJqTyxNQUFPMlAsRUFBTW1RLGdCQUFnQjFELE1BQ25EakcsTUFBT3hHLEVBQU1zRixPQUFPbUgsTUFDcEI1RyxTQUFVaFUsS0FBS2dVLFNBQVNqVixLQUFLaUIsS0FBTSxTQUNuQzBVLE1BQU9KLEVBQWFsVyxJQUFJLFNBQ3hCd1csZUFBZ0JOLEVBQWFsVyxJQUFJLGNBQ2pDeVcsYUFBY1AsRUFBYWxXLElBQUksa0JBQy9CeUYsTUFBT3VQLEdBQ1AwQixhQUFhLE1BQ2JrSyxRQUFTakosRUFBZ0IvVixLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixVQUNwRWhDLFdBQVksQ0FBRTJCLGFBQWMsT0FFbkNjLEVBQWtCN1YsS0FBSytKLE1BQU0wTixZQUFZM1Asb0JBQW9Cc04sU0FBVXBWLEtBQUttTyxNQUFNcUMsWUFBWWlDLFNBQzNGbEcsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVUUsVUFBVSxjQUNoQkosRUFBQUMsRUFBQTFILGNBQUEsT0FBSzZILFVBQVUsU0FDVjJILEVBQWFsVyxJQUFJLHVCQUV0Qm1PLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVcsUUFBVTNNLEtBQUttTyxNQUFNb1EsUUFBVSxZQUFjLEtBQzlEaFMsRUFBQUMsRUFBQTFILGNBQUEsT0FBSzBKLFFBQVN4TyxLQUFLa2QsaUJBQWlCbmUsS0FBS2lCLE9BQXpDLEtBQW9Ec1UsRUFBYWxXLElBQUksa0JBQXJFLFFBR0YrUCxFQUFNcUMsWUFBWW1ILG9CQUNoQnBMLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVcsUUFBVTNNLEtBQUttTyxNQUFNb1EsUUFBVSxZQUFjLEtBQzlEaFMsRUFBQUMsRUFBQTFILGNBQUEsT0FBSzBKLFFBQVN4TyxLQUFLOGUsc0JBQXNCL2YsS0FBS2lCLE9BQTlDLEtBQXlEc1UsRUFBYWxXLElBQUksdUJBQTFFLE9BSVJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVRSxVQUFXLFFBQVUzTSxLQUFLbU8sTUFBTW9RLFFBQVUsWUFBYyxLQUM5RGhTLEVBQUFDLEVBQUExSCxjQUFBLE9BQUswSixRQUFTeE8sS0FBSzRXLG1CQUFtQjdYLEtBQUtpQixPQUEzQyxLQUFzRHNVLEVBQWFsVyxJQUFJLGlCQUF2RSxTQU1oQm1PLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVUsa0JBQWtCRCxXQUFZLElBQzlDSCxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSxTQUNWMkgsRUFBYWxXLElBQUksZ0JBRXRCbU8sRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsQ0FBWUUsVUFBVSxTQUNsQkosRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVytLLE1BQU9sRCxFQUFhbFcsSUFBSSxxQkFDOUJrVyxFQUFhbFcsSUFBSSxnQkFFdEJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxLQUNLTyxFQUFXbUIsRUFBTXFDLFlBQVlxSyxlQUFlLEtBR3JEdE8sRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsS0FDSUYsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVStLLE1BQU9sRCxFQUFhbFcsSUFBSSx1QkFDN0JrVyxFQUFhbFcsSUFBSSxrQkFFdEJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxLQUNLTyxFQUFXbUIsRUFBTXFDLFlBQVl5TyxXQUFXLEtBR2pEMVMsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsS0FDSUYsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVStLLE1BQU9sRCxFQUFhbFcsSUFBSSwwQkFDN0JrVyxFQUFhbFcsSUFBSSxxQkFFdEJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxLQUNLTyxFQUFXbUIsRUFBTXFDLFlBQVkwTyxjQUFjLEtBR3BEM1MsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsS0FDSUYsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVStLLE1BQU9sRCxFQUFhbFcsSUFBSSxnQ0FDN0JrVyxFQUFhbFcsSUFBSSwyQkFFdEJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxLQUNLTyxFQUFXbUIsRUFBTXFDLFlBQVkyTyxvQkFBb0IsS0FHMUQ1UyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsV0FBRCxLQUNJRixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVK0ssTUFBT2xELEVBQWFsVyxJQUFJLHlCQUM3QmtXLEVBQWFsVyxJQUFJLG9CQUV0Qm1PLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELEtBQ3lELE1BQXBETyxFQUFXbUIsRUFBTXFDLFlBQVk0TyxhQUFhLEdBQWdCOUssRUFBYWxXLElBQUksU0FBVzRPLEVBQVdtQixFQUFNcUMsWUFBWTRPLGFBQWEsS0FHekk3UyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsV0FBRCxLQUNJRixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVK0ssTUFBT2xELEVBQWFsVyxJQUFJLGtCQUM3QmtXLEVBQWFsVyxJQUFJLGFBRXRCbU8sRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsS0FDS3pNLEtBQUsrZSxpQkFBaUI1USxFQUFNcUMsWUFBWTZPLFlBR2pEOVMsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsS0FDSUYsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVStLLE1BQU9sRCxFQUFhbFcsSUFBSSxtQkFDN0JrVyxFQUFhbFcsSUFBSSxjQUV0Qm1PLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELEtBQ0t6TSxLQUFLK2UsaUJBQWlCNVEsRUFBTXFDLFlBQVl1SCxZQUdqRHhMLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxXQUFELEtBQ0lGLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVUrSyxNQUFPbEQsRUFBYWxXLElBQUksa0JBQzdCa1csRUFBYWxXLElBQUksYUFFdEJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxLQUNLek0sS0FBSytlLGlCQUFpQjVRLEVBQU1xQyxZQUFZcUMsY0FHakR0RyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsV0FBRCxLQUNJRixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVK0ssTUFBT2xELEVBQWFsVyxJQUFJLHdCQUM3QmtXLEVBQWFsVyxJQUFJLG1CQUV0Qm1PLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELEtBQ0t6TSxLQUFLK2UsaUJBQWlCNVEsRUFBTXFDLFlBQVltSCxzQkFHakRwTCxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsV0FBRCxLQUNJRixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVK0ssTUFBT2xELEVBQWFsVyxJQUFJLG1CQUM3QmtXLEVBQWFsVyxJQUFJLGNBRXRCbU8sRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsS0FDS3pNLEtBQUsrZSxpQkFBaUI1USxFQUFNcUMsWUFBWWdDLGFBR2pEakcsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsS0FDSUYsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVStLLE1BQU9sRCxFQUFhbFcsSUFBSSxvQkFDN0JrVyxFQUFhbFcsSUFBSSxlQUV0Qm1PLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELEtBQ0swQixFQUFNcUMsWUFBWThPLGVBS2xDdkosRUFBZ0IvVixLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixXQUN4RDdJLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVUsV0FDaEJKLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVDLFdBQVksR0FBSUMsVUFBVSxXQUNoQ0osRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLE9BQUQsQ0FBUW5MLEdBQUcsWUFBYTJELEtBQUssWUFBWXVKLFFBQVN4TyxLQUFLK0osTUFBTTZVLFNBQVM3ZixLQUFLaUIsT0FBU3NVLEVBQWFsVyxJQUFJLGVBRXpHbU8sRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVUMsV0FBWSxHQUFJQyxVQUFVLFlBQ2hDSixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsT0FBRCxDQUFRbkwsR0FBRyxhQUFhaWUsU0FBVXZmLEtBQUttTyxNQUFNb1EsUUFBU3RaLEtBQUssVUFBVXVKLFFBQVN4TyxLQUFLa1UsS0FBS25WLEtBQUtpQixPQUFTc1UsRUFBYWxXLElBQUksZ0JBTy9JaWdCLEdBQWF0UixVQUFZLENBQ3JCb0YsU0FBVTFHLElBQVVmLEtBQUtKLFdBQ3pCbUksT0FBUWhILElBQVVqQixNQUFNRixXQUN4QnNVLFNBQVVuVCxJQUFVZixLQUFLSixXQUN6QmtHLFlBQWEvRSxJQUFVeE0sT0FDdkJ3WSxZQUFhaE0sSUFBVXhNLFFBUVpnVyx5QkFOZixTQUF5QjlHLEdBQ3JCLE1BQU8sQ0FDSHFDLFlBQWFyQyxFQUFNK0csTUFBTTFFLGNBSWxCeUUsQ0FBeUJvSixVQ3hWeEMsTUFBTW1CLFdBQW9CblQsWUFDdEI0QixZQUFZbEUsR0FDUm1FLE1BQU1uRSxHQUNOL0osS0FBS21PLE1BQVEsQ0FDVHFDLFlBQWF6RyxFQUFNeUcsYUFHM0JvRCxxQkFDSSxJQUFJN0osTUFBQ0EsR0FBUy9KLFVBQ1krRSxJQUF0QmdGLEVBQU15RyxhQUE2QnpHLEVBQU15RyxZQUFZaUMsU0FBVzFJLEVBQU0wSSxRQUN0RXpTLEtBQUtxUSxlQUFldEcsR0FHNUI4SiwwQkFBMEJDLFFBQ08vTyxJQUF6QitPLEVBQVN0RCxhQUE2QnNELEVBQVN0RCxZQUFZaUMsU0FBV3FCLEVBQVNyQixRQUMvRXpTLEtBQUtxUSxlQUFleUQsR0FHNUJ6RCxlQUFldEcsR0FDWEEsRUFBTW9JLFNBQVNnQyxFQUFtQjlELGVBQWUsQ0FBRW9DLE9BQVExSSxFQUFNMEksUUFBV0osSUFDeEUsSUFBSTdCLEVBQWN2UyxPQUFPOE4sT0FBTyxHQUFJc0csR0FDcENyUyxLQUFLc08sU0FBUyxDQUNWa0MsbUJBSVpsRSxTQUNJLFlBQWtDdkgsSUFBM0IvRSxLQUFLbU8sTUFBTXFDLGtCQUF1RXpMLElBQTFDL0UsS0FBS21PLE1BQU1xQyxZQUFZaVAsZ0JBQWlDbFQsRUFBQUMsRUFBQTFILGNBQUEsVUFDbkc2SCxVQUFVLGVBQWUrUyxVQUFRLEVBQ2pDQyxJQUFLM2YsS0FBS21PLE1BQU1xQyxZQUFZaVAsa0JBS3hDRCxHQUFZelMsVUFBWSxDQUNwQnlELFlBQWEvRSxJQUFVeE0sT0FDdkJ3VCxPQUFPaEgsSUFBVWQsUUFTTnNLLHlCQU5mLFNBQXlCOUcsR0FDckIsTUFBTyxDQUNIcUMsWUFBYXJDLEVBQU0rRyxNQUFNMUUsY0FJbEJ5RSxDQUF5QnVLLG1CQ3pDeEMsTUFBTUksV0FBZ0J2VCxZQUNsQjRCLGNBQ0lDLFFBQ0FsTyxLQUFLbU8sTUFBUSxDQUNUMFIsV0FBWSxFQUNaQyxZQUFhLEdBQ2JDLG1CQUFtQixHQUczQkMsaUJBQWlCQyxFQUFVMVksR0FDdkJ2SCxLQUFLc08sU0FBUyxDQUFFdVIsVUFBV3RZLEVBQU91WSxZQUFhLFlBQWFDLG1CQUFtQixJQUduRkcsbUJBQW1CRCxFQUFVMVksR0FDekJ2SCxLQUFLc08sU0FBUyxDQUFFdVIsVUFBV3RZLEVBQU91WSxZQUFhLGNBQWVDLG1CQUFtQixJQUdyRkksY0FBY0YsR0FDVixNQUFNbFcsTUFBQ0EsR0FBUy9KLEtBQ2hCa00sRUFBVWtMLFFqQlBYLFdBQ0gsSUFBSTdKLEVBQVN2TCxVQUFVLEdBQ25Cb2UsRUFBY3BlLFVBQ2xCLE9BQU91TCxFQUFPbkUsUUFBUSxZQUFhLFNBQVU1SyxFQUFPK0ksR0FDaEQsSUFBSThZLEVBQVlDLFNBQVMvWSxHQUFTLEVBQ2xDLE9BQU82WSxFQUFZQyxLaUJFREUsQ0FBYWpNLEVBQWFsVyxJQUFJLHNCQUF1QjZoQixFQUFTTyxTQUFVUCxFQUFTekYsYUFBY2xHLEVBQWFsVyxJQUFJLFVBQVdrVyxFQUFhbFcsSUFBSSxVQUFXLEtBQ3JLMkwsRUFBTW9JLFNBQVNnQyxFQUFtQnhDLGVBQWVzTyxNQUd6RFEsWUFBWUMsR0FDUixPQUFRQSxHQUFRLElBQUl2VCxLQUFLdVQsR0FBTXRULGNBQWdCLEtBR25ENEcsU0FBU2lNLEVBQVVVLEVBQVNDLEdBQ3hCLE1BQU16UyxNQUFDQSxHQUFTbk8sS0FDaEJtTyxFQUFNMFIsV0FBYSxFQUNuQjFSLEVBQU0yUixZQUFjLEdBQ3BCLElBQUllLEVBQXdCLGNBQVpGLEVBQTBCQyxFQUFZWCxFQUFTWSxVQUMzREMsRUFBMEIsZ0JBQVpILEVBQTRCQyxFQUFZWCxFQUFTYSxZQUVuRTlnQixLQUFLK0osTUFBTWdYLFNBQVNkLEVBQVM5TSxPQUFRME4sRUFBV0MsR0FDaEQ5Z0IsS0FBS3NPLFNBQVMsQ0FBRXlSLG1CQUFtQixJQUV2Q2lCLGFBQWFmLEVBQVVVLEdBQ25CLEdBQWdCLGNBQVpBLEVBQXlCLENBQ3pCLElBQUlNLEVBQVcsSUFBSTlULEtBQUssS0FBTSxHQUFJLElBSWxDLE9BSEtuTixLQUFLeWdCLFlBQVlSLEVBQVNhLGVBQzNCRyxFQUFXLElBQUk5VCxNQUFLLElBQUlBLE1BQU8rVCxRQUFRLElBQUkvVCxLQUFLOFMsRUFBU2EsYUFBYUssVUFBWSxTQUUvRUYsRUFDSixHQUFnQixnQkFBWk4sRUFBMkIsQ0FDbEMsSUFBSVMsRUFBVyxJQUFJalUsS0FBSyxLQUFNLEVBQUcsR0FJakMsT0FIS25OLEtBQUt5Z0IsWUFBWVIsRUFBU1ksYUFDM0JPLEVBQVcsSUFBSWpVLE1BQUssSUFBSUEsTUFBTytULFFBQVEsSUFBSS9ULEtBQUs4UyxFQUFTWSxXQUFXTSxVQUFZLFNBRTdFQyxHQUdmQyxRQUFRQyxFQUFhWCxHQUNqQixJQUFJMVQsRUFBWSxJQUFJRSxLQVdwQixNQVZnQixjQUFad1QsRUFDSzNnQixLQUFLeWdCLFlBQVlhLEVBQVlULGFBQzlCNVQsRUFBWSxJQUFJRSxLQUFLbVUsRUFBWVQsWUFHbEIsZ0JBQVpGLElBQ0YzZ0IsS0FBS3lnQixZQUFZYSxFQUFZUixlQUM5QjdULEVBQVksSUFBSUUsS0FBS21VLEVBQVlSLGVBR2xDN1QsRUFHWHNVLG9CQUNJLE1BQU14WCxNQUFDQSxFQUFEb0UsTUFBUUEsR0FBU25PLEtBRXZCLElBQUl3aEIsRUFBa0J6WCxFQUFNdVgsWUFBWUcsYUFBZWxWLEVBQUFDLEVBQUExSCxjQUFBLFlBQ25EeUgsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFdBQUQsQ0FBYWlVLEtBQU0xZ0IsS0FBS3FoQixRQUFRdFgsRUFBTXVYLFlBQWEsYUFBZUksUUFBUzFoQixLQUFLZ2hCLGFBQWFqWCxFQUFNdVgsWUFBYSxhQUM1R0ssV0FBWTNoQixLQUFLZ1UsU0FBU2pWLEtBQUtpQixLQUFNK0osRUFBTXVYLFlBQWEsYUFBZTVpQixLQUFNLFFBQVNrakIsZ0JBQWlCdE4sRUFBYWxXLElBQUksWUFDeEh5akIsVUFBVSxFQUFNQyxXQUFXLEVBQzNCQyxZQUFhL2hCLEtBQUtnZ0IsaUJBQWlCamhCLEtBQUtpQixLQUFNK0osRUFBTXVYLFlBQWF2WCxFQUFNeEMsVUFDckUsS0FDTnlhLEVBQW9CalksRUFBTXVYLFlBQVlHLGFBQWVsVixFQUFBQyxFQUFBMUgsY0FBQSxZQUNyRHlILEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxXQUFELENBQWFpVSxLQUFNMWdCLEtBQUtxaEIsUUFBUXRYLEVBQU11WCxZQUFhLGVBQWlCVyxRQUFTamlCLEtBQUtnaEIsYUFBYWpYLEVBQU11WCxZQUFhLGVBQzlHSyxXQUFZM2hCLEtBQUtnVSxTQUFTalYsS0FBS2lCLEtBQU0rSixFQUFNdVgsWUFBYSxlQUFpQjVpQixLQUFNLE1BQU9rakIsZ0JBQWlCdE4sRUFBYWxXLElBQUksWUFDeEh5akIsVUFBVSxFQUFNQyxXQUFXLEVBQzNCQyxZQUFhL2hCLEtBQUtrZ0IsbUJBQW1CbmhCLEtBQUtpQixLQUFNK0osRUFBTXVYLFlBQWF2WCxFQUFNeEMsVUFDdkUsS0FDTjJhLEVBQWVuWSxFQUFNdVgsWUFBWWEsWUFDakM1VixFQUFBQyxFQUFBMUgsY0FBQSxLQUFHNkgsVUFBVyxtQkFBb0JpTix3QkFBeUIsQ0FBRUMsT0FBUU4sV0FBUzZJLE9BQVM1VCxRQUFTeE8sS0FBS21nQixjQUFjcGhCLEtBQUtpQixLQUFNK0osRUFBTXVYLFlBQWF2WCxFQUFNeEMsU0FDckosS0FDTixPQUFPZ0YsRUFBQUMsRUFBQTFILGNBQUEsT0FBSzZILFVBQVd3QixFQUFNMFIsWUFBYzlWLEVBQU14QyxNQUFRLFdBQWEsTUFDakVpYSxFQUNBUSxFQUNBRSxHQUdUNVYsU0FDSSxNQUFNdkMsTUFBQ0EsR0FBUy9KLEtBQ2hCLE9BQ0l1TSxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSxpQkFDWEosRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVStLLE1BQU96TixFQUFNdVgsWUFBWWQsU0FBVTlULFdBQVksSUFDcEQzQyxFQUFNdVgsWUFBWWQsVUFDdkJqVSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFXQyxXQUFZLEdBQUk4SyxNQUFPeEssRUFBV2pELEVBQU11WCxZQUFZVCxZQUMxRDdULEVBQVdqRCxFQUFNdVgsWUFBWVQsWUFDbEN0VSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFXQyxXQUFZLEdBQUk4SyxNQUFPeEssRUFBV2pELEVBQU11WCxZQUFZUixjQUMxRDlULEVBQVdqRCxFQUFNdVgsWUFBWVIsY0FDbEN2VSxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFXQyxXQUFZLElBQ25CSCxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSxXQUNWM00sS0FBS3VoQix3QkFPOUIzQixHQUFRN1MsVUFBWSxDQUNoQm9GLFNBQVUxRyxJQUFVZixLQUFLSixXQUN6QmdYLFlBQWE3VixJQUFVeE0sT0FBT3FMLFdBQzlCL0MsTUFBT2tFLElBQVVkLE9BQ2pCb1csU0FBVXRWLElBQVVmLEtBQUtKLFdBQ3pCK1gsV0FBWTVXLElBQVVmLEtBQUtKLFlBT2hCMksseUJBTGYsV0FDSSxNQUFPLElBSUlBLENBQXlCMkssVUN6SHhDLE1BQU0wQyxXQUFrQmpXLFlBQ3BCNEIsWUFBWWxFLEdBQ1JtRSxNQUFNbkUsR0FDTi9KLEtBQUttTyxNQUFRLENBQ1RvVSxnQkFBaUIsQ0FBRTlQLFFBQVMsRUFBRytQLFFBQVMsSUFDeENDLFlBQWEsRUFDYkMsU0FBVSxHQUNWQyxZQUFhLEdBQ2JDLFdBQVcsRUFDWGxSLFNBQVMsRUFDVG1SLFlBQVksR0FFaEI3aUIsS0FBSzhpQixZQUFhLEtBQ2xCOWlCLEtBQUsraUIsd0JBQTBCQyxvQkFBUyxJQUFLaGpCLEtBQUsraUIseUJBRXREbFAsMEJBQTBCQyxHQUN0QjlULEtBQUtzTyxTQUFTd0YsR0FHbEJGLHFCQUNJNVQsS0FBS2lqQixXQUdUQSxXQUNJLE1BQU1sWixNQUFDQSxFQUFEb0UsTUFBUUEsR0FBU25PLEtBRXZCLElBQUlrakIsRUFBWSxDQUNaelEsT0FBUTFJLEVBQU15RyxZQUFZaUMsT0FDMUIrUCxRQUFTclUsRUFBTXdVLFlBQ2ZRLFVBQVdoVixFQUFNc1UsWUFDakJDLFNBQVV2VSxFQUFNdVUsVUFFcEIzWSxFQUFNb0ksU0FBU2dDLEVBQW1CN0MsYUFBYTRSLElBR25EM1Isa0JBQ0ksTUFBTXhILE1BQUNBLEVBQURvRSxNQUFRQSxHQUFTbk8sS0FDdkIsSUFBSXdpQixFQUFVclUsRUFBTW9VLGdCQUFnQnBQLFFBQVUsRUFBSSxHQUFLaEYsRUFBTW9VLGdCQUFnQkMsUUFDN0V6WSxFQUFNb0ksU0FBU2dDLEVBQW1CNUMsZ0JBQWdCLENBQUVpUixRQUFTQSxFQUFTWSxNQUFPLE1BRWpGTCwwQkFDSS9pQixLQUFLdVIsa0JBR1Q4UixzQkFBc0JuakIsR0FDZEEsRUFBS2lULFFBQVVqVCxFQUFLc2dCLFdBR3hCeGdCLEtBQUtzTyxTQUFTLENBQUVpVSxnQkFBaUIsQ0FBRXBQLFFBQVMsRUFBR3FQLFFBQVN0aUIsS0FDeERGLEtBQUsraUIsMkJBR1RPLHVCQUF1QnBqQixHQUNuQkYsS0FBS3VqQixlQUFlcmpCLEVBQUtpVCxPQUFRLEtBQzdCblQsS0FBS3NPLFNBQVMsQ0FBRWlVLGdCQUFpQixDQUFFcFAsT0FBUWpULEVBQUtpVCxPQUFRcVAsUUFBU3RpQixFQUFLc2dCLFdBQWMsS0FDaEZ4Z0IsS0FBS3VSLHNCQUtqQmlTLHdCQUdBQyxZQUNJLE1BQU10VixNQUFDQSxHQUFTbk8sS0FDaEIsSUFBSW1ULEVBQVNoRixFQUFNb1UsZ0JBQWdCcFAsUUFDbkIsSUFBWkEsUUFBMkJwTyxJQUFWb08sSUFHckJuVCxLQUFLK2dCLFNBQVM1TixHQUNkblQsS0FBS3NPLFNBQVMsQ0FBRWlVLGdCQUFpQixDQUFFcFAsUUFBUyxFQUFHcVAsUUFBUyxPQUU1RHpCLFNBQVM1TixFQUFRME4sRUFBV0MsR0FDeEIsTUFBTS9XLE1BQUNBLEdBQVMvSixLQUVoQixJQUFJa2pCLEVBQVksQ0FBRS9QLE9BQVFBLEVBQVFWLE9BQVExSSxFQUFNeUcsWUFBWWlDLE9BQVFvTyxVQUFXQSxFQUFXQyxZQUFhQSxHQUN2Ry9XLEVBQU1vSSxTQUFTZ0MsRUFBbUIzQyxhQUFhMFIsRUFBV2xqQixLQUFLbU8sTUFBTXlVLFVBQVc1aUIsS0FBS21PLE1BQU11RCxVQUMzRjFSLEtBQUtzTyxTQUFTLENBQUVzVSxXQUFXLEVBQU1sUixTQUFTLEVBQU9tUixZQUFZLElBR2pFYSxjQUFjakIsRUFBYUMsR0FDdkIsSUFBSXZVLE1BQUNBLEdBQVNuTyxVQUNHK0UsSUFBYjJkLEdBQTBCdlUsRUFBTXVVLFdBQWFBLElBQzdDdlUsRUFBTXVVLFNBQVdBLEdBRXJCdlUsRUFBTXNVLFlBQWNBLEVBQ3BCemlCLEtBQUtzTyxTQUFTLENBQ1ZILFVBRUpuTyxLQUFLaWpCLFdBRVRVLGNBQ0ksSUFBSUMsRUFBWTVqQixLQUFLK0osTUFBTTZaLFVBQ3ZCQyxFQUFXRCxFQUFVM2pCLElBQUksQ0FBQzZqQixFQUFNdmMsSUFDekJnRixFQUFBQyxFQUFBMUgsY0FBQ2lmLEdBQUQsQ0FDSHpDLFlBQWF3QyxFQUNidmMsTUFBT0EsRUFDUHpJLGdCQUFpQnlJLElBQ2pCd1osU0FBVS9nQixLQUFLK2dCLFNBQVNoaUIsS0FBS2lCLFNBR3JDLE9BQU91TSxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSxrQkFBbUJpWCxFQUFVdmlCLE9BQVMsRUFDeER3aUIsRUFDQXRYLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLGdCQUFnQjJILEVBQWFsVyxJQUFJLGFBR3hEbWxCLGVBQWVwUSxFQUFRaEQsR0FDbkIsUUFBZ0NwTCxJQUE1Qi9FLEtBQUsrSixNQUFNbUosY0FBOEJsVCxLQUFLK0osTUFBTW1KLGFBQWE3UixPQUFTLEdBQUtyQixLQUFLK0osTUFBTW1KLGFBQWE4USxLQUFLM2xCLEdBQUtBLEVBQUU4VSxTQUFXQSxHQUFTLENBQ3ZJLElBQUkyUSxFQUFPOWpCLEtBQUsrSixNQUFNbUosYUFBYXpMLE9BQU9wSixHQUFLQSxFQUFFOFUsU0FBV0EsR0FBUSxHQUNwRW5ULEtBQUtzTyxTQUFTLENBQUV1VSxXQUFZaUIsRUFBS2pCLFlBQWMsS0FDbkIsbUJBQWIxUyxHQUNQQSxPQUtoQjhULGlCQUFpQnJCLEdBQ2I1aUIsS0FBS3NPLFNBQVMsQ0FBRXNVLGNBRXBCc0IsZUFBZXhTLEdBQ1gxUixLQUFLc08sU0FBUyxDQUFFb0QsWUFFcEJ5UyxlQU9JLElBQUlDLEVBTmdCLENBQ2hCLENBQUV0bUIsS0FBTSxPQUFRdVYsTUFBTyxJQUN2QixDQUFFdlYsS0FBTSxRQUFTdVYsTUFBTyxJQUN4QixDQUFFdlYsS0FBTSxVQUFXdVYsTUFBTyxJQUMxQixDQUFFdlYsS0FBTSxHQUFJdVYsTUFBTyxLQUVRcFQsSUFBSSxDQUFDb2tCLEVBQU85YyxJQUNoQ2dGLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVUzTixpQkFBa0J5SSxJQUFTbUYsV0FBWTJYLEVBQU1oUixNQUFPeFAsTUFBTyxDQUFFeWdCLFdBQVksV0FFbkUsS0FBZkQsRUFBTXZtQixLQUNGeU8sRUFBQUMsRUFBQTFILGNBQUEsWUFBT3dQLEVBQWFsVyxJQUFJaW1CLEVBQU12bUIsS0FBTyxZQUNuQ3lPLEVBQUFDLEVBQUExSCxjQUFBLGNBSWxCLE9BQU95SCxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSx3QkFBd0J5WCxHQUVsREcsZUFDSSxHQUFJdmtCLEtBQUsrSixNQUFNeWEsYUFBZSxFQUMxQixPQUFPalksRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLE1BQUQsQ0FDSGdZLHFCQUFxQixFQUNyQkMscUJBQXFCLEVBQ3JCQyxnQkFBaUIsRUFDakJDLFlBQWF0USxFQUFhbFcsSUFBSSxvQkFDOUJ5bUIsYUFBY3ZRLEVBQWFsVyxJQUFJLHFCQUMvQjBtQixjQUFjLEVBQ2RwQyxTQUFVMWlCLEtBQUttTyxNQUFNdVUsU0FDckI4QixhQUFjeGtCLEtBQUsrSixNQUFNeWEsYUFDekJkLGNBQWUxakIsS0FBSzBqQixjQUFjM2tCLEtBQUtpQixNQUN2QytrQixRQUFTN1ksRUFBVW9CLGVBRy9CaEIsU0FDSSxNQUFNNkIsTUFBQ0EsR0FBU25PLEtBRWhCLE9BQU91TSxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSx1QkFDbEJKLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLFVBQ1hKLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLGdCQUFnQjJILEVBQWFsVyxJQUFJLGdCQUNoRG1PLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLFdBQ1hKLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVDLFdBQVksSUFDbEJILEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLGtCQUNYSixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVak8sTUFBT3dCLEtBQUttTyxNQUFNeVUsVUFBVzVPLFNBQVVoVSxLQUFLaWtCLGlCQUFpQmxsQixLQUFLaUIsTUFDeEUwVSxNQUFTSixFQUFhbFcsSUFBSSxhQUFlNG1CLFdBQVcsVUFDdkRobEIsS0FBS21PLE1BQU0wVSxZQUFjdFcsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVWpPLE1BQU93QixLQUFLbU8sTUFBTXVELFFBQVNzQyxTQUFVaFUsS0FBS2trQixlQUFlbmxCLEtBQUtpQixNQUM5RjBVLE1BQVNKLEVBQWFsVyxJQUFJLFdBQWE0bUIsV0FBVyxZQUc5RHpZLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVDLFdBQVksSUFDbEJILEVBQUFDLEVBQUExSCxjQUFBLFlBQ0l5SCxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVd1ksU0FBUyxFQUNmaE4sSUFBTWlOLElBQVNsbEIsS0FBSzhpQixZQUFjb0MsR0FDbENDLFlBQWE3USxFQUFhbFcsSUFBSSxzQkFDOUJnbkIsS0FBTXBsQixLQUFLK0osTUFBTW1KLGNBQWdCbFQsS0FBSytKLE1BQU1tSixhQUFhN1IsT0FBUyxFQUNsRWdrQixTQUFVcmxCLEtBQUt3akIscUJBQXFCemtCLEtBQUtpQixNQUN6Q2dVLFNBQVVoVSxLQUFLcWpCLHNCQUFzQnRrQixLQUFLaUIsTUFDMUNzbEIsU0FBVXRsQixLQUFLc2pCLHVCQUF1QnZrQixLQUFLaUIsTUFDM0NxUyxLQUFNclMsS0FBSytKLE1BQU1tSixhQUNqQjFVLE1BQU8yUCxFQUFNb1UsZ0JBQWdCQyxRQUM3QitDLFdBQVcsU0FDWEMsVUFBVSxhQUNkalosRUFBQUMsRUFBQTFILGNBQUEsT0FBSzZILFVBQVUsa0JBQWtCNkIsUUFBU3hPLEtBQUt5akIsVUFBVTFrQixLQUFLaUIsT0FDMUR1TSxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVyxtQkFBb0I2SyxNQUFPbEQsRUFBYWxXLElBQUksT0FBUXdiLHdCQUF5QixDQUFFQyxPQUFRTixXQUFTa00sV0FDL0duUixFQUFhbFcsSUFBSSxZQU10Q21PLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLG1CQUNWM00sS0FBS21rQixlQUNMbmtCLEtBQUsyakIsZUFFVnBYLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLDBCQUNWM00sS0FBS3VrQixrQkFLdEJqQyxHQUFVdlYsVUFBWSxDQUNsQm9GLFNBQVUxRyxJQUFVZixLQUFLSixXQUN6QmtHLFlBQWEvRSxJQUFVeE0sT0FBT3FMLFdBQzlCc1osVUFBV25ZLElBQVVqQixNQUFNRixXQUMzQmthLGFBQWMvWSxJQUFVZCxPQUN4QnVJLGFBQWN6SCxJQUFVakIsT0FFNUI4WCxHQUFVdE4sYUFBZSxDQUNyQjlCLGFBQWMsSUFXSCtCLHlCQVJmLFNBQXlCOUcsR0FDckIsTUFBTyxDQUNIK0UsYUFBYy9FLEVBQU0rRyxNQUFNaEMsYUFDMUIwUSxVQUFXelYsRUFBTStHLE1BQU0wTyxVQUN2QlksYUFBY3JXLEVBQU0rRyxNQUFNd1EsaUJBSW5CelEsQ0FBeUJxTix3QkN0TnhDLE1BQU1xRCxXQUFrQnRaLFlBQ3BCNEIsY0FDSUMsUUFDQWxPLEtBQUttTyxNQUFRLENBQ1QwSyxPQUFRLEdBQ1JnRCxhQUFjLEdBSXRCaEksNEJBQ0k3VCxLQUFLNGUsV0FHVGdILFdBQVd0a0IsRUFBSWlHLEdBQ1hzZSxXQUFXLEtBQ1A3bEIsS0FBS3NPLFNBQVMsQ0FDVnVLLE9BQVF2WCxFQUNSdWEsWUFBYXRVLE1BSXpCcVgsV0FDOEIsS0FBdEI1ZSxLQUFLbU8sTUFBTTBLLFFBQ1g3WSxLQUFLc08sU0FBUyxDQUNWdUssT0FBUSxHQUNSZ0QsYUFBYyxJQUkxQjlDLE9BQU9GLEVBQVF0UixHQUNJLEtBQVhzUixFQUNBN1ksS0FBSzRsQixXQUFXL00sRUFBUXRSLEdBRXhCdkgsS0FBSzRlLFdBR2JrSCxZQUNJOWxCLEtBQUsrWSxPQUE2QixRQUF0Qi9ZLEtBQUttTyxNQUFNMEssT0FBbUIsR0FBSyxNQUFPLEdBRTFEa04sWUFBWWpULEdBQ1IsSUFBSS9FLEVBQVcsR0FFZixHQURBQSxFQUFXQSxFQUFTL00sT0FBUWhCLEtBQUsrSixNQUFNaWMsYUFBZWhtQixLQUFLK0osTUFBTWljLFlBQVlsVCxJQUFVLElBQ25GNkMsRUFBZ0IzVixLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixVQUMvRCxDQUNJLE1BQU14SixFQUFlVyxFQUFBQyxFQUFBMUgsY0FBQ21oQixHQUFELENBQWN4VCxPQUFRSyxFQUFLTCxPQUFRbU0sU0FBVTVlLEtBQUs0ZSxTQUFTN2YsS0FBS2lCLE1BQVF5WCxZQUFhelgsS0FBSytKLE1BQU0wTixjQUNySDFKLEVBQVdBLEVBQVMvTSxPQUFPLENBQUMsQ0FDeEJ1RyxNQUFPLEdBQ1BwSCxRQUFTeUwsS0FtQmpCLE9BZkl1SixFQUFlblYsS0FBSytKLE1BQU0wTixZQUFZM1Asb0JBQW9Cc04sU0FBVXRDLEtBRXBFL0UsRUFBV0EsRUFBUy9NLE9BQU8sQ0FBQyxDQUN4QnVHLE1BQU8sRUFDUHBILFFBQVNvTSxFQUFBQyxFQUFBMUgsY0FBQ29oQixHQUFELENBQVkxVixZQUFhc0MsUUFJdEMyQyxFQUFpQnpWLEtBQUsrSixNQUFNME4sWUFBWTNQLG9CQUFvQnNOLFlBRTVEckgsRUFBV0EsRUFBUy9NLE9BQU8sQ0FBQyxDQUN4QnVHLE1BQU8sR0FDUHBILFFBQVNvTSxFQUFBQyxFQUFBMUgsY0FBQ3FoQixHQUFELENBQWMxVCxPQUFRSyxFQUFLTCxhQUdyQ2hGLEVBQUtNLEVBQVUsUUFBUyxRQUFROU4sSUFBS21tQixHQUNqQ0EsRUFBTWptQixTQUdyQmttQixhQUVJLElBQUlsTSxPQUFzQ3BWLElBQXpCL0UsS0FBSytKLE1BQU1vUSxZQUF5Qm5hLEtBQUsrSixNQUFNb1EsWUFBYUMsRUFDekV4TixFQUFVLENBQUMsQ0FBQ3JGLE1BQU8sRUFBR3VGLEtBQU1xTixFQUFZRSxLQUFLQyxHQUFhLElBQVZBLEVBQUUvUyxPQUFXdUYsS0FBTUQsT0FBUXlILEVBQWFsVyxJQUFJLGdCQUM1RixDQUFDbUosTUFBTyxHQUFJdUYsS0FBTXFOLEVBQVlFLEtBQUtDLEdBQWEsS0FBVkEsRUFBRS9TLE9BQVl1RixLQUFNRCxPQUFReUgsRUFBYWxXLElBQUksaUJBQ25GLENBQUNtSixNQUFPLEdBQUl1RixLQUFNcU4sRUFBWUUsS0FBS0MsR0FBYSxLQUFWQSxFQUFFL1MsT0FBWXVGLEtBQU1ELE9BQVF5SCxFQUFhbFcsSUFBSSxtQkFDbkYsQ0FBQ21KLE1BQU8sR0FBSXVGLEtBQU1xTixFQUFZRSxLQUFLQyxHQUFhLEtBQVZBLEVBQUUvUyxPQUFZdUYsS0FBTUQsT0FBTyxLQUNyRSxRQUFrQzlILElBQTlCL0UsS0FBSytKLE1BQU1rUSxnQkFBcUUsbUJBQTdCamEsS0FBSytKLE1BQU1rUSxlQUE4QixDQUM1RixJQUFJQyxFQUFlbGEsS0FBSytKLE1BQU1rUSxzQkFDWGxWLElBQWZtVixHQUE0QkEsRUFBYTdZLE9BQU8sSUFFaER1TCxFQUFVYSxFQUFLeU0sRUFBYWphLElBQUkwTixJQUNyQixDQUNIcEcsTUFBTW9HLEVBQU9wRyxNQUNic0YsT0FBT2MsRUFBT2QsT0FDZEMsS0FBTXFOLEVBQVlFLEtBQUtDLEdBQUdBLEVBQUUvUyxRQUFRb0csRUFBT3BHLE9BQU91RixRQUV2RDlMLE9BQU80TCxHQUFVLFVBRzVCLE9BQU9BLEVBR1hOLFNBQ0ksTUFBTXZDLE1BQUNBLEdBQVMvSixLQUNoQixJQUFJekMsRUFBSSxFQUVSLE1BQU1nZSxFQUQ4QixRQUF0QnZiLEtBQUttTyxNQUFNMEssVVpyR056RCxFWXNHc0JwVixLQUFLK0osTUFBTTBOLFlBQVkzUCxvQkFBb0JzTixVWnJHdkVFLFNBQVdGLEVBQVNHLFlBQVkrUSxVQUQ5QyxJQUFvQmxSLEVZdUduQixNQUFNeEksRUFBVTVNLEtBQUtxbUIsYUFFckIsT0FDSTlaLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVc1SixLQUFPOEksV0FDeEJVLEVBQUFDLEVBQUExSCxjQUFDeWhCLEVBQUQsQ0FBVzNaLFFBQVNBLElBQ3BCTCxFQUFBQyxFQUFBMUgsY0FBQzBoQixFQUFELENBQ0kxTixTQUFVOVksS0FBSzRlLFNBQVM3ZixLQUFLaUIsTUFDN0JpWixhQUFjalosS0FBSytZLE9BQU9oYSxLQUFLaUIsTUFDL0JnWixhQUFjaFosS0FBS21PLE1BQU0wTixZQUN6QmhELE9BQVE3WSxLQUFLbU8sTUFBTTBLLE9BQ25CL1osSUFBSyxXQUNMMlksWUFBYTFOLEVBQU0wTixZQUNuQjBDLFlBQWFwUSxFQUFNb1EsWUFDbkI3WSxHQUFJLE1BQ0ppYSxZQUFhQSxFQUFjLGFBQWUsU0FDMUM5VCxPQUFRc0MsRUFBTXRDLFFBQ2Q4RSxFQUFBQyxFQUFBMUgsY0FBQzJoQixFQUFELEtBZlUsS0FBTSxDQUFDbGEsRUFBQUMsRUFBQTFILGNBQUM0aEIsR0FBRCxDQUFlNW5CLHVCQUF3QnZCLElBQUtrSyxPQUFRc0MsRUFBTXRDLE9BQVErTSxTQUFVeFUsS0FBSzRlLFNBQVM3ZixLQUFLaUIsTUFBUXlYLFlBQWExTixFQUFNME4sZUFnQnRJa1AsS0FJTDVjLEVBQU1tTCxPQUFTbkwsRUFBTW1MLE1BQU03VCxPQUFPLEdBQUswSSxFQUFNbUwsTUFBTWpWLElBQUksQ0FBQzZTLEVBQU12TCxLQUMxRCxJQUFJakcsRUFBSyxPQUFTL0QsSUFDbEIsTUFBTXdRLEVBQVcvTixLQUFLK2xCLFlBQVlqVCxHQUNsQyxPQUFPdkcsRUFBQUMsRUFBQTFILGNBQUMwaEIsRUFBRCxDQUNIMVQsS0FBTUEsRUFDTmdHLFNBQVU5WSxLQUFLNGUsU0FBUzdmLEtBQUtpQixNQUM3QmlaLGFBQWNqWixLQUFLK1ksT0FBT2hhLEtBQUtpQixNQUMvQmdaLGFBQWNoWixLQUFLbU8sTUFBTTBOLFlBQ3pCaEQsT0FBUTdZLEtBQUttTyxNQUFNMEssT0FDbkIvWixJQUFLLFFBQVV5SSxFQUNmMFMsZUFBZ0JsUSxFQUFNa1EsZ0JBQWtCbFEsRUFBTWtRLGVBQWVsYixLQUFLaUIsTUFDbEVxWixpQkFBa0J0UCxFQUFNc1Asa0JBQW9CdFAsRUFBTXNQLGlCQUFpQnRhLEtBQUtpQixNQUN4RWdZLFlBQWFqTyxFQUFNaU8sYUFBZWpPLEVBQU1pTyxZQUFZalosS0FBS2lCLE1BQ3pEZ1gsZUFBZ0JqTixFQUFNaU4sZ0JBQWtCak4sRUFBTWlOLGVBQWVqWSxLQUFLaUIsTUFDbEV5WCxZQUFhMU4sRUFBTTBOLFlBQ25CMEMsWUFBYXBRLEVBQU1vUSxZQUNuQjdZLEdBQUlBLEVBQ0ptRyxPQUFRc0MsRUFBTXRDLFFBQ2Q4RSxFQUFBQyxFQUFBMUgsY0FBQzJoQixFQUFELENBQXFCNUssWUFBYTdiLEtBQUttTyxNQUFNME4sYUFDeEM5TixNQU1iaEUsRUFBTW1MLE9BQWdDLElBQXZCbkwsRUFBTW1MLE1BQU03VCxRQUFnQmtMLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVFLFVBQVUsWUFBWTJILEVBQWFsVyxJQUFJLGNBT2hIdW5CLEdBQVU1WSxVQUFZLENBQ2xCb0YsU0FBVTFHLElBQVVmLEtBQUtKLFdBQ3pCMGIsWUFBYXZhLElBQVVmLEtBQ3ZCMk8saUJBQWtCNU4sSUFBVWYsS0FDNUJ1UCxlQUFnQnhPLElBQVVmLEtBQzFCc04sWUFBYXZNLElBQVVmLEtBQ3ZCc00sZUFBZ0J2TCxJQUFVZixLQUMxQitNLFlBQWFoTSxJQUFVeE0sT0FDdkJrYixZQUFhMU8sSUFBVWpCLE1BQ3ZCL0MsT0FBUWdFLElBQVVkLFFBUVBzSyx5QkFOZixTQUF5QjlHLEdBQ3JCLE1BQU8sQ0FDSCtHLE1BQU8vRyxFQUFNK0csTUFBTUEsUUFJYSxLQUFNLEtBQU0sQ0FBRTBSLFNBQVMsR0FBaEQzUixDQUF3RDBRLFVDbkx2RSxNQUFNa0IsV0FBbUJ4YSxZQUNyQjRCLFlBQVlsRSxHQUNSbUUsTUFBTW5FLEdBQ04vSixLQUFLbU8sTUFBUSxDQUNUMlksbUJBQW9CLENBQ2hCcFMsTUFBT0osRUFBYWxXLElBQUksY0FDeEJJLE1BQU8sR0FFWHVvQixXQUFZLElBR3BCekIsU0FBUzBCLEdBQ0wsSUFBSXRTLE1BQUVBLEdBQVNzUyxHQUNYeG9CLE1BQUVBLEdBQVN3b0IsR0FDWEYsbUJBQUNBLEdBQXNCOW1CLEtBQUttTyxNQUM1QjNQLElBQVVzb0IsRUFBbUJ0b0IsUUFDN0Jzb0IsRUFBbUJwUyxNQUFRQSxFQUMzQm9TLEVBQW1CdG9CLE1BQVFBLEVBRU0sSUFBN0Jzb0IsRUFBbUJ0b0IsT0FBNEMsSUFBN0Jzb0IsRUFBbUJ0b0IsTUFDckR3QixLQUFLc08sU0FBUyxDQUNWd1ksbUJBQW9CLENBQUVwUyxNQUFPLEdBQUlsVyxPQUFRLEdBQ3pDdW9CLFdBQVksSUFDYixLQUNDL21CLEtBQUtzTyxTQUFTLENBQ1Z3WSxxQkFDQUMsV0FBWSxJQUNiLEtBQVEvbUIsS0FBSytKLE1BQU1pSyxTQUFTZ1QsRUFBUWhuQixLQUFLbU8sTUFBTTRZLGdCQUl0RC9tQixLQUFLc08sU0FBUyxDQUNWd1kscUJBQ0FDLFdBQVksSUFDYixLQUFRL21CLEtBQUsrSixNQUFNaUssU0FBU2dULEVBQVFobkIsS0FBS21PLE1BQU00WSxlQUs5REUsaUJBQWlCMU0sR0FDYnZhLEtBQUtzTyxTQUFTLENBQ1Z5WSxXQUFZeE0sR0FDYixLQUNDdmEsS0FBSytKLE1BQU1pSyxTQUFTaFUsS0FBS21PLE1BQU0yWSxtQkFBb0J2TSxLQUkzRDJNLDBCQUNJLElBQUlDLFlBQUNBLEdBQWVubkIsS0FBSytKLE1BQ3JCcWQsRUFBcUIsR0FJekIsT0FIQUEsRUFBcUJELEVBQVlsbkIsSUFBS29uQixJQUMzQixDQUFFM1MsTUFBTzJTLEVBQVdDLElBQUs5b0IsTUFBTzZvQixFQUFXRSxTQUsxRGpiLFNBQ0ksSUFBSThhLEVBQXFCcG5CLEtBQUtrbkIsMEJBQzlCLE9BQVEzYSxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSwwQkFDbkJKLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxTQUFELENBQVVDLFdBQVksSUFDVSxNQUEzQjFNLEtBQUtvbkIsb0JBQ0ZwbkIsS0FBS29uQixtQkFBbUIvbEIsT0FBUyxHQUNqQ2tMLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLHVCQUNYSixFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVNUksTUFBTyxDQUFFd1AsTUFBTyxRQUN0Qm1VLFlBQVksRUFDWnhrQixRQUFTb2tCLEVBQ1QxUyxNQUFPMVUsS0FBS21PLE1BQU0yWSxtQkFBbUJwUyxNQUNyQzRRLFNBQVV0bEIsS0FBS3NsQixTQUFTdm1CLEtBQUtpQixNQUM3QnluQixZQUFhblQsRUFBYWxXLElBQUksZUFFbENtTyxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSxZQUkzQkosRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVUMsV0FBWSxJQUNsQkgsRUFBQUMsRUFBQTFILGNBQUEsa0JBQ0p5SCxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsU0FBRCxDQUFVQyxXQUFZLElBQ2xCSCxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSxrQkFDK0IsSUFBeEMzTSxLQUFLbU8sTUFBTTJZLG1CQUFtQnRvQixPQUF1RCxJQUF4Q3dCLEtBQUttTyxNQUFNMlksbUJBQW1CdG9CLFFBQ3pFK04sRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFVBQUQsQ0FBVzBZLFlBQWE3USxFQUFhbFcsSUFBSSxxQkFBc0JzcEIsU0FBVTFuQixLQUFLaW5CLGlCQUFpQmxvQixLQUFLaUIsTUFBTzJuQixVQUFXLEdBQUlDLFVBQVcsQ0FBRUMsTUFBTyxLQUNsSnRiLEVBQUFDLEVBQUExSCxjQUFBLE9BQUs2SCxVQUFVLGNBTW5Da2EsR0FBVzlaLFVBQVksQ0FDbkJvRixTQUFVMUcsSUFBVWYsS0FBS0osV0FDekIwSixTQUFVdkksSUFBVWYsS0FBS0osV0FDekI2YyxZQUFhMWIsSUFBVWpCLE1BQU1GLFlBRWpCdWMsazFCQ3JGaEIsSUFBTTNXLEdBQW1CLENBQ3JCNlcsV0FBWSxHQUNadGYsT0FBUSxFQUNSMGIsVUFBVyxFQUNYVCxTQUFVLEdBQ1ZvRixXQUFZLEdBQ1pDLGVBQWUsRUFDZkMsWUFBWSxHQUVWQyxlQUNGLFNBQUFBLElBQWMsSUFBQUMsRUFBQSxtR0FBQUMsQ0FBQW5vQixLQUFBaW9CLElBQ1ZDLEVBQUFFLEdBQUFwb0IsS0FBQXFvQixHQUFBSixHQUFBdnFCLEtBQUFzQyxRQUNLbU8sTUFBUSxDQUNUZ1osWUFBYSxHQUNialgscUJBSk1nWSx5UEFEQzdiLG1FQVFNLElBQUFpYyxFQUFBdG9CLEtBQ2pCQSxLQUFLK0osTUFBTW9JLFNBQVNnQyxzQkFBbUJ6RCxlQUFlLFNBQUMyQixHQUNuRCxJQUFJOFUsRUFBY2xwQixPQUFPOE4sT0FBTyxHQUFJckwsS0FBS3FSLE1BQU1yUixLQUFLQyxVQUFVMFIsS0FDOURpVyxFQUFLaGEsU0FBUyxDQUNWNlksb0RBS0hyb0IsRUFBS3VYLEdBQ1ZyVyxLQUFLc08sK0hBQUxpYSxDQUFBLEdBQ0t6cEIsRUFBTXVYLEVBQU1uVSxPQUFPMUQsK0NBSWJ3b0IsRUFBUUQsR0FBWSxJQUFBeUIsRUFBQXhvQixLQUMxQmtRLEVBQW9CbFEsS0FBS21PLE1BQXpCK0IsaUJBQ0xBLEVBQWlCNlcsV0FBYUEsRUFDOUI3VyxFQUFpQnpJLE9BQVN1ZixFQUFPeG9CLE1BQ2pDMFIsRUFBaUJpVCxVQUFZLEVBQzdCalQsRUFBaUI4WCxZQUFhLEVBQzlCaG9CLEtBQUsrSixNQUFNb0ksU0FBU2dDLHNCQUFtQmxFLFNBQVNDLElBQ2hEbFEsS0FBS3NPLFNBQVMsQ0FBRTRCLG9CQUFvQixXQUFNLElBQ2pDQSxFQUFvQnNZLEVBQUtyYSxNQUF6QitCLGlCQUNMQSxFQUFpQjhYLFlBQWEsRUFDOUJRLEVBQUtsYSxTQUFTLENBQUU0Qiw2REFJVnVTLEVBQWFDLEdBQVUsSUFDNUJ4UyxFQUFvQmxRLEtBQUttTyxNQUF6QitCLGlCQUNMQSxFQUFpQmlULFVBQVlWLEVBQzdCdlMsRUFBaUJ3UyxTQUFXQSxFQUM1QjFpQixLQUFLK0osTUFBTW9JLFNBQVNnQyxzQkFBbUJsRSxTQUFTQyxJQUNoRGxRLEtBQUtzTyxTQUFTLENBQUU0QixnRUFJaEIsT0FBT2xRLEtBQUttTyxNQUFNZ1osWUFBWTlsQixPQUFTLEdBQ25Da0wsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsQ0FBVUUsVUFBVSx3QkFDaEJKLEVBQUFDLEVBQUExSCxjQUFDMmpCLEdBQUQsQ0FDSXpVLFNBQVVoVSxLQUFLMG9CLGVBQWUzcEIsS0FBS2lCLE1BQ25DbW5CLFlBQWFubkIsS0FBS21PLE1BQU1nWix5REFNcENubkIsS0FBSzJvQixVQUFVN0MsaURBSWYsT0FBT3JPLEtBQVkzUCxvQkFBb0JzTixTQUFTRSxTQUFXbUMsS0FBWTNQLG9CQUFvQnNOLFNBQVNHLFlBQVkrUSwwQ0FFM0csSUFBQXNDLEVBQUE1b0IsS0FDRStKLEVBQWdCL0osS0FBaEIrSixNQUFPb0UsRUFBU25PLEtBQVRtTyxNQUNSMGEsRUFBa0IxYSxFQUFNMmEsaUJBQW1CLGlCQUFtQixHQUNwRSxPQUNJdmMsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLFNBQUQsS0FDSUYsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLHFCQUFELENBQXNCK0ssTUFBT2xELEVBQWFsVyxJQUFJLGNBRXRDNEIsS0FBSytvQixjQUNUeGMsRUFBQUMsRUFBQTFILGNBQUMySCxFQUFBLE9BQUQsQ0FBUXhILEtBQUssVUFBVTZILEtBQUssUUFBUTBCLFFBQVN4TyxLQUFLZ3BCLGdCQUFnQmpxQixLQUFLaUIsTUFBUXdYLE1BQU9sRCxFQUFhbFcsSUFBSSxrQkFDbEdrVyxFQUFhbFcsSUFBSSxtQkFJMUJtTyxFQUFBQyxFQUFBMUgsY0FBQzJILEVBQUEsbUJBQUQsQ0FBb0J3YyxzQkFBc0IsRUFBTUMsc0JBQXNCLEVBQU1DLGNBQWVucEIsS0FBS29wQixtQkFBcUJ6YyxVQUFXa2MsR0FDNUh0YyxFQUFBQyxFQUFBMUgsY0FBQ3VrQixHQUFELENBQVdwUixJQUFLLFNBQUMvTSxHQUFELE9BQVUwZCxFQUFLRCxVQUFZemQsR0FBTXVNLFlBQWFBLEtBQWFoUSxPQUFRMEcsRUFBTStCLGlCQUFpQnpJLFNBRXRHOEUsRUFBQUMsRUFBQTFILGNBQUEsT0FBSzZILFVBQVUsZ0JBQ1hKLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxNQUFELENBQU82YywrQkFBK0IsRUFDbENDLGFBQWEsRUFDYnpFLGNBQWMsRUFDZDBFLG1CQUFvQmxWLEVBQWFsVyxJQUFJLDJCQUNyQ3dtQixZQUFhdFEsRUFBYWxXLElBQUksb0JBQzlCc2tCLFNBQVUxaUIsS0FBS21PLE1BQU0rQixpQkFBaUJ3UyxTQUN0QzhCLGFBQWN6YSxFQUFNMGYsV0FDcEIvRixjQUFlMWpCLEtBQUswakIsY0FBYzNrQixLQUFLaUIsTUFDdkNnb0IsV0FBWWhvQixLQUFLbU8sTUFBTStCLGlCQUFpQjhYLFdBQ3hDakQsUUFBUzdZLEVBQVVvQix5REFVbkQyYSxHQUFLbGIsVUFBWSxDQUNib0YsU0FBVTFHLElBQVVmLEtBQUtKLFdBQ3pCbWYsV0FBWWhlLElBQVVkLFFBVVhzSyx5QkFQZixTQUF5QjlHLEdBQ3JCLE1BQU8sQ0FDSHNiLFdBQVl0YixFQUFNK0csTUFBTXVVLGFBS2pCeFUsQ0FBeUJnVCx3ekJDNUhsQ3lCLGVBQ0YsU0FBQUEsSUFBYyxtR0FBQUMsQ0FBQTNwQixLQUFBMHBCLEdBQUFFLEdBQUE1cEIsS0FBQTZwQixHQUFBSCxHQUFBaHNCLEtBQUFzQyw4UEFEQXFNLG1FQUtNck0sS0FBVCtKLE1BQ0RvSSxTQUFTZ0Msc0JBQW1CbEUsU0FBUyxDQUN2QzhXLFdBQVksR0FDWnRmLE9BQVEsRUFDUjBiLFVBQVcsRUFDWFQsU0FBVSxHQUNWb0YsV0FBWSxHQUNaQyxlQUFlLHNDQUluQixPQUNJeGIsRUFBQUMsRUFBQTFILGNBQUEsT0FBSzZILFVBQVUsNENBQ1hKLEVBQUFDLEVBQUExSCxjQUFDMkgsRUFBQSxlQUFELENBQWdCcWQsUUFBUSxHQUNwQnZkLEVBQUFDLEVBQUExSCxjQUFDaWxCLEdBQUQsK0NBT3BCTCxHQUFJamUsVUFBWSxDQUNaMEcsU0FBVTFHLElBQVVmLEtBQUtKLFlBU2QySyx5QkFMZixXQUNJLE1BQU8sSUFJSUEsQ0FBeUJ5VSxJQ2xDekJNLFVBTkYsa0JBQ1R6ZCxFQUFBQyxFQUFBMUgsY0FBQSxPQUFLNkgsVUFBVSxvQkFDWEosRUFBQUMsRUFBQTFILGNBQUNtbEIsR0FBRCx1RkNlT0MsRUFsQlUsQ0FDckJuaUIsS0FEcUIsV0FNakIsSUFBSS9FLEVBQVV6RCxPQUFPQyxJQUFJMnFCLFlBQ3pCMVMsSUFBWTFQLEtBQUsvRSxHQUdqQjJGLEVBQVEsS0FFWndKLFNBWnFCLFdBYWpCLE1BQU0sSUFBSXBPLE1BQU0sa0hDUlRxbUIsRUFKS0MsMEJBQWdCLENBQ2hDblYsTUFBT0EsOERDQ0lvViwyQkFDYi9kLEVBQUFDLEVBQUExSCxjQUFDeWxCLEVBQUEvZCxFQUFELENBQWFnZSxvQkFBb0IsU0FDcEJDLGtCQUFrQixVQUM3QmxlLEVBQUFDLEVBQUExSCxjQUFDNGxCLEVBQUFsZSxFQUFELFFDREVtZSxHQUFnQkMsTUFFaUJDLG1CQ0ZuQ0MsRURHY0Msc0JBQ1ZYLEVBQ0FTLEVBQ0FHLGtCQUNJTCxFQUNJTSwwQkFBZ0JDLEtBQ2hCRCwwQkFBZ0JDLElBQWlCQyxPQUFpQ0MsRUFBU0MsZUNQM0ZDLEVBQVluWixTQUFXMlksRUFBTTNZLFNBRTdCLElBQU1vWixFQUFlM3BCLFNBQVM0cEIsZUFBZSxtQkFDN0MsSUFBSUQsRUFHQSxNQUFNeG5CLE1BQU0sZ0NBRlp1bkIsRUFBWXZqQixPQUloQnVFLGlCQUNJQyxFQUFBQyxFQUFBMUgsY0FBQzJtQixFQUFBLFNBQUQsQ0FBVVgsTUFBT0EsR0FDYnZlLEVBQUFDLEVBQUExSCxjQUFDNG1CLEVBQUFsZixFQUFELE9BRUorZSIsImZpbGUiOiJ1c2Vycy1idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNTUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZG5uLm5vZGVNb2R1bGVzLlJlYWN0OyIsIm1vZHVsZS5leHBvcnRzID0gd2luZG93LmRubi5ub2RlTW9kdWxlcy5Db21tb25Db21wb25lbnRzOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gd2luZG93LmRubi5ub2RlTW9kdWxlcy5SZWFjdFJlZHV4OyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5kbm4ubm9kZU1vZHVsZXMuUmVkdXg7IiwiY29uc3QgYXBwbGljYXRpb25TZXR0aW5ncyA9IHtcclxuICAgIGluaXQoYXBwbGljYXRpb25TZXR0aW5ncykge1xyXG4gICAgICAgIGlmICghYXBwbGljYXRpb25TZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLmFwcGxpY2F0aW9uU2V0dGluZ3MgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvblNldHRpbmdzID0gYXBwbGljYXRpb25TZXR0aW5nczsgICAgICBcclxuICAgIH0sXHJcbiAgICBhcHBsaWNhdGlvblNldHRpbmdzOiBudWxsXHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IGFwcGxpY2F0aW9uU2V0dGluZ3M7IiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZG5uLlVzZXJzLkNvbW1vbkFjdGlvbnM7IiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZG5uLm5vZGVNb2R1bGVzLlJlZHV4VGh1bms7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZG5uLm5vZGVNb2R1bGVzLlJlYWN0RE9NOyIsIm1vZHVsZS5leHBvcnRzID0gd2luZG93LmRubi5ub2RlTW9kdWxlcy5SZWR1eEltbXV0YWJsZVN0YXRlSW52YXJpYW50OyIsIm1vZHVsZS5leHBvcnRzID0gd2luZG93LmRubi5Vc2Vycy5Db21tb25SZWR1Y2VyczsiLCJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5kbm4ubm9kZU1vZHVsZXMuUmVkdXhEZXZUb29sczsiLCJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5kbm4ubm9kZU1vZHVsZXMuUmVkdXhEZXZUb29sc0xvZ01vbml0b3I7IiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZG5uLm5vZGVNb2R1bGVzLlJlZHV4RGV2VG9vbHNEb2NrTW9uaXRvcjsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL1Jvb3QucHJvZFwiKTtcclxufSBlbHNlIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vUm9vdC5kZXZcIik7XHJcbn1cclxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwibW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZG5uLm5vZGVNb2R1bGVzLk1vbWVudDsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5kbm4ubm9kZU1vZHVsZXMuVGhyb3R0bGVEZWJvdW5jZTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJzdmd7ZmlsbDojQzhDOEM4fXN2Zzpob3ZlcntmaWxsOiM2RjcyNzN9c3ZnOmFjdGl2ZXtmaWxsOiMxRTg4QzN9LmhlYWRlci1yb3d7cGFkZGluZzoxMHB4IDAgMTBweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjQzhDOEM4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uaGVhZGVyLXJvdyAuZG5uLWdyaWQtY2VsbHtwYWRkaW5nOjAgMTVweH0uaGVhZGVyLXJvdyAuZG5uLWdyaWQtY2VsbC5lbXB0eXt0ZXh0LWluZGVudDotMTAwcHg7b3ZlcmZsb3c6aGlkZGVufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwic3Zne2ZpbGw6I0M4QzhDOH1zdmc6aG92ZXJ7ZmlsbDojNkY3MjczfXN2ZzphY3RpdmV7ZmlsbDojMUU4OEMzfS5jb2xsYXBzaWJsZS1jb21wb25lbnQtdXNlcnMgLmNvbGxhcHNpYmxlLWhlYWRlci11c2Vycy5mYWxzZXtib3JkZXItdG9wOjJweCBzb2xpZCAjMUU4OEMzO2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMxRTg4QzM7bWFyZ2luLXRvcDotMnB4fS5fMXA4allVa04ySURvaXFQbTBpVl9mQ3twYWRkaW5nOjE1cHggMCA3LjVweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjQzhDOEM4fS5fMXA4allVa04ySURvaXFQbTBpVl9mQy5jbG9zZWR7cGFkZGluZzowO2JvcmRlci1ib3R0b206bm9uZX0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLnVzZXItYXZhdGFye3RleHQtYWxpZ246Y2VudGVyfS5fMXA4allVa04ySURvaXFQbTBpVl9mQyAudXNlci1hdmF0YXIgaW1ne2JvcmRlci1yYWRpdXM6MjVweDt3aWR0aDo0MHB4fS5fMXA4allVa04ySURvaXFQbTBpVl9mQyAudXNlci1kZXRhaWwtcm93e2Zsb2F0OmxlZnQ7d2lkdGg6MTAwJX0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLnVzZXItZGV0YWlsLXJvdz5kaXZ7d2lkdGg6MTAwJTtmbG9hdDpsZWZ0fS5fMXA4allVa04ySURvaXFQbTBpVl9mQyAudXNlci1lbWFpbHN7cGFkZGluZy1sZWZ0OjExcHggIWltcG9ydGFudH0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLmVtYWlsLWxpbms+YXtjb2xvcjojMUU4OEMzO3RleHQtZGVjb3JhdGlvbjpub25lfS5fMXA4allVa04ySURvaXFQbTBpVl9mQyAudXNlci1uYW1lc3twYWRkaW5nLWxlZnQ6MnB4ICFpbXBvcnRhbnR9Ll8xcDhqWVVrTjJJRG9pcVBtMGlWX2ZDIC51c2VyLW5hbWVzIGg2e2ZvbnQtc2l6ZToxNXB4fS5fMXA4allVa04ySURvaXFQbTBpVl9mQyAudXNlci1uYW1lcyBwe3RleHQtdHJhbnNmb3JtOmxvd2VyY2FzZX0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLnVzZXItam9pbmVke3BhZGRpbmctbGVmdDoyMnB4ICFpbXBvcnRhbnR9Ll8xcDhqWVVrTjJJRG9pcVBtMGlWX2ZDIC5kZWxldGVke3RleHQtZGVjb3JhdGlvbjpsaW5lLXRocm91Z2h9Ll8xcDhqWVVrTjJJRG9pcVBtMGlWX2ZDIC5leHRlbnNpb24tYWN0aW9ue21hcmdpbi1sZWZ0OjVweDtmbG9hdDpyaWdodDtjdXJzb3I6cG9pbnRlcn0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLmV4dGVuc2lvbi1hY3Rpb24gc3Zne3dpZHRoOjIwcHg7ZmxvYXQ6bGVmdDtoZWlnaHQ6MjBweH0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLmV4dGVuc2lvbi1hY3Rpb24uZmFsc2Ugc3Zne2ZpbGw6IzFFODhDM30uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLmV4dGVuc2lvbi1hY3Rpb24uZmFsc2Ugc3ZnOmhvdmVye2ZpbGw6IzRCNEU0Rn0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLmV4dGVuc2lvbi1hY3Rpb24ubW9yZS1tZW51e3Bvc2l0aW9uOnJlbGF0aXZlfS5fMXA4allVa04ySURvaXFQbTBpVl9mQyAuZG5uLWdyaWQtY2VsbHtwYWRkaW5nOjAgMTVweH0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLmRubi1ncmlkLWNlbGwgcHt3b3JkLXdyYXA6YnJlYWstd29yZH0uXzFwOGpZVWtOMklEb2lxUG0waVZfZkMgLnBhY2thZ2UtbmFtZXt3b3JkLXdyYXA6YnJlYWstd29yZDtkaXNwbGF5OmlubGluZTt2ZXJ0aWNhbC1hbGlnbjp0b3B9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiZXh0ZW5zaW9uRGV0YWlsUm93XCI6IFwiXzFwOGpZVWtOMklEb2lxUG0waVZfZkNcIlxufTsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcInN2Z3tmaWxsOiNDOEM4Qzh9c3ZnOmhvdmVye2ZpbGw6IzZGNzI3M31zdmc6YWN0aXZle2ZpbGw6IzFFODhDM30uZG5uLXVzZXItbWVudS5tZW51LWl0ZW17cGFkZGluZzoxMHB4IDIwcHg7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6YmxhY2t9LmRubi11c2VyLW1lbnUubWVudS1pdGVtOmhvdmVye2JhY2tncm91bmQtY29sb3I6I0VGRjBGMDtjb2xvcjojMUU4OEMzfS5kbm4tdXNlci1tZW51Lm1lbnV7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6LTE4cHg7dG9wOjM1cHg7dGV4dC1hbGlnbjpsZWZ0O21pbi13aWR0aDoyMDBweDtib3JkZXI6MXB4IHNvbGlkICNDOEM4Qzg7Ym9yZGVyLXJhZGl1czozcHg7YmFja2dyb3VuZC1jb2xvcjojRkZGRkZGO2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjEwcHggMHB4O2JveC1zaGFkb3c6MCAwIDMwcHggMCByZ2JhKDAsMCwwLDAuMSk7ei1pbmRleDoxMDAwfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwic3Zne2ZpbGw6I0M4QzhDOH1zdmc6aG92ZXJ7ZmlsbDojNkY3MjczfXN2ZzphY3RpdmV7ZmlsbDojMUU4OEMzfS5kbm4tdXNlci1jaGFuZ2UtcGFzc3dvcmR7YmFja2dyb3VuZC1jb2xvcjojRkZGRkZGO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjQ3JTtsZWZ0OjMwcHg7ei1pbmRleDoxMDA7Ym94LXNpemluZzpib3JkZXItYm94O2Zsb2F0OmxlZnQ7Ym9yZGVyOjFweCBzb2xpZCAjQzhDOEM4O2JveC1zaGFkb3c6MCAwIDE3cHggMnB4IHJnYmEoMCwwLDAsMC4yKX0uZG5uLXVzZXItY2hhbmdlLXBhc3N3b3JkIC5kbm4tZ3JpZC1jZWxse3BhZGRpbmc6MTVweDttYXJnaW46MHB4O2Zsb2F0OmxlZnQ7dGV4dC1hbGlnbjpsZWZ0fS5kbm4tdXNlci1jaGFuZ2UtcGFzc3dvcmQgLmRubi1ncmlkLWNlbGwgLnRpdGxle3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtmb250LXdlaWdodDpib2xkO21hcmdpbi1ib3R0b206MjBweDtmbG9hdDpsZWZ0fS5kbm4tdXNlci1jaGFuZ2UtcGFzc3dvcmQgLmRubi1ncmlkLXN5c3RlbSAuZG5uLWdyaWQtY2VsbHtwYWRkaW5nOjBweCAxNXB4O21hcmdpbjowcHh9LmRubi11c2VyLWNoYW5nZS1wYXNzd29yZCAuZG5uLWdyaWQtc3lzdGVtIC5kbm4tZ3JpZC1jZWxsIC5yaWdodHtmbG9hdDpyaWdodH0uZG5uLXVzZXItY2hhbmdlLXBhc3N3b3JkIC5idXR0b25zIC5kbm4tZ3JpZC1jZWxsLmxlZnRCdG57cGFkZGluZy1yaWdodDowcHg7dGV4dC1hbGlnbjpyaWdodH0uZG5uLXVzZXItY2hhbmdlLXBhc3N3b3JkIC5idXR0b25zIC5kbm4tZ3JpZC1jZWxsLnJpZ2h0QnRue3BhZGRpbmctbGVmdDozMHB4fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwic3Zne2ZpbGw6I0M4QzhDOH1zdmc6aG92ZXJ7ZmlsbDojNkY3MjczfXN2ZzphY3RpdmV7ZmlsbDojMUU4OEMzfSN1c2Vycy1jb250YWluZXIgLmRubi11c2VyLW1lbnUubWVudS1wb3B1cHtwb3NpdGlvbjphYnNvbHV0ZX0jdXNlcnMtY29udGFpbmVyIC5kbm4tdXNlci1tZW51IC5kbm4tdXNlci1jaGFuZ2UtcGFzc3dvcmR7d2lkdGg6NDAwcHg7cmlnaHQ6LTE4cHg7dG9wOjM1cHg7bGVmdDphdXRvfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJzdmd7ZmlsbDojQzhDOEM4fXN2Zzpob3ZlcntmaWxsOiM2RjcyNzN9c3ZnOmFjdGl2ZXtmaWxsOiMxRTg4QzN9Ll8yVnZveWJxOW45RWUwc0w3R3NLRG5We2JveC1zaXppbmc6Ym9yZGVyLWJveDttYXJnaW4tdG9wOjEwcHh9Ll8yVnZveWJxOW45RWUwc0w3R3NLRG5WIC5uZXctdXNlci1ib3h7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO3BhZGRpbmc6MTBweCAwfS5fMlZ2b3licTluOUVlMHNMN0dzS0RuViAubmV3LXVzZXItYm94IC5ib3gtdGl0bGV7bWFyZ2luLWJvdHRvbToxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uXzJWdm95YnE5bjlFZTBzTDdHc0tEblYgLm5ldy11c2VyLWJveCAuZG5uLWdyaWQtc3lzdGVtLndpdGgtcmlnaHQtYm9yZGVyLmJvdHRvbS1oYWxme3BhZGRpbmctdG9wOjI1cHh9Ll8yVnZveWJxOW45RWUwc0w3R3NLRG5WIC5uZXctdXNlci1ib3ggLmRubi1zd2l0Y2gtY29udGFpbmVye3dpZHRoOjEwMCV9Ll8yVnZveWJxOW45RWUwc0w3R3NLRG5WIC5uZXctdXNlci1ib3ggLmRubi1zd2l0Y2gtY29udGFpbmVyIC5kbm4tc3dpdGNoe2Zsb2F0OnJpZ2h0fS5fMlZ2b3licTluOUVlMHNMN0dzS0RuViAubmV3LXVzZXItYm94IC5kbm4tc2luZ2xlLWxpbmUtaW5wdXQtd2l0aC1lcnJvciAuX19yZWFjdF9jb21wb25lbnRfdG9vbHRpcHttYXgtd2lkdGg6MjAwcHh9Ll8yVnZveWJxOW45RWUwc0w3R3NLRG5WIC5uZXctdXNlci1ib3ggLmRubi1ncmlkLWNlbGx7cGFkZGluZzoxMHB4IDE1cHg7Ym94LXNpemluZzpib3JkZXItYm94fS5fMlZ2b3licTluOUVlMHNMN0dzS0RuViAubmV3LXVzZXItYm94IC5kbm4tZ3JpZC1jZWxsPmhye2JvcmRlcjpub25lO2hlaWdodDoxcHg7Y29sb3I6I0M4QzhDODtiYWNrZ3JvdW5kLWNvbG9yOiNDOEM4Qzh9Ll8yVnZveWJxOW45RWUwc0w3R3NLRG5WIC5uZXctdXNlci1ib3ggLmRubi1ncmlkLWNlbGwgLnZlcnNpb24tZHJvcGRvd257d2lkdGg6MzEuMSU7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbi1yaWdodDoxMHB4O3ZlcnRpY2FsLWFsaWduOmJvdHRvbX0uXzJWdm95YnE5bjlFZTBzTDdHc0tEblYgLm5ldy11c2VyLWJveCAuZG5uLWdyaWQtY2VsbCAudmVyc2lvbi1kcm9wZG93bjpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfS5fMlZ2b3licTluOUVlMHNMN0dzS0RuViAubmV3LXVzZXItYm94IC5kbm4tZ3JpZC1jZWxsLm1vZGFsLWZvb3Rlcnt0ZXh0LWFsaWduOmNlbnRlcn0uXzJWdm95YnE5bjlFZTBzTDdHc0tEblYgLm5ldy11c2VyLWJveCAuZG5uLWdyaWQtY2VsbC5tb2RhbC1mb290ZXIgYnV0dG9ue21pbi13aWR0aDoxMDBweDttYXJnaW4tcmlnaHQ6MTBweH0uXzJWdm95YnE5bjlFZTBzTDdHc0tEblYgLm5ldy11c2VyLWJveCAuZW1haWwtbm90aWZpY2F0aW9uLWxpbmV7dGV4dC1hbGlnbjpjZW50ZXJ9Ll8yVnZveWJxOW45RWUwc0w3R3NLRG5WIC5uZXctdXNlci1ib3ggLmVtYWlsLW5vdGlmaWNhdGlvbi1saW5lIC5kbm4tY2hlY2tib3gtY29udGFpbmVyLnJpZ2h0e2Zsb2F0Om5vbmV9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwibmV3RXh0ZW5zaW9uTW9kYWxcIjogXCJfMlZ2b3licTluOUVlMHNMN0dzS0RuVlwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwic3Zne2ZpbGw6I0M4QzhDOH1zdmc6aG92ZXJ7ZmlsbDojNkY3MjczfXN2ZzphY3RpdmV7ZmlsbDojMUU4OEMzfS5wYXNzd29yZFN0cmVuZ3Roe2xpbmUtaGVpZ2h0OjEuNXB0O2hlaWdodDoxLjVwdDtwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6LTE4cHh9LnBhc3N3b3JkU3RyZW5ndGgud2Vha3tiYWNrZ3JvdW5kLWNvbG9yOnJlZDt3aWR0aDoyNSV9LnBhc3N3b3JkU3RyZW5ndGguZmFpcntiYWNrZ3JvdW5kLWNvbG9yOiNmNmQ1MDA7d2lkdGg6NzUlfS5wYXNzd29yZFN0cmVuZ3RoLnN0cm9uZ3tiYWNrZ3JvdW5kLWNvbG9yOmdyZWVuO3dpZHRoOjEwMCV9LnBhc3N3b3JkU3RyZW5ndGhMYWJlbHtwb3NpdGlvbjpyZWxhdGl2ZTt0b3A6LTQ1cHg7bGVmdDozMDhweDtmb250LXdlaWdodDo3MDB9LnBhc3N3b3JkU3RyZW5ndGhMYWJlbC53ZWFre2NvbG9yOnJlZH0ucGFzc3dvcmRTdHJlbmd0aExhYmVsLmZhaXJ7Y29sb3I6I2Y2ZDUwMH0ucGFzc3dvcmRTdHJlbmd0aExhYmVsLnN0cm9uZ3tjb2xvcjpncmVlbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcInN2Z3tmaWxsOiNDOEM4Qzh9c3ZnOmhvdmVye2ZpbGw6IzZGNzI3M31zdmc6YWN0aXZle2ZpbGw6IzFFODhDM30uXzItMExzeXczT3QtUWlFYVE3QWdaYm17Ym94LXNpemluZzpib3JkZXItYm94O2Zsb2F0OmxlZnQ7bWFyZ2luOjE1cHggMHB4fS5fMi0wTHN5dzNPdC1RaUVhUTdBZ1pibSAuZG5uLWdyaWQtY2VsbHttYXJnaW46NXB4IDBweDtmbG9hdDpsZWZ0O3RleHQtYWxpZ246bGVmdH0uXzItMExzeXczT3QtUWlFYVE3QWdaYm0gLmRubi1ncmlkLWNlbGwgLm91dGVyLWJveHtwYWRkaW5nOjEwcHggMzBweH0uXzItMExzeXczT3QtUWlFYVE3QWdaYm0gLmRubi1ncmlkLWNlbGwgLm91dGVyLWJveC5yaWdodHtib3JkZXItbGVmdDoxcHggc29saWQgI0M4QzhDOH0uXzItMExzeXczT3QtUWlFYVE3QWdaYm0gLmRubi1ncmlkLWNlbGwgLm91dGVyLWJveC5yaWdodCAuZG5uLWdyaWQtc3lzdGVte21hcmdpbjoxMHB4IDBweH0uXzItMExzeXczT3QtUWlFYVE3QWdaYm0gLmRubi1ncmlkLWNlbGwgLm91dGVyLWJveC5yaWdodCAuZG5uLWdyaWQtc3lzdGVtLmZpcnN0e21hcmdpbi1ib3R0b206NC41cHg7bWFyZ2luLXJpZ2h0OjBweDttYXJnaW4tbGVmdDowcHg7bWFyZ2luLXRvcDowcHh9Ll8yLTBMc3l3M090LVFpRWFRN0FnWmJtIC5kbm4tZ3JpZC1jZWxsIC5vdXRlci1ib3gucmlnaHQgLmRubi1ncmlkLXN5c3RlbSAuZG5uLWdyaWQtY2VsbHtwYWRkaW5nOjBweDttYXJnaW46MHB4fS5fMi0wTHN5dzNPdC1RaUVhUTdBZ1pibSAuZG5uLWdyaWQtY2VsbC5uby1wYWRkaW5ne3BhZGRpbmc6MHB4fS5fMi0wTHN5dzNPdC1RaUVhUTdBZ1pibSAuZG5uLWdyaWQtY2VsbCAudGl0bGV7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OmJvbGQ7bWFyZ2luLWJvdHRvbToyMHB4O2Zsb2F0OmxlZnR9Ll8yLTBMc3l3M090LVFpRWFRN0FnWmJtIC5kbm4tZ3JpZC1jZWxsIC5saW5re3BhZGRpbmc6MHB4O2ZvbnQtd2VpZ2h0OmJvbGQ7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6IzFFODhDM30uXzItMExzeXczT3QtUWlFYVE3QWdaYm0gLmRubi1ncmlkLWNlbGwgLmxpbms6YWN0aXZlLC5fMi0wTHN5dzNPdC1RaUVhUTdBZ1pibSAuZG5uLWdyaWQtY2VsbCAubGluazpob3Zlcntjb2xvcjojMjFBM0RBfS5fMi0wTHN5dzNPdC1RaUVhUTdBZ1pibSAuZG5uLWdyaWQtY2VsbCAubGluay5kaXNhYmxlZHtjb2xvcjojQzhDOEM4O2N1cnNvcjpkZWZhdWx0fS5fMi0wTHN5dzNPdC1RaUVhUTdBZ1pibSAuZG5uLWdyaWQtY2VsbCAubGluazp2aXNpdGVke2NvbG9yOiMyMjZGOUJ9Ll8yLTBMc3l3M090LVFpRWFRN0FnWmJtIC5idXR0b25zIC5kbm4tZ3JpZC1jZWxsLmxlZnRCdG57cGFkZGluZy1yaWdodDo1cHg7dGV4dC1hbGlnbjpyaWdodH0uXzItMExzeXczT3QtUWlFYVE3QWdaYm0gLmJ1dHRvbnMgLmRubi1ncmlkLWNlbGwucmlnaHRCdG57cGFkZGluZy1sZWZ0OjEwcHh9Ll8yLTBMc3l3M090LVFpRWFRN0FnWmJtIC5pc2xvYWRpbmcgLmlucHV0LXRvb2x0aXAtY29udGFpbmVyIGlucHV0e3BvaW50ZXItZXZlbnRzOm5vbmU7Ym9yZGVyLWNvbG9yOiNDOEM4Qzh9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwidXNlclNldHRpbmdzXCI6IFwiXzItMExzeXczT3QtUWlFYVE3QWdaYm1cIlxufTsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcInN2Z3tmaWxsOiNDOEM4Qzh9c3ZnOmhvdmVye2ZpbGw6IzZGNzI3M31zdmc6YWN0aXZle2ZpbGw6IzFFODhDM30udXNlci1kZXRhaWwtcm93IC5lZGl0LXByb2ZpbGV7ZmxvYXQ6bGVmdDtwYWRkaW5nOjBweDt3aWR0aDoxMDAlO2JvcmRlcjowcHg7bWluLWhlaWdodDo3MDBweDtwYWRkaW5nOjEwcHggMjVweH1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcInN2Z3tmaWxsOiNDOEM4Qzh9c3ZnOmhvdmVye2ZpbGw6IzZGNzI3M31zdmc6YWN0aXZle2ZpbGw6IzFFODhDM30jdXNlcnMtY29udGFpbmVyIC51c2VyLXJvbGUtcm93e3dpZHRoOjEwMCU7ZmxvYXQ6bGVmdDtwYWRkaW5nOjEzcHggMjBweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0fSN1c2Vycy1jb250YWluZXIgLnVzZXItcm9sZS1yb3c6bm90KDpsYXN0LWNoaWxkKXtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjQzhDOEM4fSN1c2Vycy1jb250YWluZXIgLnVzZXItcm9sZS1yb3cgZGl2LmVkaXQtcm93IGF7ZGlzcGxheTppbmxpbmUtYmxvY2t9I3VzZXJzLWNvbnRhaW5lciAudXNlci1yb2xlLXJvdyAuZG5uLWdyaWQtY2VsbHtib3gtc2l6aW5nOmJvcmRlci1ib3h9I3VzZXJzLWNvbnRhaW5lciAudXNlci1yb2xlLXJvdyAuZG5uLWdyaWQtY2VsbCAuYWN0aW9uc3tmbG9hdDpyaWdodDtib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjIwcHg7dGV4dC1hbGlnbjpyaWdodH0jdXNlcnMtY29udGFpbmVyIC51c2VyLXJvbGUtcm93IC5kbm4tZ3JpZC1jZWxsIC5hY3Rpb25zPmRpdnt0ZXh0LWFsaWduOmxlZnQ7ZmxvYXQ6bGVmdH0jdXNlcnMtY29udGFpbmVyIC51c2VyLXJvbGUtcm93IC5kbm4tZ3JpZC1jZWxsIC5hY3Rpb25zIHNwYW57ZmxvYXQ6bGVmdH0jdXNlcnMtY29udGFpbmVyIC51c2VyLXJvbGUtcm93IC5kbm4tZ3JpZC1jZWxsIC5hY3Rpb25zIHNwYW4gLmRubi1kYXktcGlja2Vye2hlaWdodDoxOXB4fSN1c2Vycy1jb250YWluZXIgLnVzZXItcm9sZS1yb3cgLmRubi1ncmlkLWNlbGwgLmFjdGlvbnMgc3BhbiAuZG5uLWRheS1waWNrZXIgLmNhbGVuZGFyLWljb257b3BhY2l0eTowO3dpZHRoOjE5cHg7aGVpZ2h0OjE5cHh9I3VzZXJzLWNvbnRhaW5lciAudXNlci1yb2xlLXJvdyAuZG5uLWdyaWQtY2VsbCAuYWN0aW9ucyBzcGFuIC5kbm4tZGF5LXBpY2tlciAuY2FsZW5kYXItaWNvbi5hY3RpdmV7b3BhY2l0eToxfSN1c2Vycy1jb250YWluZXIgLnVzZXItcm9sZS1yb3cgLmRubi1ncmlkLWNlbGwgLmFjdGlvbnMgc3BhbiBhIHN2Z3t3aWR0aDoyM3B4O2hlaWdodDoyM3B4fSN1c2Vycy1jb250YWluZXIgLnVzZXItcm9sZS1yb3cgLmRubi1ncmlkLWNlbGwgLmFjdGlvbnMgYXtmbG9hdDpsZWZ0O29wYWNpdHk6MH0jdXNlcnMtY29udGFpbmVyIC51c2VyLXJvbGUtcm93IC5kbm4tZ3JpZC1jZWxsIC5hY3Rpb25zOmhvdmVyIGF7ZGlzcGxheTppbmxpbmUtYmxvY2t9I3VzZXJzLWNvbnRhaW5lciAudXNlci1yb2xlLXJvdyAuZG5uLWdyaWQtY2VsbCAuYWN0aW9ucyBkaXYuZWRpdC1yb3cgYXtkaXNwbGF5OmlubGluZS1ibG9ja30jdXNlcnMtY29udGFpbmVyIC51c2VyLXJvbGUtcm93OmhvdmVyIC5kbm4tZ3JpZC1jZWxsIC5hY3Rpb25zIHNwYW4gLmRubi1kYXktcGlja2VyIC5jYWxlbmRhci1pY29ue29wYWNpdHk6MX0jdXNlcnMtY29udGFpbmVyIC51c2VyLXJvbGUtcm93OmhvdmVyIC5kbm4tZ3JpZC1jZWxsIC5hY3Rpb25zIGF7b3BhY2l0eToxfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwic3Zne2ZpbGw6I0M4QzhDOH1zdmc6aG92ZXJ7ZmlsbDojNkY3MjczfXN2ZzphY3RpdmV7ZmlsbDojMUU4OEMzfSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm17d2lkdGg6ODAlO21hcmdpbjoyMHB4IDEwJTtmbG9hdDpsZWZ0O2JveC1zaXppbmc6Ym9yZGVyLWJveH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC51c2VyLXJvbGVzLWxpc3R7ZmxvYXQ6bGVmdDt3aWR0aDoxMDAlO21hcmdpbjoxNXB4IDA7ZGlzcGxheTp0YWJsZTtjdXJzb3I6YXV0bztib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCAjQzhDOEM4O3RleHQtYWxpZ246bGVmdH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC51c2VyLXJvbGVzLWxpc3QgLnVzZXItcm9sZS1ib2R5e2NvbG9yOiM2RjcyNzN9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAudXNlci1yb2xlcy1saXN0IC51c2VyLXJvbGUtYm9keSAubm8tcm9sZXMtcm93e3dpZHRoOjEwMCU7ZmxvYXQ6bGVmdDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXdlaWdodDpib2xkO3BhZGRpbmc6MTNweCAyMHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC51c2VyLXJvbGVzLWxpc3QgLnVzZXItcm9sZS1oZWFkZXItcm93e2Rpc3BsYXk6dGFibGU7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI0M4QzhDODt3aWR0aDoxMDAlO2Zsb2F0OmxlZnQ7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzoxNXB4IDIwcHg7Ym94LXNpemluZzpib3JkZXItYm94O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC51c2VyLXJvbGVzLWxpc3QtcGFnaW5ne3RleHQtYWxpZ246bGVmdH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXJ7d2lkdGg6MTAwJTtmbG9hdDpsZWZ0O2JveC1zaXppbmc6Ym9yZGVyLWJveH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmhlYWRlci10aXRsZXt0ZXh0LWFsaWduOmxlZnQ7d2lkdGg6MTAwJTtmb250LXdlaWdodDpib2xkO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTttYXJnaW4tdG9wOjEwcHg7bWFyZ2luLWJvdHRvbToxMHB4fSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveHt3aWR0aDoxMDAlO2Zsb2F0OmxlZnQ7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNDOEM4Qzh9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IC5kbm4tZ3JpZC1jZWxse3BhZGRpbmc6MHB4fSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCAuc2VuZC1lbWFpbC1ib3h7d2lkdGg6MTAwJTtmbG9hdDpsZWZ0fSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCAuc2VuZC1lbWFpbC1ib3ggLmRubi1jaGVja2JveC1jb250YWluZXJ7ZmxvYXQ6bGVmdDttYXJnaW4tdG9wOjEwcHg7bWFyZ2luLXJpZ2h0OjEwcHh9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IC5zZW5kLWVtYWlsLWJveCAuZG5uLWNoZWNrYm94LWNvbnRhaW5lciAuY2hlY2tib3h7bWFyZ2luLWJvdHRvbTowcHh9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IC5zZW5kLWVtYWlsLWJveCBsYWJlbHtjb2xvcjojQzhDOEM4fSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCBzcGFue3dpZHRoOjEwMCU7ZGlzcGxheTppbmxpbmUtYmxvY2s7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNDOEM4Qzh9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IHNwYW4gLnJ3LWNvbWJvYm94e2Zsb2F0OmxlZnQ7d2lkdGg6MjUwcHg7aGVpZ2h0OjM0cHg7bGluZS1oZWlnaHQ6MzRweDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7cGFkZGluZzowO2JvcmRlcjpub25lO2NvbG9yOiM0NjI5MkI7Ym9yZGVyLXJhZGl1czowO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JveC1zaGFkb3c6bm9uZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCBzcGFuIC5ydy1jb21ib2JveCBidXR0b257ZGlzcGxheTpub25lfSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCBzcGFuIC5ydy1jb21ib2JveCA6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6I0M4QzhDOH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiAucnctY29tYm9ib3ggOi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6I0M4QzhDODtvcGFjaXR5OjF9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IHNwYW4gLnJ3LWNvbWJvYm94IDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojQzhDOEM4O29wYWNpdHk6MX0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiAucnctY29tYm9ib3ggOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojQzhDOEM4fSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCBzcGFuIC5ydy1jb21ib2JveCBpbnB1dHstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtwYWRkaW5nOjAgMCAwIDEycHg7aGVpZ2h0OjEwMCU7dmVydGljYWwtYWxpZ246dG9wO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IHNwYW4gLnJ3LWNvbWJvYm94IGlucHV0OjotbXMtY2xlYXJ7ZGlzcGxheTpub25lfSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCBzcGFuIC5ydy1jb21ib2JveCAucnctcG9wdXAtY29udGFpbmVye2JveC1zaGFkb3c6bm9uZX0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiAucnctY29tYm9ib3ggLnJ3LXBvcHVwLWNvbnRhaW5lciAucnctcG9wdXB7Ym9yZGVyLXJhZGl1czowcHg7Ym9yZGVyOjFweCBzb2xpZCAjQzhDOEM4O2JveC1zaGFkb3c6bm9uZX0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiAucnctY29tYm9ib3ggLnJ3LXBvcHVwLWNvbnRhaW5lciAucnctcG9wdXAgdWwucnctbGlzdHttYXJnaW46MDtwYWRkaW5nOjB9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IHNwYW4gLnJ3LWNvbWJvYm94IC5ydy1wb3B1cC1jb250YWluZXIgLnJ3LXBvcHVwIHVsLnJ3LWxpc3QgbGl7cGFkZGluZy1sZWZ0OjE1cHg7aGVpZ2h0OjMwcHg7bGluZS1oZWlnaHQ6MzBweDtjb2xvcjojNkY3MjczO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3cteDpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiAucnctY29tYm9ib3ggLnJ3LXBvcHVwLWNvbnRhaW5lciAucnctcG9wdXAgdWwucnctbGlzdCBsaTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNFRkYwRjA7Y29sb3I6IzFFODhDM30jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiAucnctY29tYm9ib3ggLnJ3LXBvcHVwLWNvbnRhaW5lciAucnctcG9wdXAgdWwucnctbGlzdCBsaS5ydy1zdGF0ZS1zZWxlY3RlZHtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2NvbG9yOiMxRTg4QzN9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IHNwYW4gLmFkZC1yb2xlLWJ1dHRvbntmbG9hdDpyaWdodDt0ZXh0LWFsaWduOnJpZ2h0O3dpZHRoOmF1dG87Zm9udC13ZWlnaHQ6Ym9sZGVyO292ZXJmbG93OmhpZGRlbjtjdXJzb3I6cG9pbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZy10b3A6MTBweH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiAuYWRkLXJvbGUtYnV0dG9uIHN2Z3tmaWxsOiM2RjcyNzN9I3VzZXJzLWNvbnRhaW5lciAudXNlcnJvbGVzLWZvcm0tZm9ybSAuaGVhZGVyIC5hZGQtYm94IHNwYW4gLmFkZC1yb2xlLWJ1dHRvbiBzcGFue2JvcmRlcjpub25lfSN1c2Vycy1jb250YWluZXIgLnVzZXJyb2xlcy1mb3JtLWZvcm0gLmhlYWRlciAuYWRkLWJveCBzcGFuIC5hZGQtcm9sZS1idXR0b24gLmV4dGVuc2lvbi1hY3Rpb257ZmxvYXQ6bGVmdH0jdXNlcnMtY29udGFpbmVyIC51c2Vycm9sZXMtZm9ybS1mb3JtIC5oZWFkZXIgLmFkZC1ib3ggc3BhbiBidXR0b25bcm9sZT1cXFwic2Vjb25kYXJ5XFxcIl17dmVydGljYWwtYWxpZ246bWlkZGxlO21hcmdpbjowIDAgMCAxMHB4fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLl8zMFl3ZzhNWm5TeXkyNXlPWTMyeloyIC5kbm4tZ3JpZC1jZWxse292ZXJmbG93LXdyYXA6YnJlYWstd29yZH0uXzMwWXdnOE1ablN5eTI1eU9ZMzJ6WjIgLmRubi1ncmlkLWNlbGwubm8tdXNlcnN7ZmxvYXQ6bGVmdDt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MTBweH1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJ1c2Vyc0xpc3RcIjogXCJfMzBZd2c4TVpuU3l5MjV5T1kzMnpaMlwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwic3Zne2ZpbGw6I0M4QzhDOH1zdmc6aG92ZXJ7ZmlsbDojNkY3MjczfXN2ZzphY3RpdmV7ZmlsbDojMUU4OEMzfS51c2Vycy1maWx0ZXItY29udGFpbmVye2Zsb2F0OmxlZnQ7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbi1ib3R0b206MTVweDt3aWR0aDoxMDAlO2JvcmRlcjpub25lfS51c2Vycy1maWx0ZXItY29udGFpbmVyIC5kbm4tZ3JpZC1jZWxse21hcmdpbi1ib3R0b206NXB4fS51c2Vycy1maWx0ZXItY29udGFpbmVyIC5kbm4tZ3JpZC1jZWxsIC51c2VyLWZpbHRlcnMtZmlsdGVye3dpZHRoOjEwMCU7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjQzhDOEM4O2ZvbnQtc2l6ZToxM3B4O2ZvbnQtZmFtaWx5OmluaGVyaXQ7ZmxvYXQ6bGVmdDtoZWlnaHQ6MjRweH0udXNlcnMtZmlsdGVyLWNvbnRhaW5lciAuZG5uLWdyaWQtY2VsbCAudXNlci1maWx0ZXJzLWZpbHRlciAuZG5uLWRyb3Bkb3duIC5jb2xsYXBzaWJsZS1sYWJlbHtwYWRkaW5nLXRvcDo0cHg7cGFkZGluZy1sZWZ0OjB9LnVzZXJzLWZpbHRlci1jb250YWluZXIgLmRubi1ncmlkLWNlbGwgLnVzZXItZmlsdGVycy1maWx0ZXIgLmRubi1kcm9wZG93biAuZHJvcGRvd24taWNvbnt0b3A6NXB4fS51c2Vycy1maWx0ZXItY29udGFpbmVyIC5kbm4tZ3JpZC1jZWxsIC51c2VyLWZpbHRlcnMtZmlsdGVyIC5kbm4tc2VhcmNoLWJveHt3aWR0aDoxMDAlO2hlaWdodDoyNHB4fS51c2Vycy1maWx0ZXItY29udGFpbmVyIC5kbm4tZ3JpZC1jZWxsIC51c2VyLWZpbHRlcnMtZmlsdGVyIC5kbm4tc2VhcmNoLWJveCBpbnB1dHtwYWRkaW5nOjBweCAxNnB4fS51c2Vycy1maWx0ZXItY29udGFpbmVyIC5kbm4tZ3JpZC1jZWxsIC51c2VyLWZpbHRlcnMtZmlsdGVyIC5kbm4tZHJvcGRvd24gLmNvbGxhcHNpYmxlLXRvZ2dsZXt3aWR0aDphdXRvfS51c2Vycy1maWx0ZXItY29udGFpbmVyIC5kbm4tZ3JpZC1jZWxsIC5zZWFyY2gtZmlsdGVye2Zsb2F0OmxlZnQ7d2lkdGg6MTAwJX0udXNlcnMtZmlsdGVyLWNvbnRhaW5lciAuZG5uLWdyaWQtY2VsbCAuc2VhcmNoLWZpbHRlcj5kaXZ7ZGlzcGxheTpibG9jayAhaW1wb3J0YW50O2JvcmRlci1sZWZ0OjFweCBzb2xpZCAjQzhDOEM4fS51c2Vycy1maWx0ZXItY29udGFpbmVyIC5kbm4tZ3JpZC1jZWxsIC5zZWFyY2gtZmlsdGVyPmRpdiBpbnB1dHtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7cG9zaXRpb246aW5oZXJpdCAhaW1wb3J0YW50O2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O291dGxpbmU6bm9uZTtwYWRkaW5nLXJpZ2h0OjQ1cHh9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5sZXNzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjdXNlcnMtY29udGFpbmVyICp7Ym94LXNpemluZzpib3JkZXItYm94fSN1c2Vycy1jb250YWluZXIgLmNyZWF0ZS11c2VyLWJveC1jb2xsYXBzZXtmbG9hdDpsZWZ0fSN1c2Vycy1jb250YWluZXIgLmNyZWF0ZS11c2VyLWJveC1jb2xsYXBzZT5kaXZ7ZmxvYXQ6bGVmdH0jdXNlcnMtY29udGFpbmVyIC5oZWFkZXItcm93e3BhZGRpbmc6MTBweCAxNXB4IDEwcHh9I3VzZXJzLWNvbnRhaW5lciAudXNlci1uYW1lc3twYWRkaW5nLWxlZnQ6MTdweCAhaW1wb3J0YW50fSN1c2Vycy1jb250YWluZXIgLnVzZXItZW1haWxzLCN1c2Vycy1jb250YWluZXIgLnVzZXItam9pbmVke3BhZGRpbmctbGVmdDoxNXB4ICFpbXBvcnRhbnR9I3VzZXJzLWNvbnRhaW5lciAuZG5uLXBlcnNvbmEtYmFyLXBhZ2UtYm9keS53aXRob3V0LW1hcmdpbnttYXJnaW4tdG9wOjB9I3VzZXJzLWNvbnRhaW5lciAuZG5uLXBlcnNvbmEtYmFyLXBhZ2UtYm9keSAudXNlcnMtd29ya3NwYWNlLXRyYXl7aGVpZ2h0OjM3cHh9I3VzZXJzLWNvbnRhaW5lciAuZG5uLXBlcnNvbmEtYmFyLXBhZ2UtYm9keSAudXNlcnMtd29ya3NwYWNlLXRyYXkgLmRubi1ncmlkLWNlbGx7aGVpZ2h0OjEwMCU7cGFkZGluZy10b3A6N3B4fSN1c2Vycy1jb250YWluZXIgLmRubi1wZXJzb25hLWJhci1wYWdlLWJvZHkgLnVzZXJzLXdvcmtzcGFjZS10cmF5IC5kbm4tZ3JpZC1jZWxsIC51c2Vycy1maWx0ZXItY29udGFpbmVyIC51c2VyLWZpbHRlcnMtZmlsdGVye2hlaWdodDozMHB4fSN1c2Vycy1jb250YWluZXIgLmRubi1wZXJzb25hLWJhci1wYWdlLWJvZHkgLnVzZXJzLXdvcmtzcGFjZS10cmF5IC5kbm4tZ3JpZC1jZWxsIC51c2Vycy1maWx0ZXItY29udGFpbmVyIC51c2VyLWZpbHRlcnMtZmlsdGVyIC5kbm4tZHJvcGRvd24gLmNvbGxhcHNpYmxlLWxhYmVse3BhZGRpbmctdG9wOjRweH0jdXNlcnMtY29udGFpbmVyIC5kbm4tcGVyc29uYS1iYXItcGFnZS1ib2R5IC51c2Vycy13b3Jrc3BhY2UtdHJheSAuZG5uLWdyaWQtY2VsbCAudXNlcnMtZmlsdGVyLWNvbnRhaW5lciAudXNlci1maWx0ZXJzLWZpbHRlciAuZG5uLWRyb3Bkb3duIC5kcm9wZG93bi1pY29ue3RvcDo1cHh9I3VzZXJzLWNvbnRhaW5lciAuZG5uLXBlcnNvbmEtYmFyLXBhZ2UtYm9keSAudXNlcnMtd29ya3NwYWNlLXRyYXkgLmRubi1ncmlkLWNlbGwgLmRubi1zZWFyY2gtYm94e3dpZHRoOjEwMCU7aGVpZ2h0OjMwcHh9I3VzZXJzLWNvbnRhaW5lciAuZG5uLXBlcnNvbmEtYmFyLXBhZ2UtYm9keSAudXNlcnMtcGFnaW5ne2Zsb2F0OmxlZnQ7d2lkdGg6MTAwJTttYXJnaW46MCAycHg7cGFkZGluZzoxOHB4fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsImNvbnN0IHV0aWxzID0gT2JqZWN0LmFzc2lnbih7fSwgd2luZG93LmRubi51dGlsaXR5KTsgLy9tYWtlIGNvcHksIGluIGNhc2Ugb2YgYWNjaWRlbnRhbCBjaGFuZ2UuXHJcbmV4cG9ydCBkZWZhdWx0IHV0aWxzOyIsImltcG9ydCB1dGlsaXRpZXMgZnJvbSBcInV0aWxzXCI7XHJcbmNvbnN0IHJlc3ggPSB7XHJcbiAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgbGV0IG1vZHVsZU5hbWUgPSBcIlVzZXJzXCI7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxpdGllcy5nZXRSZXN4KG1vZHVsZU5hbWUsIGtleSk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IHJlc3g7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBHcmlkQ2VsbCB9IGZyb20gXCJAZG5uc29mdHdhcmUvZG5uLXJlYWN0LWNvbW1vblwiO1xyXG5pbXBvcnQgXCIuL3N0eWxlLmxlc3NcIjtcclxuXHJcbmNsYXNzIEV4dGVuc2lvbkhlYWRlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEdyaWRDZWxsIGNvbHVtblNpemU9ezEwMH0gY2xhc3NOYW1lPVwiaGVhZGVyLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGVhZGVycy5tYXAoKGhlYWRlciwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxHcmlkQ2VsbCBrZXk9e2BoZWFkZXItcm93LWdyaWQtY2VsbC0ke2luZGV4fWB9IGNvbHVtblNpemU9e2hlYWRlci5zaXplfSBjbGFzc05hbWU9e2hlYWRlci5oZWFkZXIgPyBcIlwiIDogXCJlbXB0eVwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj57aGVhZGVyLmhlYWRlciB8fCBcIkRlZmF1bHRcIn08L2g2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPjtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkV4dGVuc2lvbkhlYWRlci5wcm9wVHlwZXMgPSB7XHJcbiAgICBoZWFkZXJzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV4dGVuc2lvbkhlYWRlcjsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11c2VsZXNzLWVzY2FwZSAqL1xyXG5pbXBvcnQgdXRpbGl0aWVzIGZyb20gXCJ1dGlsc1wiO1xyXG5pbXBvcnQgTW9tZW50IGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGVWYWx1ZSwgbG9uZ2Zvcm1hdCkge1xyXG4gICAgaWYgKCFkYXRlVmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIGxldCBkYXRlID0gbmV3IERhdGUoZGF0ZVZhbHVlKTtcclxuICAgIGxldCB5ZWFyVmFsdWUgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBpZiAoeWVhclZhbHVlIDwgMTkwMCkge1xyXG4gICAgICAgIHJldHVybiBcIi1cIjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTW9tZW50KGRhdGVWYWx1ZSkubG9jYWxlKHV0aWxpdGllcy5nZXRDdWx0dXJlKCkpLmZvcm1hdChsb25nZm9ybWF0ID09PSB0cnVlID8gXCJMTExcIiA6IFwiTFwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRW1haWwodmFsdWUpIHtcclxuICAgIGNvbnN0IHJlID0gL14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSsoXFwuW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKykqKXwoXFxcIi4rXFxcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcXSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC87XHJcbiAgICByZXR1cm4gcmUudGVzdCh2YWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRTdHJpbmcoKSB7XHJcbiAgICBsZXQgZm9ybWF0ID0gYXJndW1lbnRzWzBdO1xyXG4gICAgbGV0IG1ldGhvZHNBcmdzID0gYXJndW1lbnRzO1xyXG4gICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC97KFxcZCspfS9naSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgIGxldCBhcmdzSW5kZXggPSBwYXJzZUludChpbmRleCkgKyAxO1xyXG4gICAgICAgIHJldHVybiBtZXRob2RzQXJnc1thcmdzSW5kZXhdO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnQoaXRlbXMsIGNvbHVtbiwgb3JkZXIpIHtcclxuICAgIG9yZGVyID0gb3JkZXIgPT09IHVuZGVmaW5lZCA/IFwiYXNjXCIgOiBvcmRlcjtcclxuICAgIGl0ZW1zID0gaXRlbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIGlmIChhW2NvbHVtbl0gPiBiW2NvbHVtbl0pIC8vc29ydCBzdHJpbmcgZGVzY2VuZGluZ1xyXG4gICAgICAgICAgICByZXR1cm4gb3JkZXIgPT09IFwiYXNjXCIgPyAxIDogLTE7XHJcbiAgICAgICAgaWYgKGFbY29sdW1uXSA8IGJbY29sdW1uXSlcclxuICAgICAgICAgICAgcmV0dXJuIG9yZGVyID09PSBcImFzY1wiID8gLTEgOiAxO1xyXG4gICAgICAgIHJldHVybiAwOy8vZGVmYXVsdCByZXR1cm4gdmFsdWUgKG5vIHNvcnRpbmcpXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpdGVtcztcclxufVxyXG5cclxuLy9SZWR1Y2VyIGhlbHBlcnNcclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVVzZXJzTGlzdCh1c2VyTGlzdCwgdXNlckRldGFpbHMpIHtcclxuICAgIGxldCB1c2VyTGlzdENvcHkgPSBPYmplY3QuYXNzaWduKFtdLCB1dGlsaXRpZXMuZ2V0T2JqZWN0Q29weSh1c2VyTGlzdCkpO1xyXG4gICAgbGV0IHVzZXJEZXRhaWxzQ29weSA9IE9iamVjdC5hc3NpZ24oe30sIHV0aWxpdGllcy5nZXRPYmplY3RDb3B5KHVzZXJEZXRhaWxzKSk7XHJcblxyXG4gICAgaWYgKHVzZXJMaXN0Q29weS5zb21lKHVzZXIgPT4gdXNlci51c2VySWQgPT09IHVzZXJEZXRhaWxzQ29weS51c2VySWQpKSB7XHJcbiAgICAgICAgdXNlckxpc3RDb3B5ID0gdXNlckxpc3RDb3B5LmZpbHRlcih1c2VyID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZXIudXNlcklkICE9PSB1c2VyRGV0YWlsc0NvcHkudXNlcklkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCF1c2VyTGlzdENvcHkuc29tZShyb2xlID0+IHJvbGUudXNlcklkID09PSB1c2VyRGV0YWlsc0NvcHkudXNlcklkKSkge1xyXG4gICAgICAgIHVzZXJMaXN0Q29weSA9IFt1c2VyRGV0YWlsc0NvcHldLmNvbmNhdCh1c2VyTGlzdENvcHkpO1xyXG4gICAgICAgIHVzZXJMaXN0Q29weSA9IHVzZXJMaXN0Q29weS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIGxldCBjcmVhdGVkT25EYXRlQSA9IGEuY3JlYXRlZE9uRGF0ZTtcclxuICAgICAgICAgICAgbGV0IGNyZWF0ZWRPbkRhdGVCID0gYi5jcmVhdGVkT25EYXRlO1xyXG4gICAgICAgICAgICBpZiAoY3JlYXRlZE9uRGF0ZUEgPiBjcmVhdGVkT25EYXRlQikgLy9zb3J0IHN0cmluZyBkZXNjZW5kaW5nXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIGlmIChjcmVhdGVkT25EYXRlQSA8IGNyZWF0ZWRPbkRhdGVCKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIHJldHVybiAwOy8vZGVmYXVsdCByZXR1cm4gdmFsdWUgKG5vIHNvcnRpbmcpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJMaXN0Q29weTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVXNlcih1c2VyTGlzdCwgdXNlcklkKSB7XHJcbiAgICBsZXQgdXNlckxpc3RDb3B5ID0gT2JqZWN0LmFzc2lnbihbXSwgdXRpbGl0aWVzLmdldE9iamVjdENvcHkodXNlckxpc3QpKTtcclxuXHJcblxyXG4gICAgaWYgKHVzZXJMaXN0Q29weS5zb21lKHVzZXIgPT4gdXNlci51c2VySWQgPT09IHVzZXJJZCkpIHtcclxuICAgICAgICB1c2VyTGlzdENvcHkgPSB1c2VyTGlzdENvcHkuZmlsdGVyKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlci51c2VySWQgIT09IHVzZXJJZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB1c2VyTGlzdENvcHk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVVzZXIodXNlckxpc3QsIHVzZXJJZCwgZGVsZXRlU3RhdHVzLCBhdXRob3JpemVTdGF0dXMsIHN1cGVyVXNlclN0YXR1cykge1xyXG4gICAgbGV0IHVzZXJMaXN0Q29weSA9IE9iamVjdC5hc3NpZ24oW10sIHV0aWxpdGllcy5nZXRPYmplY3RDb3B5KHVzZXJMaXN0KSk7XHJcbiAgICBpZiAodXNlckxpc3RDb3B5LnNvbWUodXNlciA9PiB1c2VyLnVzZXJJZCA9PT0gdXNlcklkKSkge1xyXG4gICAgICAgIHVzZXJMaXN0Q29weSA9IHVzZXJMaXN0Q29weS5maWx0ZXIodXNlciA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1c2VyLnVzZXJJZCA9PT0gdXNlcklkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlU3RhdHVzICE9PSB1bmRlZmluZWQgJiYgZGVsZXRlU3RhdHVzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlci5pc0RlbGV0ZWQgPSBkZWxldGVTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYXV0aG9yaXplU3RhdHVzICE9PSB1bmRlZmluZWQgJiYgYXV0aG9yaXplU3RhdHVzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlci5hdXRob3JpemVkID0gYXV0aG9yaXplU3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN1cGVyVXNlclN0YXR1cyAhPT0gdW5kZWZpbmVkICYmIHN1cGVyVXNlclN0YXR1cyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVzZXIuaXNTdXBlclVzZXIgPSBzdXBlclVzZXJTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXNlckxpc3RDb3B5O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVVc2VyUm9sZUZyb21MaXN0KHVzZXJSb2xlcywgcm9sZUlkKSB7XHJcbiAgICBsZXQgdXNlclJvbGVzQ29weSA9IE9iamVjdC5hc3NpZ24oW10sIHV0aWxpdGllcy5nZXRPYmplY3RDb3B5KHVzZXJSb2xlcykpO1xyXG5cclxuICAgIGlmICh1c2VyUm9sZXNDb3B5LnNvbWUocm9sZSA9PiByb2xlLnJvbGVJZCA9PT0gcm9sZUlkKSkge1xyXG4gICAgICAgIHVzZXJSb2xlc0NvcHkgPSB1c2VyUm9sZXNDb3B5LmZpbHRlcihyb2xlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJvbGUucm9sZUlkICE9PSByb2xlSWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXNlclJvbGVzQ29weTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVXNlclJvbGVMaXN0KHVzZXJSb2xlcywgcm9sZVVzZXJEZXRhaWxzKSB7XHJcbiAgICBsZXQgdXNlclJvbGVzQ29weSA9IE9iamVjdC5hc3NpZ24oW10sIHV0aWxpdGllcy5nZXRPYmplY3RDb3B5KHVzZXJSb2xlcykpO1xyXG4gICAgbGV0IHJvbGVVc2VyRGV0YWlsc0NvcHkgPSBPYmplY3QuYXNzaWduKHt9LCB1dGlsaXRpZXMuZ2V0T2JqZWN0Q29weShyb2xlVXNlckRldGFpbHMpKTtcclxuXHJcbiAgICBpZiAodXNlclJvbGVzQ29weS5zb21lKHJvbGUgPT4gcm9sZS5yb2xlSWQgPT09IHJvbGVVc2VyRGV0YWlsc0NvcHkucm9sZUlkKSkge1xyXG4gICAgICAgIHVzZXJSb2xlc0NvcHkgPSB1c2VyUm9sZXNDb3B5LmZpbHRlcihyb2xlID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJvbGUucm9sZUlkICE9PSByb2xlVXNlckRldGFpbHNDb3B5LnJvbGVJZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmICghdXNlclJvbGVzQ29weS5zb21lKHJvbGUgPT4gcm9sZS5yb2xlSWQgPT09IHJvbGVVc2VyRGV0YWlsc0NvcHkucm9sZUlkKSkge1xyXG4gICAgICAgIHVzZXJSb2xlc0NvcHkgPSBbcm9sZVVzZXJEZXRhaWxzQ29weV0uY29uY2F0KHVzZXJSb2xlc0NvcHkpO1xyXG4gICAgICAgIHVzZXJSb2xlc0NvcHkgPSB1c2VyUm9sZXNDb3B5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgbGV0IHJvbGVJZEEgPSBhLnJvbGVJZDtcclxuICAgICAgICAgICAgbGV0IHJvbGVJZEIgPSBiLnJvbGVJZDtcclxuICAgICAgICAgICAgaWYgKHJvbGVJZEEgPCByb2xlSWRCKSAvL3NvcnQgc3RyaW5nIGFzY2VuZGluZ1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICBpZiAocm9sZUlkQSA+IHJvbGVJZEIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgcmV0dXJuIDA7Ly9kZWZhdWx0IHJldHVybiB2YWx1ZSAobm8gc29ydGluZylcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdXNlclJvbGVzQ29weTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4vc3R5bGUubGVzc1wiO1xyXG5cclxuY2xhc3MgTWVudSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImRubi11c2VyLW1lbnUgbWVudVwiPlxyXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuTWVudS5wcm9wVHlwZXMgPSB7XHJcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lbnU7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL3N0eWxlLmxlc3NcIjtcclxuXHJcbmNsYXNzIE1lbnVJdGVtIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsgaG92ZXI6IGZhbHNlIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJkbm4tdXNlci1tZW51IG1lbnUtaXRlbVwiIG9uTW91c2VFbnRlcj17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiB0cnVlIH0pIH1cclxuICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiBmYWxzZSB9KSB9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLm9uTWVudUFjdGlvbn0+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5NZW51SXRlbS5wcm9wVHlwZXMgPSB7XHJcbiAgICBvbk1lbnVBY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWVudUl0ZW07IiwiY29uc3QgdXNlckFjdGlvblR5cGVzID0ge1xyXG4gICAgUkVUUklFVkVEX1VTRVJTOiBcIlJFVFJJRVZFRF9VU0VSU1wiLFxyXG4gICAgUkVUUklFVkVEX1VTRVJfREVUQUlMUzogXCJSRVRSSUVWRURfVVNFUl9ERVRBSUxTXCIsXHJcbiAgICBDUkVBVEVfVVNFUjogXCJDUkVBVEVfVVNFUlwiLFxyXG4gICAgVVBEQVRFX1VTRVI6IFwiVVBEQVRFX1VTRVJcIixcclxuICAgIERFTEVURV9VU0VSOiBcIkRFTEVURV9VU0VSXCIsXHJcbiAgICBFUkFTRV9VU0VSOiBcIkVSQVNFX1VTRVJcIixcclxuICAgIFJFU1RPUkVfVVNFUjogXCJSRVNUT1JFX1VTRVJcIixcclxuICAgIFJFVFJJRVZFRF9VU0VSX0ZJTFRFUlM6IFwiUkVUUklFVkVEX1VTRVJfRklMVEVSU1wiLFxyXG4gICAgVVNFUl9NQURFX1NVUEVSVVNFUjogXCJVU0VSX01BREVfU1VQRVJVU0VSXCIsXHJcbiAgICBSRVRSSUVWRURfVVNFUlNfUk9MRVM6IFwiUkVUUklFVkVEX1VTRVJTX1JPTEVTXCIsXHJcbiAgICBSRVRSSUVWRURfU1VHR0VTVF9ST0xFUzogXCJSRVRSSUVWRURfU1VHR0VTVF9ST0xFU1wiLFxyXG4gICAgU0FWRV9VU0VSX1JPTEU6IFwiU0FWRV9VU0VSX1JPTEVcIixcclxuICAgIFJFTU9WRV9VU0VSX1JPTEU6IFwiUkVNT1ZFX1VTRVJfUk9MRVwiLFxyXG4gICAgVVBEQVRFX1VTRVJfQVVUSE9SSVpFX1NUQVRVUzogXCJVUERBVEVfVVNFUl9BVVRIT1JJWkVfU1RBVFVTXCIsXHJcbiAgICBVU0VSX1VOTE9DS0VEOlwiVVNFUl9VTkxPQ0tFRFwiLFxyXG4gICAgUkVUUklFVkVEX1BBU1NXT1JEX1NUUkVOR1RIX09QVElPTlM6IFwiUkVUUklFVkVEX1BBU1NXT1JEX1NUUkVOR1RIX09QVElPTlNcIlxyXG5cclxufTtcclxuZXhwb3J0IGRlZmF1bHQgdXNlckFjdGlvblR5cGVzO1xyXG4iLCJpbXBvcnQgdXRpbGl0aWVzIGZyb20gXCJ1dGlsc1wiO1xyXG5mdW5jdGlvbiBzZXJpYWxpemVRdWVyeVN0cmluZ1BhcmFtZXRlcnMob2JqKSB7XHJcbiAgICBsZXQgcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgcCBpbiBvYmopIHtcclxuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgICAgICAgIHMucHVzaChlbmNvZGVVUklDb21wb25lbnQocCkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbcF0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcy5qb2luKFwiJlwiKTtcclxufVxyXG5jbGFzcyBVc2VyU2VydmljZSB7XHJcbiAgICBnZXRTZXJ2aWNlRnJhbWV3b3JrKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICBsZXQgc2YgPSB1dGlsaXRpZXMuc2Y7XHJcblxyXG4gICAgICAgIHNmLm1vZHVsZVJvb3QgPSBcIlBlcnNvbmFCYXJcIjtcclxuICAgICAgICBzZi5jb250cm9sbGVyID0gY29udHJvbGxlcjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNmO1xyXG4gICAgfVxyXG4gICAgZ2V0VXNlcnMoc2VhcmNoUGFyYW1ldGVycywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBzZiA9IHRoaXMuZ2V0U2VydmljZUZyYW1ld29yayhcIlVzZXJzXCIpO1xyXG4gICAgICAgIHNmLmdldChcIkdldFVzZXJzP1wiICsgc2VyaWFsaXplUXVlcnlTdHJpbmdQYXJhbWV0ZXJzKHNlYXJjaFBhcmFtZXRlcnMpLCB7fSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZ2V0VXNlckRldGFpbHModXNlckRldGFpbHNQYXJhbWV0ZXJzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YuZ2V0KFwiR2V0VXNlckRldGFpbD9cIiArIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyh1c2VyRGV0YWlsc1BhcmFtZXRlcnMpLCB7fSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlVXNlckJhc2ljSW5mbyh1c2VyRGV0YWlscywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBzZiA9IHRoaXMuZ2V0U2VydmljZUZyYW1ld29yayhcIlVzZXJzXCIpO1xyXG4gICAgICAgIHNmLnBvc3QoXCJVcGRhdGVVc2VyQmFzaWNJbmZvXCIsIHVzZXJEZXRhaWxzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBnZXRVc2VyRmlsdGVycyhjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YuZ2V0KFwiR2V0VXNlckZpbHRlcnNcIiwge30sIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVVzZXIodXNlckRldGFpbHMsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XHJcbiAgICAgICAgY29uc3Qgc2YgPSB0aGlzLmdldFNlcnZpY2VGcmFtZXdvcmsoXCJVc2Vyc1wiKTtcclxuICAgICAgICBzZi5wb3N0KFwiQ3JlYXRlVXNlclwiLCB1c2VyRGV0YWlscywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlUGFzc3dvcmQocGF5bG9hZCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBzZiA9IHRoaXMuZ2V0U2VydmljZUZyYW1ld29yayhcIlVzZXJzXCIpO1xyXG4gICAgICAgIHNmLnBvc3QoXCJDaGFuZ2VQYXNzd29yZFwiLCBwYXlsb2FkLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBmb3JjZUNoYW5nZVBhc3N3b3JkKHVzZXJEZXRhaWxzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YucG9zdChcIkZvcmNlQ2hhbmdlUGFzc3dvcmQ/XCIgKyBzZXJpYWxpemVRdWVyeVN0cmluZ1BhcmFtZXRlcnModXNlckRldGFpbHMpLCBudWxsLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBzZW5kUGFzc3dvcmRSZXNldExpbmsodXNlckRldGFpbHMsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XHJcbiAgICAgICAgY29uc3Qgc2YgPSB0aGlzLmdldFNlcnZpY2VGcmFtZXdvcmsoXCJVc2Vyc1wiKTtcclxuICAgICAgICBzZi5wb3N0KFwiU2VuZFBhc3N3b3JkUmVzZXRMaW5rP1wiICsgc2VyaWFsaXplUXVlcnlTdHJpbmdQYXJhbWV0ZXJzKHVzZXJEZXRhaWxzKSwgbnVsbCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlVXNlcih1c2VyRGV0YWlscywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBzZiA9IHRoaXMuZ2V0U2VydmljZUZyYW1ld29yayhcIlVzZXJzXCIpO1xyXG4gICAgICAgIHNmLnBvc3QoXCJTb2Z0RGVsZXRlVXNlcj9cIiArIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyh1c2VyRGV0YWlscyksIG51bGwsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGhhcmREZWxldGVVc2VyKHVzZXJEZXRhaWxzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YucG9zdChcIkhhcmREZWxldGVVc2VyP1wiICsgc2VyaWFsaXplUXVlcnlTdHJpbmdQYXJhbWV0ZXJzKHVzZXJEZXRhaWxzKSwgbnVsbCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgcmVzdG9yZVVzZXIodXNlckRldGFpbHMsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XHJcbiAgICAgICAgY29uc3Qgc2YgPSB0aGlzLmdldFNlcnZpY2VGcmFtZXdvcmsoXCJVc2Vyc1wiKTtcclxuICAgICAgICBzZi5wb3N0KFwiUmVzdG9yZURlbGV0ZWRVc2VyP1wiICsgc2VyaWFsaXplUXVlcnlTdHJpbmdQYXJhbWV0ZXJzKHVzZXJEZXRhaWxzKSwgbnVsbCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlU3VwZXJVc2VyU3RhdHVzKHVzZXJEZXRhaWxzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YucG9zdChcIlVwZGF0ZVN1cGVyVXNlclN0YXR1cz9cIiArIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyh1c2VyRGV0YWlscyksIG51bGwsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZUF1dGhvcml6ZVN0YXR1cyh1c2VyRGV0YWlscywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBzZiA9IHRoaXMuZ2V0U2VydmljZUZyYW1ld29yayhcIlVzZXJzXCIpO1xyXG4gICAgICAgIHNmLnBvc3QoXCJVcGRhdGVBdXRob3JpemVTdGF0dXM/XCIgKyBzZXJpYWxpemVRdWVyeVN0cmluZ1BhcmFtZXRlcnModXNlckRldGFpbHMpLCBudWxsLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICB1bmxvY2tVc2VyKHVzZXJEZXRhaWxzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YucG9zdChcIlVubG9ja1VzZXI/XCIgKyBzZXJpYWxpemVRdWVyeVN0cmluZ1BhcmFtZXRlcnModXNlckRldGFpbHMpLCBudWxsLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICAvL1VzZXIgUm9sZXMgTWV0aG9kc1xyXG4gICAgZ2V0VXNlclJvbGVzKHNlYXJjaFBhcmFtZXRlcnMsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XHJcbiAgICAgICAgY29uc3Qgc2YgPSB0aGlzLmdldFNlcnZpY2VGcmFtZXdvcmsoXCJVc2Vyc1wiKTtcclxuICAgICAgICBzZi5nZXQoXCJHZXRVc2VyUm9sZXM/XCIgKyBzZXJpYWxpemVRdWVyeVN0cmluZ1BhcmFtZXRlcnMoc2VhcmNoUGFyYW1ldGVycyksIHt9LCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBnZXRTdWdnZXN0Um9sZXMoc2VhcmNoUGFyYW1ldGVycywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBzZiA9IHRoaXMuZ2V0U2VydmljZUZyYW1ld29yayhcIlVzZXJzXCIpO1xyXG4gICAgICAgIHNmLmdldChcIkdldFN1Z2dlc3RSb2xlcz9cIiArIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVycyhzZWFyY2hQYXJhbWV0ZXJzKSwge30sIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIHNhdmVVc2VyUm9sZShwYXlsb2FkLCBub3RpZnlVc2VyLCBpc093bmVyLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YucG9zdChcIlNhdmVVc2VyUm9sZT9ub3RpZnlVc2VyPVwiICsgbm90aWZ5VXNlciArIFwiJmlzT3duZXI9XCIgKyBpc093bmVyLCBwYXlsb2FkLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVVc2VyUm9sZShwYXlsb2FkLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHNmID0gdGhpcy5nZXRTZXJ2aWNlRnJhbWV3b3JrKFwiVXNlcnNcIik7XHJcbiAgICAgICAgc2YucG9zdChcIlJlbW92ZVVzZXJSb2xlXCIsIHBheWxvYWQsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcGFzc3dvcmRTdHJlbmd0aE9wdGlvbnMoY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBzZiA9IHRoaXMuZ2V0U2VydmljZUZyYW1ld29yayhcIlVzZXJzXCIpO1xyXG4gICAgICAgIHNmLmdldChcIlBhc3N3b3JkU3RyZW5ndGhPcHRpb25zXCIse30sY2FsbGJhY2ssZXJyb3JDYWxsYmFjayk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgdXNlclNlcnZpY2UgPSBuZXcgVXNlclNlcnZpY2UoKTtcclxuZXhwb3J0IGRlZmF1bHQgdXNlclNlcnZpY2U7IiwiaW1wb3J0IHt1c2VycyBhcyBBY3Rpb25UeXBlc30gIGZyb20gXCIuLi9hY3Rpb25UeXBlc1wiO1xyXG5pbXBvcnQge0NvbW1vblVzZXJzU2VydmljZSBhcyBVc2VyU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzXCI7XHJcbmltcG9ydCB1dGlsaXRpZXMgZnJvbSBcInV0aWxzXCI7XHJcblxyXG5mdW5jdGlvbiBlcnJvckNhbGxiYWNrKG1lc3NhZ2UpIHtcclxuICAgIHV0aWxpdGllcy5ub3RpZnlFcnJvcihKU09OLnBhcnNlKG1lc3NhZ2UucmVzcG9uc2VUZXh0KS5NZXNzYWdlLCA1MDAwKTtcclxufVxyXG5jb25zdCB1c2VyQWN0aW9ucyA9IHtcclxuICAgIGdldFVzZXJzKHNlYXJjaFBhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5nZXRVc2VycyhzZWFyY2hQYXJhbWV0ZXJzLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVRSSUVWRURfVVNFUlMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogZGF0YVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBnZXRVc2VyRGV0YWlscyh1c2VyRGV0YWlsc1BhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5nZXRVc2VyRGV0YWlscyh1c2VyRGV0YWlsc1BhcmFtZXRlcnMsIGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFVFJJRVZFRF9VU0VSX0RFVEFJTFMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogZGF0YVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBnZXRVc2VyRmlsdGVycyhjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmdldFVzZXJGaWx0ZXJzKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlVXNlcih1c2VyRGV0YWlscywgZmlsdGVyLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiAoZGlzcGF0Y2gpID0+IHtcclxuICAgICAgICAgICAgVXNlclNlcnZpY2UuY3JlYXRlVXNlcih1c2VyRGV0YWlscywgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuQ1JFQVRFX1VTRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IGZpbHRlclxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGVVc2VyQmFzaWNJbmZvKHVzZXJEZXRhaWxzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiAoZGlzcGF0Y2gpID0+IHtcclxuICAgICAgICAgICAgVXNlclNlcnZpY2UudXBkYXRlVXNlckJhc2ljSW5mbyh1c2VyRGV0YWlscywgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuVVBEQVRFX1VTRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogZGF0YVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBjaGFuZ2VQYXNzd29yZChwYXlsb2FkLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmNoYW5nZVBhc3N3b3JkKHBheWxvYWQsIGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZm9yY2VDaGFuZ2VQYXNzd29yZChwYXlsb2FkLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmZvcmNlQ2hhbmdlUGFzc3dvcmQocGF5bG9hZCwgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBzZW5kUGFzc3dvcmRSZXNldExpbmsocGF5bG9hZCwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5zZW5kUGFzc3dvcmRSZXNldExpbmsocGF5bG9hZCwgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBkZWxldGVVc2VyKHBheWxvYWQsIGZpbHRlciwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBkZWxldGVkVXNlciA9IE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQudXNlckRldGFpbHMpO1xyXG4gICAgICAgICAgICBkZWxldGVkVXNlci5pc0RlbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5kZWxldGVVc2VyKHt1c2VySWQ6IHBheWxvYWQudXNlckRldGFpbHMudXNlcklkfSwgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuREVMRVRFX1VTRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogZGVsZXRlZFVzZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZXJhc2VVc2VyKHBheWxvYWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5oYXJkRGVsZXRlVXNlcihwYXlsb2FkLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5FUkFTRV9VU0VSLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsgdXNlcklkOiBwYXlsb2FkLnVzZXJJZCB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHJlc3RvcmVVc2VyKHBheWxvYWQsIGZpbHRlciwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByZXN0b3JlZFVzZXIgPSBPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkLnVzZXJEZXRhaWxzKTtcclxuICAgICAgICAgICAgcmVzdG9yZWRVc2VyLmlzRGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5yZXN0b3JlVXNlcih7dXNlcklkOiBwYXlsb2FkLnVzZXJEZXRhaWxzLnVzZXJJZH0sIGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFU1RPUkVfVVNFUixcclxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiByZXN0b3JlZFVzZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBmaWx0ZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlU3VwZXJVc2VyU3RhdHVzKHBheWxvYWQsIGZpbHRlciwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnVwZGF0ZVN1cGVyVXNlclN0YXR1cyhwYXlsb2FkLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5VU0VSX01BREVfU1VQRVJVU0VSLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsgdXNlcklkOiBwYXlsb2FkLnVzZXJJZCwgc2V0U3VwZXJVc2VyOiBwYXlsb2FkLnNldFN1cGVyVXNlciB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZUF1dGhvcml6ZVN0YXR1cyhwYXlsb2FkLCBhdXRob3JpemVkLCBmaWx0ZXIsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdXNlciA9IE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQudXNlckRldGFpbHMpO1xyXG4gICAgICAgICAgICB1c2VyLmF1dGhvcml6ZWQgPSBhdXRob3JpemVkO1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS51cGRhdGVBdXRob3JpemVTdGF0dXMoeyB1c2VySWQ6IHBheWxvYWQudXNlckRldGFpbHMudXNlcklkLCBhdXRob3JpemVkOiBhdXRob3JpemVkIH0sIGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlVQREFURV9VU0VSX0FVVEhPUklaRV9TVEFUVVMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogdXNlcixcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IGZpbHRlclxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB1bkxvY2tVc2VyKHBheWxvYWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdXNlciA9IE9iamVjdC5hc3NpZ24oe30sIHBheWxvYWQudXNlckRldGFpbHMpO1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS51bmxvY2tVc2VyKHsgdXNlcklkOiBwYXlsb2FkLnVzZXJEZXRhaWxzLnVzZXJJZCB9LCBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5VU0VSX1VOTE9DS0VELFxyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHVzZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZ2V0VXNlclJvbGVzKHNlYXJjaFBhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5nZXRVc2VyUm9sZXMoc2VhcmNoUGFyYW1ldGVycywgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVUUklFVkVEX1VTRVJTX1JPTEVTLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IGRhdGFcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGVycm9yQ2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFzc3dvcmRTdHJlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnBhc3N3b3JkU3RyZW5ndGhPcHRpb25zKHBTdHJlbmd0aD0+e1xyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFVFJJRVZFRF9QQVNTV09SRF9TVFJFTkdUSF9PUFRJT05TLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHBTdHJlbmd0aFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZ2V0U3VnZ2VzdFJvbGVzKHNlYXJjaFBhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5nZXRTdWdnZXN0Um9sZXMoc2VhcmNoUGFyYW1ldGVycywgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVUUklFVkVEX1NVR0dFU1RfUk9MRVMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogeyBtYXRjaGVkUm9sZXM6IGRhdGEgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyb3JDYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBzYXZlVXNlclJvbGUocGF5bG9hZCwgbm90aWZ5VXNlciwgaXNPd25lciwgY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XHJcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnNhdmVVc2VyUm9sZShwYXlsb2FkLCBub3RpZnlVc2VyLCBpc093bmVyLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5TQVZFX1VTRVJfUk9MRSxcclxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHJlbW92ZVVzZXJSb2xlKHBheWxvYWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xyXG4gICAgICAgICAgICBVc2VyU2VydmljZS5yZW1vdmVVc2VyUm9sZShwYXlsb2FkLCBkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRU1PVkVfVVNFUl9ST0xFLFxyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsgdXNlcklkOiBwYXlsb2FkLnVzZXJJZCwgcm9sZUlkOiBwYXlsb2FkLnJvbGVJZCB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlckFjdGlvbnM7XHJcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgTG9jYWxpemF0aW9uIGZyb20gXCJsb2NhbGl6YXRpb25cIjtcclxuaW1wb3J0IHsgQ29tbW9uVXNlcnNBY3Rpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2FjdGlvbnNcIjtcclxuaW1wb3J0IHV0aWxpdGllcyBmcm9tIFwidXRpbHNcIjtcclxuaW1wb3J0IHsgQnV0dG9uLCBTaW5nbGVMaW5lSW5wdXRXaXRoRXJyb3IsIEdyaWRTeXN0ZW0sIEdyaWRDZWxsIH0gZnJvbSBcIkBkbm5zb2Z0d2FyZS9kbm4tcmVhY3QtY29tbW9uXCI7XHJcbmltcG9ydCBcIi4vc3R5bGUubGVzc1wiO1xyXG5cclxuY29uc3QgaW5wdXRTdHlsZSA9IHsgd2lkdGg6IFwiMTAwJVwiIH07XHJcbmNvbnN0IGJsYW5rQ2hhbmdlUGFzc3dvcmQgPSB7XHJcbiAgICB1c2VySWQ6IDAsXHJcbiAgICBwYXNzd29yZDogXCJcIlxyXG59O1xyXG5cclxuY2xhc3MgQ2hhbmdlUGFzc3dvcmQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgY2hhbmdlUGFzc3dvcmQ6IE9iamVjdC5hc3NpZ24oe30sIGJsYW5rQ2hhbmdlUGFzc3dvcmQpLFxyXG4gICAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZHNNYXRjaDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgICAgICBsZXQge2NoYW5nZVBhc3N3b3JkfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgY2hhbmdlUGFzc3dvcmQudXNlcklkID0gdGhpcy5wcm9wcy51c2VySWQ7XHJcbiAgICAgICAgY2hhbmdlUGFzc3dvcmQucGFzc3dvcmQgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBjaGFuZ2VQYXNzd29yZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcykge1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQge2NoYW5nZVBhc3N3b3JkfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkLnVzZXJJZCA9IG5ld1Byb3BzLnVzZXJJZDtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VQYXNzd29yZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNoYW5nZShrZXksIGl0ZW0pIHtcclxuICAgICAgICBpZiAoa2V5ID09PSBcImNvbmZpcm1QYXNzd29yZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiBpdGVtLnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlRm9ybSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQge2NoYW5nZVBhc3N3b3JkfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkW2tleV0gPSBpdGVtLnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNoYW5nZVBhc3N3b3JkIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVGb3JtKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNhdmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVGb3JtKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuY2hhbmdlUGFzc3dvcmQodGhpcy5zdGF0ZS5jaGFuZ2VQYXNzd29yZCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcclxuICAgICAgICAgICAgICAgIHV0aWxpdGllcy5ub3RpZnkoTG9jYWxpemF0aW9uLmdldChcIkNoYW5nZVN1Y2Nlc3NmdWxcIiksIDMwMDApO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFsaWRhdGVGb3JtKCkge1xyXG4gICAgICAgIGxldCB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgbGV0IHtlcnJvcnN9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgICBlcnJvcnMucGFzc3dvcmQgPSBmYWxzZTtcclxuICAgICAgICBlcnJvcnMuY29uZmlybVBhc3N3b3JkID0gZmFsc2U7XHJcbiAgICAgICAgZXJyb3JzLnBhc3N3b3Jkc01hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHtjaGFuZ2VQYXNzd29yZH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgIGxldCB7Y29uZmlybVBhc3N3b3JkfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgaWYgKGNoYW5nZVBhc3N3b3JkLnBhc3N3b3JkID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGVycm9ycy5wYXNzd29yZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFuZ2VQYXNzd29yZC5jb25maXJtUGFzc3dvcmQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgZXJyb3JzLmNvbmZpcm1QYXNzd29yZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvbmZpcm1QYXNzd29yZCAhPT0gY2hhbmdlUGFzc3dvcmQucGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgZXJyb3JzLnBhc3N3b3Jkc01hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9ycyB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgfVxyXG4gICAgY2xlYXIoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgY2hhbmdlUGFzc3dvcmQ6IE9iamVjdC5hc3NpZ24oe30sIGJsYW5rQ2hhbmdlUGFzc3dvcmQpLFxyXG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGVycm9yczoge1xyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3Jkc01hdGNoOiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uQ2FuY2VsID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DYW5jZWwoKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQge3N0YXRlfSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudmlzaWJsZSAmJiA8ZGl2IGNsYXNzTmFtZT1cImRubi11c2VyLWNoYW5nZS1wYXNzd29yZFwiPlxyXG4gICAgICAgICAgICA8R3JpZENlbGwgY2xhc3NOYW1lPVwiZG8tbm90LWNsb3NlXCI+XHJcbiAgICAgICAgICAgICAgICA8R3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7TG9jYWxpemF0aW9uLmdldChcIkNoYW5nZVBhc3N3b3JkXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTaW5nbGVMaW5lSW5wdXRXaXRoRXJyb3IgbGFiZWw9e0xvY2FsaXphdGlvbi5nZXQoXCJOZXdQYXNzd29yZFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXtzdGF0ZS5lcnJvcnMucGFzc3dvcmR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcywgXCJwYXNzd29yZFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBNZXNzYWdlPXtMb2NhbGl6YXRpb24uZ2V0KFwiTmV3UGFzc3dvcmQuSGVscFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIk5ld1Bhc3N3b3JkLlJlcXVpcmVkXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2lucHV0U3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0U3R5bGU9e3sgbWFyZ2luQm90dG9tOiAxNSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17c3RhdGUuY2hhbmdlUGFzc3dvcmQucGFzc3dvcmR9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIGxhYmVsPXtMb2NhbGl6YXRpb24uZ2V0KFwiTmV3Q29uZmlybVwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXtzdGF0ZS5lcnJvcnMuY29uZmlybVBhc3N3b3JkIHx8IHN0YXRlLmVycm9ycy5wYXNzd29yZHNNYXRjaH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLCBcImNvbmZpcm1QYXNzd29yZFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBNZXNzYWdlPXtMb2NhbGl6YXRpb24uZ2V0KFwiTmV3Q29uZmlybS5IZWxwXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtzdGF0ZS5lcnJvcnMuY29uZmlybVBhc3N3b3JkID8gTG9jYWxpemF0aW9uLmdldChcIk5ld0NvbmZpcm0uUmVxdWlyZWRcIikgOiBMb2NhbGl6YXRpb24uZ2V0KFwiTmV3Q29uZmlybU1pc21hdGNoLkVycm9yTWVzc2FnZVwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtpbnB1dFN0eWxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMTUgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLmNvbmZpcm1QYXNzd29yZH0vPlxyXG4gICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgIDxHcmlkU3lzdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPVwicmlnaHQgZG8tbm90LWNsb3NlXCIgaWQ9XCJjYW5jZWxidG5cIiAgdHlwZT1cInNlY29uZGFyeVwiIG9uQ2xpY2s9e3RoaXMuY2FuY2VsLmJpbmQodGhpcykgfT57TG9jYWxpemF0aW9uLmdldChcImJ0bkNhbmNlbFwiKSB9PC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBpZD1cImNvbmZpcm1idG4gZG8tbm90LWNsb3NlXCIgdHlwZT1cInByaW1hcnlcIiBvbkNsaWNrPXt0aGlzLnNhdmUuYmluZCh0aGlzKSB9PntMb2NhbGl6YXRpb24uZ2V0KFwiYnRuQXBwbHlcIikgfTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9HcmlkU3lzdGVtPlxyXG4gICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgIDwvZGl2ID47XHJcbiAgICB9XHJcbn1cclxuQ2hhbmdlUGFzc3dvcmQucHJvcFR5cGVzID0ge1xyXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICB1c2VySWQ6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG4gICAgdmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmNcclxufTtcclxuQ2hhbmdlUGFzc3dvcmQuZGVmYXVsdFByb3BzID0ge1xyXG4gICAgdmlzaWJsZTogdHJ1ZVxyXG59O1xyXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlckRldGFpbHM6IHN0YXRlLnVzZXJzLnVzZXJEZXRhaWxzXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoQ2hhbmdlUGFzc3dvcmQpOyIsImV4cG9ydCBmdW5jdGlvbiBjYW5NYW5hZ2VSb2xlcyhzZXR0aW5ncywgdXNlcikge1xyXG4gICAgcmV0dXJuICF1c2VyLmlzU3VwZXJVc2VyICYmIChzZXR0aW5ncy5pc0FkbWluIHx8IHNldHRpbmdzLnBlcm1pc3Npb25zLk1BTkFHRV9ST0xFUyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW5NYW5hZ2VQcm9maWxlKHNldHRpbmdzKSB7XHJcbiAgICByZXR1cm4gc2V0dGluZ3MuaXNBZG1pbiB8fCBzZXR0aW5ncy5wZXJtaXNzaW9ucy5NQU5BR0VfUFJPRklMRTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhblZpZXdTZXR0aW5ncyhzZXR0aW5ncykge1xyXG4gICAgcmV0dXJuIHNldHRpbmdzLmlzQWRtaW4gfHwgc2V0dGluZ3MucGVybWlzc2lvbnMuVklFV19TRVRUSU5HUztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbkFkZFVzZXIoc2V0dGluZ3MpIHtcclxuICAgIHJldHVybiAoc2V0dGluZ3MuaXNBZG1pbiB8fCBzZXR0aW5ncy5wZXJtaXNzaW9ucy5BRERfVVNFUik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW5NYW5hZ2VQYXNzd29yZChzZXR0aW5ncywgdXNlcklkKVxyXG57XHJcbiAgICByZXR1cm4gKHNldHRpbmdzLmlzQWRtaW4gfHwgc2V0dGluZ3MucGVybWlzc2lvbnMuTUFOQUdFX1BBU1NXT1JEKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbkVkaXRTZXR0aW5ncyhzZXR0aW5ncylcclxue1xyXG4gICAgcmV0dXJuIChzZXR0aW5ncy5pc0FkbWluIHx8IHNldHRpbmdzLnBlcm1pc3Npb25zLkVESVRfU0VUVElOR1MpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FuRGVsZXRlVXNlcihzZXR0aW5ncywgdXNlcklkKVxyXG57XHJcbiAgICByZXR1cm4gKHNldHRpbmdzLmlzQWRtaW4gfHwgc2V0dGluZ3MucGVybWlzc2lvbnMuREVMRVRFX1VTRVIpIFxyXG4gICAgICAgICYmIHVzZXJJZCE9PXNldHRpbmdzLnVzZXJJZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbkF1dGhvcml6ZVVuQXV0aG9yaXplVXNlcihzZXR0aW5ncywgdXNlcklkKVxyXG57XHJcbiAgICByZXR1cm4gKHNldHRpbmdzLmlzQWRtaW4gfHwgc2V0dGluZ3MucGVybWlzc2lvbnMuQVVUSE9SSVpFX1VOQVVUSE9SSVpFX1VTRVIpIFxyXG4gICAgICAgICYmIHVzZXJJZCE9PXNldHRpbmdzLnVzZXJJZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhblByb21vdGVEZW1vdGUoc2V0dGluZ3MsIHVzZXJJZCkge1xyXG4gICAgcmV0dXJuIHNldHRpbmdzLmlzSG9zdCAmJiB1c2VySWQhPT1zZXR0aW5ncy51c2VySWQ7XHJcbn0iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IE1lbnUgZnJvbSBcIi4vbWVudS9NZW51XCI7XHJcbmltcG9ydCBNZW51SXRlbSBmcm9tIFwiLi9tZW51L01lbnVJdGVtXCI7XHJcbmltcG9ydCBMb2NhbGl6YXRpb24gZnJvbSBcImxvY2FsaXphdGlvblwiO1xyXG5pbXBvcnQgeyBDb21tb25Vc2Vyc0FjdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vYWN0aW9uc1wiO1xyXG5pbXBvcnQgdXRpbGl0aWVzIGZyb20gXCJ1dGlsc1wiO1xyXG5pbXBvcnQgeyBHcmlkQ2VsbCB9IGZyb20gXCJAZG5uc29mdHdhcmUvZG5uLXJlYWN0LWNvbW1vblwiO1xyXG5pbXBvcnQgQ2hhbmdlUGFzc3dvcmQgZnJvbSBcIi4uL0NoYW5nZVBhc3N3b3JkXCI7XHJcbmltcG9ydCBcIi4vc3R5bGUubGVzc1wiO1xyXG5pbXBvcnQge2Nhbk1hbmFnZVBhc3N3b3JkLCBjYW5EZWxldGVVc2VyLCBjYW5BdXRob3JpemVVbkF1dGhvcml6ZVVzZXIsIGNhblByb21vdGVEZW1vdGV9IGZyb20gXCIuLi8uLi9wZXJtaXNzaW9uSGVscGVycy5qc1wiO1xyXG5cclxuY2xhc3MgVXNlck1lbnUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgdXNlckRldGFpbHM6IHByb3BzLnVzZXJEZXRhaWxzLFxyXG4gICAgICAgICAgICBDaGFuZ2VQYXNzd29yZFZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNob3dNZW51ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljayhldmVudCkge1xyXG4gICAgICAgIGlmICgodHlwZW9mIGV2ZW50LnRhcmdldC5jbGFzc05hbWUgIT09IFwic3RyaW5nXCIgfHwgKHR5cGVvZiBldmVudC50YXJnZXQuY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGV2ZW50LnRhcmdldC5jbGFzc05hbWUuaW5kZXhPZihcIm1lbnUtaXRlbVwiKSA9PT0gLTEpKSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgICBsZXQge3Byb3BzfSA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHByb3BzLnVzZXJEZXRhaWxzID09PSB1bmRlZmluZWQgfHwgcHJvcHMudXNlckRldGFpbHMudXNlcklkICE9PSBwcm9wcy51c2VySWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93TWVudSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmdldFVzZXJEZXRhaWxzKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd01lbnUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMpIHtcclxuICAgICAgICBpZiAobmV3UHJvcHMudXNlckRldGFpbHMgPT09IHVuZGVmaW5lZCAmJiBuZXdQcm9wcy51c2VyRGV0YWlscy51c2VySWQgIT09IG5ld1Byb3BzLnVzZXJJZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dNZW51ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0VXNlckRldGFpbHMobmV3UHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93TWVudSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0VXNlckRldGFpbHMocHJvcHMpIHtcclxuICAgICAgICBwcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuZ2V0VXNlckRldGFpbHMoeyB1c2VySWQ6IHByb3BzLnVzZXJJZCB9LCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdXNlckRldGFpbHMgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB1c2VyRGV0YWlsc1xyXG4gICAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dNZW51ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgcmVsb2FkKCkge1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlckRldGFpbHModGhpcy5wcm9wcyk7XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVDbGljaywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgc29ydChpdGVtcywgY29sdW1uLCBvcmRlcikge1xyXG4gICAgICAgIG9yZGVyID0gb3JkZXIgPT09IHVuZGVmaW5lZCA/IFwiYXNjXCIgOiBvcmRlcjtcclxuICAgICAgICBpdGVtcyA9IGl0ZW1zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgaWYgKGFbY29sdW1uXSA+IGJbY29sdW1uXSkgLy9zb3J0IHN0cmluZyBkZXNjZW5kaW5nXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JkZXIgPT09IFwiYXNjXCIgPyAxIDogLTE7XHJcbiAgICAgICAgICAgIGlmIChhW2NvbHVtbl0gPCBiW2NvbHVtbl0pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JkZXIgPT09IFwiYXNjXCIgPyAtMSA6IDE7XHJcbiAgICAgICAgICAgIHJldHVybiAwOy8vZGVmYXVsdCByZXR1cm4gdmFsdWUgKG5vIHNvcnRpbmcpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xyXG4gICAgfVxyXG4gICAgb25JdGVtQ2xpY2soa2V5KSB7XHJcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgICAgY2FzZSBcIlJlc2V0UGFzc3dvcmRcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMub25TZW5kUGFzc3dvcmRMaW5rKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiQ2hhbmdlUGFzc3dvcmRcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQ2hhbmdlUGFzc3dvcmQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiRm9yY2VDaGFuZ2VQYXNzd29yZFwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVBhc3N3b3JkQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiRGVsZXRlVXNlclwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxldGVVc2VyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiUmVtb3ZlVXNlclwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5oYXJkRGVsZXRlVXNlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIlJlc3RvcmVVc2VyXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVVc2VyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY21kVW5BdXRob3JpemVcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQXV0aG9yaXplU3RhdHVzKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjbWRBdXRob3JpemVcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQXV0aG9yaXplU3RhdHVzKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImNtZFVuTG9ja1wiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy51bkxvY2tVc2VyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiUHJvbW90ZVRvU3VwZXJVc2VyXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN1cGVyVXNlclN0YXR1cyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJEZW1vdGVUb1JlZ3VsYXJVc2VyXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN1cGVyVXNlclN0YXR1cyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiVmlld1Byb2ZpbGVcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMub25WaWV3UHJvZmlsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy51c2VyTWVudUFjdGlvbiA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudXNlck1lbnVBY3Rpb24oa2V5LCB0aGlzLnN0YXRlLnVzZXJEZXRhaWxzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBvblZpZXdQcm9maWxlKCkge1xyXG4gICAgICAgIHV0aWxpdGllcy5jbG9zZVBlcnNvbmFCYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cudG9wLmxvY2F0aW9uID0gdGhpcy5zdGF0ZS51c2VyRGV0YWlscy5wcm9maWxlVXJsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgb25TZW5kUGFzc3dvcmRMaW5rKCkge1xyXG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLnNlbmRQYXNzd29yZFJlc2V0TGluayh7IHVzZXJJZDogdGhpcy5wcm9wcy51c2VySWQgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB1dGlsaXRpZXMubm90aWZ5KExvY2FsaXphdGlvbi5nZXQoXCJQYXNzd29yZFNlbnRcIiksIDEwMDAwKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGVVc2VyKCkge1xyXG4gICAgICAgIHV0aWxpdGllcy5jb25maXJtKExvY2FsaXphdGlvbi5nZXQoXCJEZWxldGVVc2VyLkNvbmZpcm1cIiksIExvY2FsaXphdGlvbi5nZXQoXCJEZWxldGVcIiksIExvY2FsaXphdGlvbi5nZXQoXCJDYW5jZWxcIiksICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuZGVsZXRlVXNlcih7IHVzZXJEZXRhaWxzOiB0aGlzLnByb3BzLnVzZXJEZXRhaWxzIH0sIHRoaXMucHJvcHMuZmlsdGVyLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXRpZXMubm90aWZ5KExvY2FsaXphdGlvbi5nZXQoXCJVc2VyRGVsZXRlZFwiKSwgMzAwMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBoYXJkRGVsZXRlVXNlcigpIHtcclxuICAgICAgICB1dGlsaXRpZXMuY29uZmlybShMb2NhbGl6YXRpb24uZ2V0KFwiUmVtb3ZlVXNlci5Db25maXJtXCIpLCBMb2NhbGl6YXRpb24uZ2V0KFwiRGVsZXRlXCIpLCBMb2NhbGl6YXRpb24uZ2V0KFwiQ2FuY2VsXCIpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLmVyYXNlVXNlcih7IHVzZXJJZDogdGhpcy5wcm9wcy51c2VySWQgfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmVzdG9yZVVzZXIoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMucmVzdG9yZVVzZXIoeyB1c2VyRGV0YWlsczogdGhpcy5wcm9wcy51c2VyRGV0YWlscyB9LCB0aGlzLnByb3BzLmZpbHRlciwgKCkgPT4ge1xyXG4gICAgICAgICAgICB1dGlsaXRpZXMubm90aWZ5KExvY2FsaXphdGlvbi5nZXQoXCJVc2VyUmVzdG9yZWRcIiksIDMwMDApO1xyXG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIGZvcmNlUGFzc3dvcmRDaGFuZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuZm9yY2VDaGFuZ2VQYXNzd29yZCh7IHVzZXJJZDogdGhpcy5wcm9wcy51c2VySWQgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB1dGlsaXRpZXMubm90aWZ5KExvY2FsaXphdGlvbi5nZXQoXCJVc2VyUGFzc3dvcmRVcGRhdGVDaGFuZ2VkXCIpLCAxMDAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlQXV0aG9yaXplU3RhdHVzKGF1dGhvcml6ZWQpIHtcclxuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKENvbW1vblVzZXJzQWN0aW9ucy51cGRhdGVBdXRob3JpemVTdGF0dXMoeyB1c2VyRGV0YWlsczogdGhpcy5wcm9wcy51c2VyRGV0YWlscyB9LCBhdXRob3JpemVkLCB0aGlzLnByb3BzLmZpbHRlciwgKCkgPT4ge1xyXG4gICAgICAgICAgICB1dGlsaXRpZXMubm90aWZ5KGF1dGhvcml6ZWQgPyBMb2NhbGl6YXRpb24uZ2V0KFwiVXNlckF1dGhvcml6ZWRcIikgOkxvY2FsaXphdGlvbi5nZXQoXCJVc2VyVW5BdXRob3JpemVkXCIpLCAzMDAwKTtcclxuICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgICB1bkxvY2tVc2VyKCkge1xyXG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLnVuTG9ja1VzZXIoeyB1c2VyRGV0YWlsczogdGhpcy5wcm9wcy51c2VyRGV0YWlscyB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHV0aWxpdGllcy5ub3RpZnkoTG9jYWxpemF0aW9uLmdldChcIlVzZXJVbkxvY2tlZFwiKSwgMzAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlU3VwZXJVc2VyU3RhdHVzKHNldFN1cGVyVXNlcikge1xyXG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLnVwZGF0ZVN1cGVyVXNlclN0YXR1cyh7IHVzZXJJZDogdGhpcy5wcm9wcy51c2VySWQsIHNldFN1cGVyVXNlcjogc2V0U3VwZXJVc2VyIH0sIHRoaXMucHJvcHMuZmlsdGVyLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgdG9nZ2xlQ2hhbmdlUGFzc3dvcmQoY2xvc2UpIHtcclxuICAgICAgICBjb25zdCBzaG93ID0gIXRoaXMuc3RhdGUuQ2hhbmdlUGFzc3dvcmRWaXNpYmxlO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBDaGFuZ2VQYXNzd29yZFZpc2libGU6IHNob3cgfSk7XHJcbiAgICAgICAgaWYgKGNsb3NlKVxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdmlzaWJsZU1lbnVzID0gW3sga2V5OlwiVmlld1Byb2ZpbGVcIiwgdGl0bGU6ICBMb2NhbGl6YXRpb24uZ2V0KFwiVmlld1Byb2ZpbGVcIiksIGluZGV4OiAxMCB9XTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoY2FuUHJvbW90ZURlbW90ZSh0aGlzLnByb3BzLmFwcFNldHRpbmdzLmFwcGxpY2F0aW9uU2V0dGluZ3Muc2V0dGluZ3MsIHRoaXMuc3RhdGUudXNlckRldGFpbHMudXNlcklkKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS51c2VyRGV0YWlscy5pc1N1cGVyVXNlcikge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJsZU1lbnVzID0gW3sga2V5OlwiUHJvbW90ZVRvU3VwZXJVc2VyXCIsIHRpdGxlOiAgTG9jYWxpemF0aW9uLmdldChcIlByb21vdGVUb1N1cGVyVXNlclwiKSwgaW5kZXg6IDgwIH1dLmNvbmNhdCh2aXNpYmxlTWVudXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUudXNlckRldGFpbHMuaXNTdXBlclVzZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZpc2libGVNZW51cyA9IFt7IGtleTpcIkRlbW90ZVRvUmVndWxhclVzZXJcIiwgdGl0bGU6ICBMb2NhbGl6YXRpb24uZ2V0KFwiRGVtb3RlVG9SZWd1bGFyVXNlclwiKSwgaW5kZXg6IDgwIH1dLmNvbmNhdCh2aXNpYmxlTWVudXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYW5NYW5hZ2VQYXNzd29yZCh0aGlzLnByb3BzLmFwcFNldHRpbmdzLmFwcGxpY2F0aW9uU2V0dGluZ3Muc2V0dGluZ3MsIHRoaXMuc3RhdGUudXNlckRldGFpbHMudXNlcklkKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZpc2libGVNZW51cyA9IFt7IGtleTpcIlJlc2V0UGFzc3dvcmRcIiwgdGl0bGU6IExvY2FsaXphdGlvbi5nZXQoXCJSZXNldFBhc3N3b3JkXCIpLCBpbmRleDogNDAgfV0uY29uY2F0KHZpc2libGVNZW51cyk7XHJcbiAgICAgICAgICAgIHZpc2libGVNZW51cyA9IFt7IGtleTpcIkNoYW5nZVBhc3N3b3JkXCIsIHRpdGxlOiBMb2NhbGl6YXRpb24uZ2V0KFwiQ2hhbmdlUGFzc3dvcmRcIiksIGluZGV4OiAzMCB9XS5jb25jYXQodmlzaWJsZU1lbnVzKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnVzZXJEZXRhaWxzLm5lZWRVcGRhdGVQYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJsZU1lbnVzID0gW3sga2V5OlwiRm9yY2VDaGFuZ2VQYXNzd29yZFwiLCB0aXRsZTogIExvY2FsaXphdGlvbi5nZXQoXCJGb3JjZUNoYW5nZVBhc3N3b3JkXCIpLCBpbmRleDogNDAgfV0uY29uY2F0KHZpc2libGVNZW51cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhbkRlbGV0ZVVzZXIodGhpcy5wcm9wcy5hcHBTZXR0aW5ncy5hcHBsaWNhdGlvblNldHRpbmdzLnNldHRpbmdzLCB0aGlzLnN0YXRlLnVzZXJEZXRhaWxzLnVzZXJJZCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS51c2VyRGV0YWlscy5pc0RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHZpc2libGVNZW51cyA9IFt7IGtleTpcIlJlc3RvcmVVc2VyXCIsIHRpdGxlOiAgTG9jYWxpemF0aW9uLmdldChcIlJlc3RvcmVVc2VyXCIpLCBpbmRleDogNzAgfV0uY29uY2F0KHZpc2libGVNZW51cyk7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlTWVudXMgPSBbeyBrZXk6XCJSZW1vdmVVc2VyXCIsIHRpdGxlOiAgTG9jYWxpemF0aW9uLmdldChcIlJlbW92ZVVzZXJcIiksIGluZGV4OiA2MCB9XS5jb25jYXQodmlzaWJsZU1lbnVzKTtcclxuICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZpc2libGVNZW51cyA9IFt7IGtleTpcIkRlbGV0ZVVzZXJcIiwgdGl0bGU6ICBMb2NhbGl6YXRpb24uZ2V0KFwiRGVsZXRlVXNlclwiKSwgaW5kZXg6IDYwIH1dLmNvbmNhdCh2aXNpYmxlTWVudXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYW5BdXRob3JpemVVbkF1dGhvcml6ZVVzZXIodGhpcy5wcm9wcy5hcHBTZXR0aW5ncy5hcHBsaWNhdGlvblNldHRpbmdzLnNldHRpbmdzLCB0aGlzLnN0YXRlLnVzZXJEZXRhaWxzLnVzZXJJZCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS51c2VyRGV0YWlscy5hdXRob3JpemVkKSB7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlTWVudXMgPSBbeyBrZXk6XCJjbWRVbkF1dGhvcml6ZVwiLCB0aXRsZTogIExvY2FsaXphdGlvbi5nZXQoXCJjbWRVbkF1dGhvcml6ZVwiKSwgaW5kZXg6IDUwIH1dLmNvbmNhdCh2aXNpYmxlTWVudXMpO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZpc2libGVNZW51cyA9IFt7IGtleTpcImNtZEF1dGhvcml6ZVwiLCB0aXRsZTogIExvY2FsaXphdGlvbi5nZXQoXCJjbWRBdXRob3JpemVcIiksIGluZGV4OiA1MCB9XS5jb25jYXQodmlzaWJsZU1lbnVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS51c2VyRGV0YWlscy5pc0xvY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJsZU1lbnVzID0gW3sga2V5OlwiY21kVW5Mb2NrXCIsIHRpdGxlOiAgTG9jYWxpemF0aW9uLmdldChcImNtVW5sb2NrVXNlclwiKSwgaW5kZXg6IDEwMCB9XS5jb25jYXQodmlzaWJsZU1lbnVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gICAgICAgIHZpc2libGVNZW51cyA9IHZpc2libGVNZW51cy5jb25jYXQoKHRoaXMucHJvcHMuZ2V0VXNlck1lbnUgJiYgdGhpcy5wcm9wcy5nZXRVc2VyTWVudSh0aGlzLnN0YXRlLnVzZXJEZXRhaWxzKSkgfHwgW10pO1xyXG5cclxuICAgICAgICB2aXNpYmxlTWVudXMgPSB0aGlzLnNvcnQodmlzaWJsZU1lbnVzLCBcImluZGV4XCIpO1xyXG4gICAgICAgIGxldCBzaG93TWVudSA9IHRoaXMuc2hvd01lbnU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHNob3dNZW51KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICggPEdyaWRDZWxsIGNsYXNzTmFtZT1cImRubi11c2VyLW1lbnUgbWVudS1wb3B1cFwiIHJlZj17KG5vZGUpID0+IHRoaXMucm9vdEVsZW1lbnQgPSBub2RlfT5cclxuICAgICAgICAgICAgICAgIHshdGhpcy5zdGF0ZS5DaGFuZ2VQYXNzd29yZFZpc2libGUgJiZcclxuICAgICAgICAgICAgICAgICAgICA8TWVudT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZU1lbnVzLm1hcCgobWVudSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE1lbnVJdGVtIGtleT17YG1lbnVfaXRlbV8ke2luZGV4fWB9IG9uTWVudUFjdGlvbj17dGhpcy5vbkl0ZW1DbGljay5iaW5kKHRoaXMsIG1lbnUua2V5KSB9PnttZW51LnRpdGxlfTwvTWVudUl0ZW0+O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLkNoYW5nZVBhc3N3b3JkVmlzaWJsZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIDxDaGFuZ2VQYXNzd29yZCBvbkNhbmNlbD17dGhpcy50b2dnbGVDaGFuZ2VQYXNzd29yZC5iaW5kKHRoaXMsIHRydWUpIH0gdXNlcklkPXt0aGlzLnByb3BzLnVzZXJJZH0gLz5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIDxkaXYvPjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblVzZXJNZW51LnByb3BUeXBlcyA9IHtcclxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgdXNlcklkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXHJcbiAgICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgdXNlckRldGFpbHM6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgICBnZXRVc2VyTWVudTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIHVzZXJNZW51QWN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgYXBwU2V0dGluZ3M6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgICBmaWx0ZXI6IFByb3BUeXBlcy5udW1iZXJcclxufTtcclxuXHJcbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VyRGV0YWlsczogc3RhdGUudXNlcnMudXNlckRldGFpbHNcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShVc2VyTWVudSk7IiwiZXhwb3J0IGRlZmF1bHQgW3tpbmRleDo1LCBzaXplOjMwfSwge2luZGV4OjEwLCBzaXplOjMwfSwge2luZGV4OjE1LCBzaXplOjIwfSwge2luZGV4OjI1LCBzaXplOjIwfV07IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGUubGVzc1wiO1xyXG5pbXBvcnQge2Zvcm1hdERhdGUsIHNvcnR9IGZyb20gXCIuLi8uLi8uLi9oZWxwZXJzXCI7XHJcbmltcG9ydCBVc2VyTWVudSBmcm9tIFwiLi4vVXNlck1lbnVcIjtcclxuaW1wb3J0IExvY2FsaXphdGlvbiBmcm9tIFwibG9jYWxpemF0aW9uXCI7XHJcbmltcG9ydCBDb2x1bW5TaXplcyBmcm9tIFwiLi4vY29sdW1uU2l6ZXNcIjtcclxuaW1wb3J0IHtjYW5NYW5hZ2VSb2xlcywgY2FuTWFuYWdlUHJvZmlsZSwgY2FuVmlld1NldHRpbmdzfSBmcm9tIFwiLi4vLi4vcGVybWlzc2lvbkhlbHBlcnMuanNcIjtcclxuaW1wb3J0IHsgU3ZnSWNvbnMsIEdyaWRDZWxsLCBDb2xsYXBzaWJsZSwgVGV4dE92ZXJmbG93V3JhcHBlciB9IGZyb20gXCJAZG5uc29mdHdhcmUvZG5uLXJlYWN0LWNvbW1vblwiO1xyXG5cclxuY2xhc3MgRGV0YWlsc1JvdyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIG9wZW5lZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNob3dNZW51OiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgICAgICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgICAgICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICAgICAgbGV0IG9wZW5lZCA9ICh0aGlzLnByb3BzLm9wZW5JZCAhPT0gXCJcIiAmJiB0aGlzLnByb3BzLmlkID09PSB0aGlzLnByb3BzLm9wZW5JZCk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIG9wZW5lZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQpIHtcclxuICAgICAgICAvLyBOb3RlOiB0aGlzIHdvcmthcm91bmQgaXMgbmVlZGVkIGluIElFLiBUaGUgcmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGluIHRoZSBjb21wb25lbnRXaWxsVW5tb3VudCBpcyBjYWxsZWRcclxuICAgICAgICAvLyBiZWZvcmUgdGhlIGhhbmRsZUNsaWNrIGhhbmRsZXIgaXMgY2FsbGVkLCBidXQgaW4gc3BpdGUgb2YgdGhhdCwgdGhlIGhhbmRsZUNsaWNrIGlzIGV4ZWN1dGVkLiBUbyBhdm9pZFxyXG4gICAgICAgIC8vIHRoZSBcImZpbmRET01Ob2RlIHdhcyBjYWxsZWQgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC5cIiBlcnJvciB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCBiZWZvcmUgZXhlY3V0ZSB0aGlzIGNvZGVcclxuICAgICAgICBpZiAoIXRoaXMuX2lzTW91bnRlZCkgeyByZXR1cm47IH1cclxuICAgICAgICBpZiAoKHR5cGVvZiBldmVudC50YXJnZXQuY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGV2ZW50LnRhcmdldC5jbGFzc05hbWUuaW5kZXhPZihcImRvLW5vdC1jbG9zZVwiKSA9PT0gLTEpXHJcbiAgICAgICAgICAgICYmICEoZXZlbnQudGFyZ2V0LmlkID09PSBcImNvbmZpcm1idG5cIiB8fCBldmVudC50YXJnZXQuaWQgPT09IFwiY2FuY2VsYnRuXCIpICYmIHRoaXMucHJvcHMub3BlbklkICE9PSBcImFkZFwiKSB7XHJcbiAgICAgICAgICAgIGlmICgodGhpcy5wcm9wcy5vcGVuSWQgIT09IFwiXCIgJiYgdGhpcy5wcm9wcy5pZCA9PT0gdGhpcy5wcm9wcy5vcGVuSWQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLkNvbGxhcHNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0b2dnbGUoaW5kZXgpIHtcclxuICAgICAgICBpZiAoKHRoaXMucHJvcHMub3BlbklkICE9PSBcIlwiICYmIHRoaXMucHJvcHMuaWQgPT09IHRoaXMucHJvcHMub3BlbklkKSAmJiB0aGlzLnByb3BzLmN1cnJlbnRJbmRleCA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5Db2xsYXBzZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuT3BlbkNvbGxhcHNlKHRoaXMucHJvcHMuaWQsIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0b2dnbGVVc2VyTWVudSgpIHtcclxuICAgICAgICBjb25zdCBzaG93ID0gIXRoaXMuc3RhdGUuc2hvd01lbnU7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dNZW51OiBzaG93IH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1kYW5nZXIgKi9cclxuICAgIGdldFVzZXJBY3Rpb25zKHVzZXIsIG9wZW5lZCkge1xyXG4gICAgICAgIGxldCBhY3Rpb25JY29ucyA9IFtdO1xyXG4gICAgICAgIGFjdGlvbkljb25zID0gYWN0aW9uSWNvbnMuY29uY2F0KCh0aGlzLnByb3BzLmdldFVzZXJUYWJzSWNvbnMgJiYgdGhpcy5wcm9wcy5nZXRVc2VyVGFic0ljb25zKHVzZXIpKSB8fCBbXSk7XHJcblxyXG4gICAgICAgIGlmIChjYW5NYW5hZ2VQcm9maWxlKHRoaXMucHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhY3Rpb25JY29ucyA9IGFjdGlvbkljb25zLmNvbmNhdChbe1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDE1LFxyXG4gICAgICAgICAgICAgICAgaWNvbjogU3ZnSWNvbnMuVXNlckljb24sXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogTG9jYWxpemF0aW9uLmdldChcIk1hbmFnZVByb2ZpbGUudGl0bGVcIilcclxuICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FuVmlld1NldHRpbmdzKHRoaXMucHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncykpIHtcclxuICAgICAgICAgICAgYWN0aW9uSWNvbnMgPSBhY3Rpb25JY29ucy5jb25jYXQoW3tcclxuICAgICAgICAgICAgICAgIGluZGV4OiAxMCxcclxuICAgICAgICAgICAgICAgIGljb246IFN2Z0ljb25zLlNldHRpbmdzSWNvbixcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBMb2NhbGl6YXRpb24uZ2V0KFwiTWFuYWdlU2V0dGluZ3MudGl0bGVcIilcclxuICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNhbk1hbmFnZVJvbGVzKHRoaXMucHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncywgdXNlcikpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBhY3Rpb25JY29ucyA9IGFjdGlvbkljb25zLmNvbmNhdChbe1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDUsXHJcbiAgICAgICAgICAgICAgICBpY29uOiBTdmdJY29ucy5TaGllbGRJY29uLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IExvY2FsaXphdGlvbi5nZXQoXCJNYW5hZ2VSb2xlcy50aXRsZVwiKVxyXG4gICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgbGV0IHVzZXJBY3Rpb25zID0gc29ydChhY3Rpb25JY29ucywgXCJpbmRleFwiLCBcImRlc2NcIikubWFwKChhY3Rpb25JY29uKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gPGRpdiBrZXk9e2B1c2VyX2FjdGlvbl8ke2l9YH0gdGl0bGU9e2FjdGlvbkljb24udGl0bGV9IGNsYXNzTmFtZT17IFwiZXh0ZW5zaW9uLWFjdGlvbiBcIiArICEob3BlbmVkICYmIHRoaXMucHJvcHMuY3VycmVudEluZGV4ID09PSBpKSB9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogYWN0aW9uSWNvbi5pY29uIH19IG9uQ2xpY2s9eyB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMsIGkpIH0gPjwvZGl2PjtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKFs8ZGl2IGtleT17YHVzZXJfYWN0aW9uX3dyYXBwZXJfJHt1c2VyLnVzZXJJZH1gfSBzdHlsZT17eyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJleHRlbnNpb24tYWN0aW9uIFwiICsgIXRoaXMuc3RhdGUuc2hvd01lbnV9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogU3ZnSWNvbnMuTW9yZU1lbnVJY29uIH19XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZVVzZXJNZW51LmJpbmQodGhpcykgfT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5zaG93TWVudSAmJiA8VXNlck1lbnUgZmlsdGVyPXt0aGlzLnByb3BzLmZpbHRlcn0gYXBwU2V0dGluZ3M9e3RoaXMucHJvcHMuYXBwU2V0dGluZ3N9IGdldFVzZXJNZW51PXt0aGlzLnByb3BzLmdldFVzZXJNZW51ICYmIHRoaXMucHJvcHMuZ2V0VXNlck1lbnUuYmluZCh0aGlzKX0gdXNlck1lbnVBY3Rpb249e3RoaXMucHJvcHMudXNlck1lbnVBY3Rpb24gJiYgdGhpcy5wcm9wcy51c2VyTWVudUFjdGlvbi5iaW5kKHRoaXMpfSBvbkNsb3NlPXt0aGlzLnRvZ2dsZVVzZXJNZW51LmJpbmQodGhpcykgfSBcclxuICAgICAgICAgICAgICAgIHVzZXJJZD17dXNlci51c2VySWR9Lz4gfVxyXG4gICAgICAgIDwvZGl2Pl0pLmNvbmNhdCh1c2VyQWN0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBnZXRVc2VyQ29sdW1ucyh1c2VyLCBpZCwgb3BlbmVkKSB7XHJcbiAgICAgICAgbGV0IHVzZXJBY3Rpb25zID0gdGhpcy5nZXRVc2VyQWN0aW9ucyh1c2VyLCBvcGVuZWQpO1xyXG4gICAgICAgIGxldCBleHRyYUNvbHVtbnMgPSB0aGlzLnByb3BzLmdldFVzZXJDb2x1bW5zICYmIHRoaXMucHJvcHMuZ2V0VXNlckNvbHVtbnModXNlcik7XHJcbiAgICAgICAgbGV0IGNvbHVtblNpemVzID10aGlzLnByb3BzLmNvbHVtblNpemVzIT09dW5kZWZpbmVkPyB0aGlzLnByb3BzLmNvbHVtblNpemVzOiBDb2x1bW5TaXplcztcclxuICAgICAgICBsZXQgdXNlckNvbHVtbnMgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGluZGV4OiA1LFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogPEdyaWRDZWxsIGNvbHVtblNpemU9e2NvbHVtblNpemVzLmZpbmQoeD0+eC5pbmRleD09PTUpLnNpemV9ICBjbGFzc05hbWU9e1widXNlci1uYW1lc1wiICsgKHVzZXIuaXNEZWxldGVkID8gXCIgZGVsZXRlZFwiIDogXCJcIikgfT5cclxuICAgICAgICAgICAgICAgICAgICA8aDY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0T3ZlcmZsb3dXcmFwcGVyIGNsYXNzTmFtZT1cImVtYWlsLWxpbmtcIiB0ZXh0PXt1c2VyLmRpc3BsYXlOYW1lfSBtYXhXaWR0aD17MTI1fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICB7dXNlci5kaXNwbGF5TmFtZSAhPT0gXCItXCIgJiYgPHA+e3VzZXIudXNlck5hbWV9PC9wPiB9XHJcbiAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogMTAsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiA8R3JpZENlbGwgY29sdW1uU2l6ZT17Y29sdW1uU2l6ZXMuZmluZCh4PT54LmluZGV4PT09MTApLnNpemV9ICBjbGFzc05hbWU9e1widXNlci1lbWFpbHNcIiArICh1c2VyLmlzRGVsZXRlZCA/IFwiIGRlbGV0ZWRcIiA6IFwiXCIpIH0gPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0T3ZlcmZsb3dXcmFwcGVyIGNsYXNzTmFtZT1cImVtYWlsLWxpbmtcIiBpc0FuY2hvcj17dHJ1ZX0gaHJlZj17XCJtYWlsdG86XCIgKyB1c2VyLmVtYWlsfSB0ZXh0PXt1c2VyLmVtYWlsfSBtYXhXaWR0aD17MTI1fS8+XHJcbiAgICAgICAgICAgICAgICA8L0dyaWRDZWxsID5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDE1LFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogPEdyaWRDZWxsIGNvbHVtblNpemU9e2NvbHVtblNpemVzLmZpbmQoeD0+eC5pbmRleD09PTE1KS5zaXplfSAgY2xhc3NOYW1lPXtcInVzZXItam9pbmVkXCIgKyAodXNlci5pc0RlbGV0ZWQgPyBcIiBkZWxldGVkXCIgOiBcIlwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAge3VzZXIuY3JlYXRlZE9uRGF0ZSAhPT0gXCItXCIgJiYgPHA+e2Zvcm1hdERhdGUodXNlci5jcmVhdGVkT25EYXRlKSB9PC9wPn1cclxuICAgICAgICAgICAgICAgICAgICB7dXNlci5jcmVhdGVkT25EYXRlID09PSBcIi1cIiAmJiB1c2VyLmNyZWF0ZWRPbkRhdGV9XHJcbiAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogMjUsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiBpZCAhPT0gXCJhZGRcIiAmJiA8R3JpZENlbGwgY29sdW1uU2l6ZT17Y29sdW1uU2l6ZXMuZmluZCh4PT54LmluZGV4PT09MjUpLnNpemV9IHN0eWxlPXt7ZmxvYXQ6XCJyaWdodFwiLCB0ZXh0QWxpZ246XCJyaWdodFwiLCBwYWRkaW5nUmlnaHQ6IDJ9fT57dXNlckFjdGlvbnN9PC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0uY29uY2F0KChleHRyYUNvbHVtbnMpIHx8IFtdKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNvcnQodXNlckNvbHVtbnMsIFwiaW5kZXhcIikubWFwKChjb2x1bW4pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbHVtbi5jb250ZW50O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcclxuICAgICAgICBsZXQge3VzZXJ9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBsZXQgb3BlbmVkID0gKHByb3BzLm9wZW5JZCAhPT0gXCJcIiAmJiBwcm9wcy5pZCA9PT0gcHJvcHMub3BlbklkKTtcclxuICAgICAgICBsZXQgdW5pcXVlSWQgPSBcInVzZXJSb3ctXCIgKyBNYXRoLnJhbmRvbSgpICsgRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAodXNlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBhdmF0YXI6IFwiLVwiLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IFwiLVwiLFxyXG4gICAgICAgICAgICAgICAgdXNlck5hbWU6IFwiLVwiLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6IFwiLVwiLFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlZE9uRGF0ZTogXCItXCIsXHJcbiAgICAgICAgICAgICAgICBhdXRob3JpemVkOiBcIi1cIlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdXNlckNvbHVtbnMgPSB0aGlzLmdldFVzZXJDb2x1bW5zKHVzZXIsIHByb3BzLmlkLCBvcGVuZWQpO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLWRhbmdlciAqL1xyXG4gICAgICAgICAgICA8R3JpZENlbGwgY2xhc3NOYW1lPXtcImNvbGxhcHNpYmxlLWNvbXBvbmVudC11c2Vyc1wifSBpZD17dW5pcXVlSWR9IHJlZj17KG5vZGUpID0+IHRoaXMucm9vdEVsZW1lbnQgPSBub2RlfT5cclxuICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCAgY2xhc3NOYW1lPXtcImNvbGxhcHNpYmxlLWhlYWRlci11c2VycyBcIiArICFvcGVuZWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCBjbGFzc05hbWU9e3N0eWxlcy5leHRlbnNpb25EZXRhaWxSb3cgKyBcIiBcIiArIHByb3BzLmFkZElzT3BlbmVkfSBjb2x1bW5TaXplPXsxMDB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7KCFwcm9wcy5hZGRJc09wZW5lZCB8fCBwcm9wcy5hZGRJc09wZW5lZCA9PT0gXCJhZGQtb3BlbmVkXCIpICYmIDxHcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt1c2VyQ29sdW1uc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2xsYXBzaWJsZSBhY2NvcmRpb249e3RydWV9IGlzT3BlbmVkPXtvcGVuZWR9IGtlZXBDb2xsYXBzZWRDb250ZW50PXt0cnVlfSBjbGFzc05hbWU9XCJ1c2VyLWRldGFpbC1yb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtvcGVuZWQgJiYgcHJvcHMuY2hpbGRyZW4gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbGxhcHNpYmxlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkRldGFpbHNSb3cucHJvcFR5cGVzID0ge1xyXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcclxuICAgIE9wZW5Db2xsYXBzZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICBDb2xsYXBzZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICBpZDogUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIG9wZW5JZDogUHJvcFR5cGVzLnN0cmluZyxcclxuICAgIGN1cnJlbnRJbmRleDogUHJvcFR5cGVzLm51bWJlcixcclxuICAgIGdldFVzZXJUYWJzSWNvbnM6IFByb3BUeXBlcy5mdW5jLFxyXG4gICAgZ2V0VXNlckNvbHVtbnM6IFByb3BUeXBlcy5mdW5jLFxyXG4gICAgZ2V0VXNlck1lbnU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICB1c2VyTWVudUFjdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIGFwcFNldHRpbmdzOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gICAgY29sdW1uU2l6ZXM6IFByb3BUeXBlcy5hcnJheSxcclxuICAgIGZpbHRlcjogUHJvcFR5cGVzLm51bWJlclxyXG59O1xyXG5cclxuRGV0YWlsc1Jvdy5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBpc0V2b3E6IGZhbHNlXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEZXRhaWxzUm93OyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL3N0eWxlLmxlc3NcIjtcclxuXHJcbmNsYXNzIENvbGxhcHNpYmxlU3dpdGNoZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gcHJvcHMucmVuZGVySW5kZXggPj0gMCAmJiBwcm9wcy5jaGlsZHJlbltwcm9wcy5yZW5kZXJJbmRleF07XHJcbiAgICB9XHJcbn1cclxuQ29sbGFwc2libGVTd2l0Y2hlci5wcm9wVHlwZXMgPSB7XHJcbiAgICByZW5kZXJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcclxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYXJyYXlcclxufTtcclxuQ29sbGFwc2libGVTd2l0Y2hlci5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgICByZW5kZXJJbmRleDogMFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKENvbGxhcHNpYmxlU3dpdGNoZXIpOyIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZWxlc3MtZXNjYXBlICovXHJcbmV4cG9ydCBjb25zdCBQYXNzd29yZFN0cmVuZ3RoVHlwZSA9IHtcclxuICAgIFdFQUs6IFwid2Vha1wiLFxyXG4gICAgRkFJUjogXCJmYWlyXCIsXHJcbiAgICBTVFJPTkc6IFwic3Ryb25nXCJcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRQYXNzd29yZFN0cmVuZ3RoID0gKHBhc3N3b3JkLCBwYXNzd29yZFN0cmVuZ3RoT3B0aW9ucykgPT4ge1xyXG4gICAgaWYgKHBhc3N3b3JkU3RyZW5ndGhPcHRpb25zID09PSB1bmRlZmluZWQgfHwgcGFzc3dvcmRTdHJlbmd0aE9wdGlvbnMgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcFN0cmVuZ3RoUmF0aW5nID0gcGFzc3dvcmRTdHJlbmd0aFJhdGluZyhwYXNzd29yZCxwYXNzd29yZFN0cmVuZ3RoT3B0aW9ucyk7XHJcbiAgIFxyXG4gICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8PSAyICkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKHBTdHJlbmd0aFJhdGluZy5yYXRpbmcgPCAzICkge1xyXG4gICAgICAgIHJldHVybiBQYXNzd29yZFN0cmVuZ3RoVHlwZS5XRUFLO1xyXG4gICAgfVxyXG4gICAgaWYgKHBTdHJlbmd0aFJhdGluZy5yYXRpbmcgPCA1KSB7XHJcbiAgICAgICAgcmV0dXJuIFBhc3N3b3JkU3RyZW5ndGhUeXBlLkZBSVI7XHJcbiAgICB9XHJcbiAgICBpZiAocFN0cmVuZ3RoUmF0aW5nLnJhdGluZyA+PSA1KSB7XHJcbiAgICAgICAgcmV0dXJuIFBhc3N3b3JkU3RyZW5ndGhUeXBlLlNUUk9ORyA7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcGFzc3dvcmRTdHJlbmd0aFJhdGluZyA9IChwYXNzd29yZCwgb3B0aW9ucykgPT4ge1xyXG4gICAgbGV0IHJhdGluZyA9IDA7XHJcblxyXG4gICAgLy90aGlzIG5leHQgcHJvcGVydHkgd2lsbCBiZSBpbml0aWFsaXNlZCB3aXRoIGEgc2VydmVyIHZhbHVlXHJcbiAgICBsZXQgbWluTGVuZ3RoID0gb3B0aW9ucy5taW5MZW5ndGg7XHJcblxyXG4gICAgbGV0IGhhc09uZVVwcGVyQ2FzZUNoYXIgPSBmYWxzZTtcclxuICAgIGxldCBoYXNPbmVMb3dlckNhc2VDaGFyID0gZmFsc2U7XHJcbiAgICBsZXQgaGFzTWluTnVtYmVyT2ZTcGVjaWFsQ2hhcnMgPSBmYWxzZTtcclxuICAgIGxldCBoYXNPbmVOdW1lcmljQ2hhciA9IGZhbHNlO1xyXG4gICAgbGV0IGhhc0xlbmd0aE9mTkNoYXJzID0gZmFsc2U7XHJcbiAgICBsZXQgbWF0Y2hWYWxpZGF0aW9uRXhwcmVzc2lvbiA9IGZhbHNlO1xyXG5cclxuICAgIGxldCBtaW5OdW1iZXJPZlNwZWNpYWxDaGFycyA9IG9wdGlvbnMubWluTnVtYmVyT2ZTcGVjaWFsQ2hhcnMgfHwgMDtcclxuICAgIGxldCB2YWxpZGF0aW9uRXhwcmVzc2lvbiA9IG9wdGlvbnMudmFsaWRhdGlvbkV4cHJlc3Npb24gfHwgXCJcIjtcclxuXHJcbiAgICBpZiAocGFzc3dvcmQubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICBpZiAocGFzc3dvcmQubWF0Y2goL1thLXpdLykpIHtcclxuICAgICAgICAgICAgcmF0aW5nKys7XHJcbiAgICAgICAgICAgIGhhc09uZUxvd2VyQ2FzZUNoYXIgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFzc3dvcmQubWF0Y2goL1tBLVpdLykpIHtcclxuICAgICAgICAgICAgcmF0aW5nKys7XHJcbiAgICAgICAgICAgIGhhc09uZVVwcGVyQ2FzZUNoYXIgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFzc3dvcmQubWF0Y2goL1swLTldL2cpKSB7XHJcbiAgICAgICAgICAgIHJhdGluZysrO1xyXG4gICAgICAgICAgICBoYXNPbmVOdW1lcmljQ2hhciA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWF0Y2hlcyA9IHBhc3N3b3JkLm1hdGNoKC9bISxALCMsJCwlLCYsKiwoLCksXFwtLF8sPSwrLFxcJyxcXFwiLFxcXFwsfCxcXCwsPCwuLD4sOyw6LC8sPyxcXFsseyxcXF0sfV0vZyk7XHJcbiAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPj0gbWluTnVtYmVyT2ZTcGVjaWFsQ2hhcnMpIHtcclxuICAgICAgICAgICAgcmF0aW5nKys7XHJcbiAgICAgICAgICAgIGhhc01pbk51bWJlck9mU3BlY2lhbENoYXJzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXNzd29yZC5sZW5ndGggPj0gbWluTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJhdGluZysrO1xyXG4gICAgICAgICAgICBoYXNMZW5ndGhPZk5DaGFycyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFzc3dvcmQubGVuZ3RoID49IG1pbkxlbmd0aCArIDMpIHtcclxuICAgICAgICAgICAgcmF0aW5nKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsaWRhdGlvbkV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgbWF0Y2hWYWxpZGF0aW9uRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAodmFsaWRhdGlvbkV4cHJlc3Npb24sIFwiZ1wiICkudGVzdChwYXNzd29yZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByYXRpbmc6IHJhdGluZyxcclxuICAgICAgICBtYXhSYXRpbmc6IDUsXHJcbiAgICAgICAgaGFzT25lVXBwZXJDYXNlQ2hhcjogaGFzT25lVXBwZXJDYXNlQ2hhcixcclxuICAgICAgICBoYXNPbmVMb3dlckNhc2VDaGFyOiBoYXNPbmVMb3dlckNhc2VDaGFyLFxyXG4gICAgICAgIGhhc01pbk51bWJlck9mU3BlY2lhbENoYXJzOiBoYXNNaW5OdW1iZXJPZlNwZWNpYWxDaGFycyxcclxuICAgICAgICBoYXNPbmVOdW1lcmljQ2hhcjogaGFzT25lTnVtZXJpY0NoYXIsXHJcbiAgICAgICAgaGFzTGVuZ3RoT2ZOQ2hhcnM6IGhhc0xlbmd0aE9mTkNoYXJzLFxyXG4gICAgICAgIG1hdGNoVmFsaWRhdGlvbkV4cHJlc3Npb246IG1hdGNoVmFsaWRhdGlvbkV4cHJlc3Npb25cclxuICAgIH07XHJcbn07IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCAgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCB7IFNpbmdsZUxpbmVJbnB1dFdpdGhFcnJvciB9ZnJvbSBcIkBkbm5zb2Z0d2FyZS9kbm4tcmVhY3QtY29tbW9uXCI7XHJcbmltcG9ydCBMb2NhbGl6YXRpb24gZnJvbSBcImxvY2FsaXphdGlvblwiO1xyXG5pbXBvcnQgeyBnZXRQYXNzd29yZFN0cmVuZ3RoIH0gZnJvbSBcInV0aWxzL1Bhc3N3b3JkU3RyZW5ndGhcIjtcclxuaW1wb3J0IHtDb21tb25Vc2Vyc0FjdGlvbnMgYXMgVXNlckFjdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vYWN0aW9uc1wiO1xyXG5cclxuaW1wb3J0IFwiLi9zdHlsZS5sZXNzXCI7XHJcblxyXG5jbGFzcyBQYXNzd29yZCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB0aGlzLnByb3BzLmxvYWRQYXNzd29yZFN0cmVuZ3RoT3B0aW9ucygpO1xyXG4gICAgfVxyXG4gICBcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPFNpbmdsZUxpbmVJbnB1dFdpdGhFcnJvciBsYWJlbD17TG9jYWxpemF0aW9uLmdldChcIlBhc3N3b3JkXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICBlcnJvcj17dGhpcy5wcm9wcy5lcnJvci5wYXNzd29yZH1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vbkNoYW5nZVBhc3N3b3JkIH1cclxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIlBhc3N3b3JkLkhlbHBcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtMb2NhbGl6YXRpb24uZ2V0KFwiUGFzc3dvcmQuUmVxdWlyZWRcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt0aGlzLnByb3BzLnN0eWxlfVxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3R5bGU9eyF0aGlzLnByb3BzLnJlcXVpcmVzUXVlc3Rpb25BbmRBbnN3ZXIgPyB7IG1hcmdpbkJvdHRvbTogMTUgfSA6IHsgbWFyZ2luQm90dG9tOiAwIH19XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcclxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLlVzZXJEZXRhaWxzLnBhc3N3b3JkfSAgdGFiSW5kZXg9ezd9Lz5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwicGFzc3dvcmRTdHJlbmd0aEJhclwiIGNsYXNzTmFtZT17XCJwYXNzd29yZFN0cmVuZ3RoIFwiICsgZ2V0UGFzc3dvcmRTdHJlbmd0aCh0aGlzLnByb3BzLlVzZXJEZXRhaWxzLnBhc3N3b3JkLCB0aGlzLnByb3BzLnBhc3N3b3JkU3RyZW5ndGhPcHRpb25zKX0+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwicGFzc3dvcmRTdHJlbmd0aExhYmVsXCIgY2xhc3NOYW1lPXtcInBhc3N3b3JkU3RyZW5ndGhMYWJlbCBcIiArIGdldFBhc3N3b3JkU3RyZW5ndGgodGhpcy5wcm9wcy5Vc2VyRGV0YWlscy5wYXNzd29yZCwgdGhpcy5wcm9wcy5wYXNzd29yZFN0cmVuZ3RoT3B0aW9ucyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtnZXRQYXNzd29yZFN0cmVuZ3RoKHRoaXMucHJvcHMuVXNlckRldGFpbHMucGFzc3dvcmQsIHRoaXMucHJvcHMucGFzc3dvcmRTdHJlbmd0aE9wdGlvbnMpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcblBhc3N3b3JkLnByb3BUeXBlcyA9IHtcclxuICAgIGVycm9yOlByb3BUeXBlcy5vYmplY3QsXHJcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG4gICAgVXNlckRldGFpbHM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcclxuICAgIHJlcXVpcmVzUXVlc3Rpb25BbmRBbnN3ZXIgOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG4gICAgb25DaGFuZ2VQYXNzd29yZCA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICBwYXNzd29yZFN0cmVuZ3RoT3B0aW9ucyA6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgICBsb2FkUGFzc3dvcmRTdHJlbmd0aE9wdGlvbnMgOiBQcm9wVHlwZXMuZnVuY1xyXG59O1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBhc3N3b3JkU3RyZW5ndGhPcHRpb25zIDogc3RhdGUudXNlcnMucGFzc3dvcmRTdHJlbmd0aE9wdGlvbnNcclxuICAgIH07XHJcbn07XHJcblxyXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbG9hZFBhc3N3b3JkU3RyZW5ndGhPcHRpb25zIDogKCkgPT57XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKFVzZXJBY3Rpb25zLnBhc3N3b3JkU3RyZW5ndGgoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLG1hcERpc3BhdGNoVG9Qcm9wcykoUGFzc3dvcmQpIDsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgTG9jYWxpemF0aW9uIGZyb20gXCJsb2NhbGl6YXRpb25cIjtcclxuaW1wb3J0IHsgQ29tbW9uVXNlcnNBY3Rpb25zIH0gZnJvbSBcIi4uLy4uL2FjdGlvbnNcIjtcclxuaW1wb3J0IHt2YWxpZGF0ZUVtYWlsfSBmcm9tIFwiLi4vLi4vaGVscGVyc1wiO1xyXG5pbXBvcnQgdXRpbGl0aWVzIGZyb20gXCJ1dGlsc1wiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL3N0eWxlLmxlc3NcIjtcclxuaW1wb3J0IFBhc3N3b3JkIGZyb20gXCIuLi9jb21tb24vUGFzc3dvcmRcIjtcclxuaW1wb3J0IHsgR3JpZENlbGwsIEdyaWRTeXN0ZW0sIFNpbmdsZUxpbmVJbnB1dFdpdGhFcnJvciwgQnV0dG9uLCBTd2l0Y2gsIENoZWNrYm94IH0gZnJvbSBcIkBkbm5zb2Z0d2FyZS9kbm4tcmVhY3QtY29tbW9uXCI7XHJcblxyXG5cclxuY29uc3QgaW5wdXRTdHlsZSA9IHsgd2lkdGg6IFwiMTAwJVwiIH07XHJcbmNvbnN0IG5ld1VzZXJSZWdpc3RyYXRpb25EZXRhaWxzID0ge1xyXG4gICAgZmlyc3ROYW1lOiBcIlwiLFxyXG4gICAgbGFzdE5hbWU6IFwiXCIsXHJcbiAgICBlbWFpbDogXCJcIixcclxuICAgIHVzZXJOYW1lOiBcIlwiLFxyXG4gICAgcGFzc3dvcmQ6IFwiXCIsXHJcbiAgICBxdWVzdGlvbjogXCJcIixcclxuICAgIGFuc3dlcjogXCJcIixcclxuICAgIHJhbmRvbVBhc3N3b3JkOiBmYWxzZSxcclxuICAgIGF1dGhvcml6ZTogdHJ1ZSxcclxuICAgIG5vdGlmeTogZmFsc2VcclxufTtcclxuXHJcbmNsYXNzIENyZWF0ZVVzZXJCb3ggZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgVXNlckRldGFpbHM6IE9iamVjdC5hc3NpZ24oe30sIG5ld1VzZXJSZWdpc3RyYXRpb25EZXRhaWxzKSxcclxuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiBcIlwiLFxyXG4gICAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBsYXN0TmFtZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB1c2VyTmFtZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBlbWFpbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb25maXJtUGFzc3dvcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmRzTWF0Y2g6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcXVlc3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYW5zd2VyOiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnN1Ym1pdHRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlUGFzc3dvcmQoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgVXNlckRldGFpbHM6e1xyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5Vc2VyRGV0YWlscyxwYXNzd29yZDogZXZlbnQudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVycm9yczp7Li4udGhpcy5zdGF0ZS5lcnJvcnMsIHBhc3N3b3JkOmZhbHNlfVxyXG4gICAgICAgIH0pOyBcclxuICAgIH1cclxuXHJcblxyXG4gICAgb25DaGFuZ2Uoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgbGV0IHtVc2VyRGV0YWlsc30gPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwicmFuZG9tUGFzc3dvcmRcIiB8fCBrZXkgPT09IFwiYXV0aG9yaXplXCIgfHwga2V5ID09PSBcIm5vdGlmeVwiKSB7XHJcbiAgICAgICAgICAgIFVzZXJEZXRhaWxzW2tleV0gPSBpdGVtO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcImNvbmZpcm1QYXNzd29yZFwiKSB7XHJcbiAgICAgICAgICAgIGxldCB7Y29uZmlybVBhc3N3b3JkfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZCA9IGl0ZW0udGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgY29uZmlybVBhc3N3b3JkIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgVXNlckRldGFpbHNba2V5XSA9IGl0ZW0udGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHt9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVGb3JtKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzYXZlKCkge1xyXG4gICAgICAgIHRoaXMuc3VibWl0dGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy52YWxpZGF0ZUZvcm0oKSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNhdmUoQ29tbW9uVXNlcnNBY3Rpb25zLmNyZWF0ZVVzZXIodGhpcy5zdGF0ZS5Vc2VyRGV0YWlscywgdGhpcy5wcm9wcy5maWx0ZXIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXRpZXMubm90aWZ5KExvY2FsaXphdGlvbi5nZXQoXCJVc2VyQ3JlYXRlZFwiKSwgMzAwMCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNsZWFyRm9ybShjYWxsYmFjaykge1xyXG4gICAgICAgIGxldCB7VXNlckRldGFpbHN9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgICBVc2VyRGV0YWlscyA9IE9iamVjdC5hc3NpZ24oe30sIG5ld1VzZXJSZWdpc3RyYXRpb25EZXRhaWxzKTtcclxuICAgICAgICBsZXQge2Vycm9yc30gPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgIGVycm9ycy5maXJzdE5hbWUgPSBmYWxzZTtcclxuICAgICAgICBlcnJvcnMubGFzdE5hbWUgPSBmYWxzZTtcclxuICAgICAgICBlcnJvcnMudXNlck5hbWUgPSBmYWxzZTtcclxuICAgICAgICBlcnJvcnMuZW1haWwgPSBmYWxzZTtcclxuICAgICAgICBlcnJvcnMucGFzc3dvcmQgPSBmYWxzZTtcclxuICAgICAgICBlcnJvcnMuY29uZmlybVBhc3N3b3JkID0gZmFsc2U7XHJcbiAgICAgICAgZXJyb3JzLnBhc3N3b3Jkc01hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgZXJyb3JzLnF1ZXN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgZXJyb3JzLmFuc3dlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3VibWl0dGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIFVzZXJEZXRhaWxzLFxyXG4gICAgICAgICAgICBlcnJvcnMsXHJcbiAgICAgICAgICAgIGNvbmZpcm1QYXNzd29yZDogXCJcIlxyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhckZvcm0oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2FuY2VsKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB2YWxpZGF0ZUZvcm0oKSB7XHJcbiAgICAgICAgY29uc3Qge3Byb3BzIH0gPSB0aGlzO1xyXG5cclxuICAgICAgICBsZXQgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIGxldCByZXF1aXJlc1F1ZXN0aW9uQW5kQW5zd2VyID0gcHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncy5yZXF1aXJlc1F1ZXN0aW9uQW5kQW5zd2VyO1xyXG4gICAgICAgIGlmICh0aGlzLnN1Ym1pdHRlZCkge1xyXG4gICAgICAgICAgICBsZXQge1VzZXJEZXRhaWxzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgICAgIGxldCB7ZXJyb3JzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgICAgIGVycm9ycy5maXJzdE5hbWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgZXJyb3JzLmxhc3ROYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGVycm9ycy51c2VyTmFtZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBlcnJvcnMuZW1haWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgZXJyb3JzLnBhc3N3b3JkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGVycm9ycy5jb25maXJtUGFzc3dvcmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZXJyb3JzLnBhc3N3b3Jkc01hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGVycm9ycy5xdWVzdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBlcnJvcnMuYW5zd2VyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChVc2VyRGV0YWlscy5maXJzdE5hbWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGVycm9ycy5maXJzdE5hbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoVXNlckRldGFpbHMubGFzdE5hbWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGVycm9ycy5sYXN0TmFtZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChVc2VyRGV0YWlscy51c2VyTmFtZSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzLnVzZXJOYW1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFVzZXJEZXRhaWxzLmVtYWlsID09PSBcIlwiIHx8ICF2YWxpZGF0ZUVtYWlsKFVzZXJEZXRhaWxzLmVtYWlsKSkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzLmVtYWlsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFVzZXJEZXRhaWxzLnJhbmRvbVBhc3N3b3JkID09PSBmYWxzZSAmJiBVc2VyRGV0YWlscy5wYXNzd29yZCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzLnBhc3N3b3JkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFVzZXJEZXRhaWxzLnJhbmRvbVBhc3N3b3JkID09PSBmYWxzZSAmJiB0aGlzLnN0YXRlLmNvbmZpcm1QYXNzd29yZCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzLmNvbmZpcm1QYXNzd29yZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFVzZXJEZXRhaWxzLnJhbmRvbVBhc3N3b3JkID09PSBmYWxzZSAmJiB0aGlzLnN0YXRlLmNvbmZpcm1QYXNzd29yZCAhPT0gVXNlckRldGFpbHMucGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgIGVycm9ycy5wYXNzd29yZHNNYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocmVxdWlyZXNRdWVzdGlvbkFuZEFuc3dlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKFVzZXJEZXRhaWxzLnF1ZXN0aW9uID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnF1ZXN0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKFVzZXJEZXRhaWxzLmFuc3dlciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5hbnN3ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcnMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7cHJvcHMsIHN0YXRlIH0gPSB0aGlzO1xyXG4gICAgICAgIGxldCByZXF1aXJlc1F1ZXN0aW9uQW5kQW5zd2VyID0gcHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncy5yZXF1aXJlc1F1ZXN0aW9uQW5kQW5zd2VyO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxHcmlkQ2VsbCBjbGFzc05hbWU9e3N0eWxlcy5uZXdFeHRlbnNpb25Nb2RhbH0gc3R5bGU9e3Byb3BzLnN0eWxlfT5cclxuICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCBjbGFzc05hbWU9XCJuZXctdXNlci1ib3hcIj5cclxuICAgICAgICAgICAgICAgICAgICA8R3JpZFN5c3RlbSBjbGFzc05hbWU9XCJ3aXRoLXJpZ2h0LWJvcmRlciB0b3AtaGFsZlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpbmdsZUxpbmVJbnB1dFdpdGhFcnJvciB2YWx1ZT17c3RhdGUuVXNlckRldGFpbHMuZmlyc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXtzdGF0ZS5lcnJvcnMuZmlyc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcywgXCJmaXJzdE5hbWVcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtMb2NhbGl6YXRpb24uZ2V0KFwiRmlyc3ROYW1lXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIkZpcnN0TmFtZS5IZWxwXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJGaXJzdE5hbWUuUmVxdWlyZWRcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtpbnB1dFN0eWxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTdHlsZT17eyBtYXJnaW5Cb3R0b206IDI1IH19IHRhYkluZGV4PXsxfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIHZhbHVlPXtzdGF0ZS5Vc2VyRGV0YWlscy51c2VyTmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17c3RhdGUuZXJyb3JzLnVzZXJOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcywgXCJ1c2VyTmFtZVwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e0xvY2FsaXphdGlvbi5nZXQoXCJVc2VybmFtZVwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcE1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJVc2VybmFtZS5IZWxwXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJVc2VybmFtZS5SZXF1aXJlZFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2lucHV0U3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjUgfX0gIHRhYkluZGV4PXszfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoIHZhbHVlPXtzdGF0ZS5Vc2VyRGV0YWlscy5hdXRob3JpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e0xvY2FsaXphdGlvbi5nZXQoXCJBcHByb3ZlZFwiKX0gdGl0bGU9e0xvY2FsaXphdGlvbi5nZXQoXCJBcHByb3ZlZC5IZWxwXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcywgXCJhdXRob3JpemVcIikgfSAgdGFiSW5kZXg9ezV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25UZXh0PXtMb2NhbGl6YXRpb24uZ2V0KFwiU3dpdGNoT25cIil9IG9mZlRleHQ9e0xvY2FsaXphdGlvbi5nZXQoXCJTd2l0Y2hPZmZcIil9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIHZhbHVlPXtzdGF0ZS5Vc2VyRGV0YWlscy5sYXN0TmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17c3RhdGUuZXJyb3JzLmxhc3ROYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcywgXCJsYXN0TmFtZVwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e0xvY2FsaXphdGlvbi5nZXQoXCJMYXN0TmFtZVwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcE1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJMYXN0TmFtZS5IZWxwXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJMYXN0TmFtZS5SZXF1aXJlZFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2lucHV0U3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjUgfX0gIHRhYkluZGV4PXsyfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIHZhbHVlPXtzdGF0ZS5Vc2VyRGV0YWlscy5lbWFpbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17c3RhdGUuZXJyb3JzLmVtYWlsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcywgXCJlbWFpbFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e0xvY2FsaXphdGlvbi5nZXQoXCJFbWFpbFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcE1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJFbWFpbC5IZWxwXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJFbWFpbC5SZXF1aXJlZFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2lucHV0U3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjUgfX0gIHRhYkluZGV4PXs0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoIHZhbHVlPXtzdGF0ZS5Vc2VyRGV0YWlscy5yYW5kb21QYXNzd29yZH0gdGl0bGU9e0xvY2FsaXphdGlvbi5nZXQoXCJSYW5kb20uSGVscFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17TG9jYWxpemF0aW9uLmdldChcIlJhbmRvbVwiKSArIFwiOlwiIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMsIFwicmFuZG9tUGFzc3dvcmRcIikgfSAgdGFiSW5kZXg9ezZ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25UZXh0PXtMb2NhbGl6YXRpb24uZ2V0KFwiU3dpdGNoT25cIil9IG9mZlRleHQ9e0xvY2FsaXphdGlvbi5nZXQoXCJTd2l0Y2hPZmZcIil9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkU3lzdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIHshc3RhdGUuVXNlckRldGFpbHMucmFuZG9tUGFzc3dvcmQgJiYgPEdyaWRDZWxsPjxoci8+PC9HcmlkQ2VsbD59XHJcbiAgICAgICAgICAgICAgICAgICAgeyFzdGF0ZS5Vc2VyRGV0YWlscy5yYW5kb21QYXNzd29yZCAmJiA8R3JpZFN5c3RlbT5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhc3N3b3JkIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXtzdGF0ZS5lcnJvcnN9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlUGFzc3dvcmQ9e3RoaXMub25DaGFuZ2VQYXNzd29yZC5iaW5kKHRoaXMpfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17aW5wdXRTdHlsZX0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTdHlsZT17IXJlcXVpcmVzUXVlc3Rpb25BbmRBbnN3ZXIgPyB7IG1hcmdpbkJvdHRvbTogMTUgfSA6IHsgbWFyZ2luQm90dG9tOiAwIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlckRldGFpbHM9e3RoaXMuc3RhdGUuVXNlckRldGFpbHN9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTaW5nbGVMaW5lSW5wdXRXaXRoRXJyb3IgbGFiZWw9e0xvY2FsaXphdGlvbi5nZXQoXCJDb25maXJtXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17c3RhdGUuZXJyb3JzLmNvbmZpcm1QYXNzd29yZCB8fCBzdGF0ZS5lcnJvcnMucGFzc3dvcmRzTWF0Y2h9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLFwiY29uZmlybVBhc3N3b3JkXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIkNvbmZpcm0uSGVscFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U9e3N0YXRlLmVycm9ycy5jb25maXJtUGFzc3dvcmQgPyBMb2NhbGl6YXRpb24uZ2V0KFwiQ29uZmlybS5SZXF1aXJlZFwiKSA6IExvY2FsaXphdGlvbi5nZXQoXCJDb25maXJtTWlzbWF0Y2guRXJyb3JNZXNzYWdlXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17aW5wdXRTdHlsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTdHlsZT17IXJlcXVpcmVzUXVlc3Rpb25BbmRBbnN3ZXIgPyB7IG1hcmdpbkJvdHRvbTogMTUgfSA6IHsgbWFyZ2luQm90dG9tOiAwIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLmNvbmZpcm1QYXNzd29yZH0gIHRhYkluZGV4PXs4fS8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAge3JlcXVpcmVzUXVlc3Rpb25BbmRBbnN3ZXIgJiYgPEdyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIGxhYmVsPXtMb2NhbGl6YXRpb24uZ2V0KFwiUXVlc3Rpb25cIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yPXtzdGF0ZS5lcnJvcnMucXVlc3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLCBcInF1ZXN0aW9uXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIlF1ZXN0aW9uLkhlbHBcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtMb2NhbGl6YXRpb24uZ2V0KFwiUXVlc3Rpb24uUmVxdWlyZWRcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtpbnB1dFN0eWxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0U3R5bGU9e3sgbWFyZ2luQm90dG9tOiAxNSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLlVzZXJEZXRhaWxzLnF1ZXN0aW9ufSAgdGFiSW5kZXg9ezl9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIGxhYmVsPXtMb2NhbGl6YXRpb24uZ2V0KFwiQW5zd2VyXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17c3RhdGUuZXJyb3JzLmFuc3dlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMsIFwiYW5zd2VyXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIkFuc3dlci5IZWxwXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIkFuc3dlci5SZXF1aXJlZFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17aW5wdXRTdHlsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0U3R5bGU9e3sgbWFyZ2luQm90dG9tOiAxNSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtzdGF0ZS5Vc2VyRGV0YWlscy5hbnN3ZXJ9ICB0YWJJbmRleD17MTB9Lz48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCBjb2x1bW5TaXplPXsxMDB9IGNsYXNzTmFtZT1cImVtYWlsLW5vdGlmaWNhdGlvbi1saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja2JveCB2YWx1ZT17c3RhdGUuVXNlckRldGFpbHMubm90aWZ5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e0xvY2FsaXphdGlvbi5nZXQoXCJOb3RpZnlcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMsIFwibm90aWZ5XCIpIH0gIHRhYkluZGV4PXs5fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8R3JpZENlbGwgY29sdW1uU2l6ZT17MTAwfSBjbGFzc05hbWU9XCJtb2RhbC1mb290ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBpZD1cImNhbmNlbGJ0blwiICB0eXBlPVwic2Vjb25kYXJ5XCIgb25DbGljaz17dGhpcy5jYW5jZWwuYmluZCh0aGlzKSB9ICB0YWJJbmRleD17MTB9PntMb2NhbGl6YXRpb24uZ2V0KFwiYnRuQ2FuY2VsXCIpIH08L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBpZD1cImNvbmZpcm1idG5cIiB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMuc2F2ZS5iaW5kKHRoaXMpIH0gdGFiSW5kZXg9ezExfT57TG9jYWxpemF0aW9uLmdldChcImJ0blNhdmVcIikgfTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkNyZWF0ZVVzZXJCb3gucHJvcFR5cGVzID0ge1xyXG4gICAgc2F2ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgICBmaWx0ZXI6IFByb3BUeXBlcy5udW1iZXIsXHJcbiAgICBhcHBTZXR0aW5nczogUHJvcFR5cGVzLm9iamVjdFxyXG59O1xyXG5cclxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNhdmUgOiAoY2FsbGJhY2spID0+e1xyXG4gICAgICAgICAgICBkaXNwYXRjaChjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKCk9Pnt9LG1hcERpc3BhdGNoVG9Qcm9wcykoQ3JlYXRlVXNlckJveCk7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCBMb2NhbGl6YXRpb24gZnJvbSBcImxvY2FsaXphdGlvblwiO1xyXG5pbXBvcnQgeyBDb21tb25Vc2Vyc0FjdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vYWN0aW9uc1wiO1xyXG5pbXBvcnQge2Zvcm1hdERhdGUsIHZhbGlkYXRlRW1haWx9IGZyb20gXCIuLi8uLi8uLi9oZWxwZXJzXCI7XHJcbmltcG9ydCB1dGlsaXRpZXMgZnJvbSBcInV0aWxzXCI7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGUubGVzc1wiO1xyXG5pbXBvcnQgQ2hhbmdlUGFzc3dvcmQgZnJvbSBcIi4uL0NoYW5nZVBhc3N3b3JkXCI7XHJcbmltcG9ydCB7Y2FuTWFuYWdlUGFzc3dvcmQsIGNhbkVkaXRTZXR0aW5nc30gZnJvbSBcIi4uLy4uL3Blcm1pc3Npb25IZWxwZXJzLmpzXCI7XHJcbmltcG9ydCB7IEdyaWRDZWxsLCBHcmlkU3lzdGVtLCBTaW5nbGVMaW5lSW5wdXRXaXRoRXJyb3IsIEJ1dHRvbiB9IGZyb20gXCJAZG5uc29mdHdhcmUvZG5uLXJlYWN0LWNvbW1vblwiO1xyXG5cclxuY29uc3QgaW5wdXRTdHlsZSA9IHsgd2lkdGg6IFwiMTAwJVwiIH07XHJcbmNvbnN0IGJsYW5rQWNjb3VudFNldHRpbmdzID0ge1xyXG4gICAgdXNlcklkOiAwLFxyXG4gICAgZGlzcGxheU5hbWU6IFwiXCIsXHJcbiAgICB1c2VyTmFtZTogXCJcIixcclxuICAgIGVtYWlsOiBcIlwiXHJcbn07XHJcblxyXG5jbGFzcyBVc2VyU2V0dGluZ3MgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgYWNjb3VudFNldHRpbmdzOiBPYmplY3QuYXNzaWduKGJsYW5rQWNjb3VudFNldHRpbmdzKSxcclxuICAgICAgICAgICAgdXNlckRldGFpbHM6IHByb3BzLnVzZXJEZXRhaWxzLFxyXG4gICAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHVzZXJOYW1lOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIENoYW5nZVBhc3N3b3JkVmlzaWJsZTogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgICAgIGxldCB7cHJvcHN9ID0gdGhpcztcclxuICAgICAgICBpZiAocHJvcHMudXNlckRldGFpbHMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy51c2VyRGV0YWlscy51c2VySWQgIT09IHByb3BzLnVzZXJJZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdldFVzZXJEZXRhaWxzKHByb3BzLCBwcm9wcy51c2VySWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVVzZXJEZXRhaWxzU3RhdGUocHJvcHMudXNlckRldGFpbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMpIHtcclxuICAgICAgICBpZiAobmV3UHJvcHMudXNlckRldGFpbHMgPT09IHVuZGVmaW5lZCAmJiBuZXdQcm9wcy51c2VyRGV0YWlscy51c2VySWQgIT09IG5ld1Byb3BzLnVzZXJJZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdldFVzZXJEZXRhaWxzKG5ld1Byb3BzLCBuZXdQcm9wcy51c2VySWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVVzZXJEZXRhaWxzU3RhdGUobmV3UHJvcHMudXNlckRldGFpbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtYWtlQmxhbmtPYmoob2JqKSB7XHJcbiAgICAgICAgbGV0IG5ld09iamVjdCA9IE9iamVjdC5hc3NpZ24oe30sIG9iaik7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5ld09iamVjdCk7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBuZXdPYmplY3Rba2V5XSA9IFwiXCIpO1xyXG4gICAgICAgIHJldHVybiBuZXdPYmplY3Q7IFxyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJEZXRhaWxzKHByb3BzLCB1c2VySWQpIHtcclxuICAgICAgICBjb25zdCBhY2NvdW50U2V0dGluZ3MgPSB0aGlzLm1ha2VCbGFua09iaih0aGlzLnN0YXRlLmFjY291bnRTZXR0aW5ncyk7XHJcbiAgICAgICAgY29uc3QgdXNlckRldGFpbHMgPSB0aGlzLm1ha2VCbGFua09iaih0aGlzLnN0YXRlLnVzZXJEZXRhaWxzKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHthY2NvdW50U2V0dGluZ3MsIHVzZXJEZXRhaWxzLCBsb2FkaW5nOiB0cnVlfSk7XHJcbiAgICAgICAgcHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLmdldFVzZXJEZXRhaWxzKHsgdXNlcklkOiB1c2VySWQgfSwgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVVc2VyRGV0YWlsc1N0YXRlKGRhdGEpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVVzZXJEZXRhaWxzU3RhdGUoZGV0YWlscykge1xyXG4gICAgICAgIGxldCB1c2VyRGV0YWlscyA9IE9iamVjdC5hc3NpZ24oe30sIGRldGFpbHMpO1xyXG4gICAgICAgIGxldCB7YWNjb3VudFNldHRpbmdzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgYWNjb3VudFNldHRpbmdzLmRpc3BsYXlOYW1lID0gdXNlckRldGFpbHMuZGlzcGxheU5hbWU7XHJcbiAgICAgICAgYWNjb3VudFNldHRpbmdzLnVzZXJOYW1lID0gdXNlckRldGFpbHMudXNlck5hbWU7XHJcbiAgICAgICAgYWNjb3VudFNldHRpbmdzLmVtYWlsID0gdXNlckRldGFpbHMuZW1haWw7XHJcbiAgICAgICAgYWNjb3VudFNldHRpbmdzLnVzZXJJZCA9IHVzZXJEZXRhaWxzLnVzZXJJZDtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgYWNjb3VudFNldHRpbmdzLFxyXG4gICAgICAgICAgICB1c2VyRGV0YWlscyxcclxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgb25DaGFuZ2Uoa2V5LCBpdGVtKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9hZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB7YWNjb3VudFNldHRpbmdzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgYWNjb3VudFNldHRpbmdzW2tleV0gPSBpdGVtLnRhcmdldC52YWx1ZTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgYWNjb3VudFNldHRpbmdzIH0sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUZvcm0odHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy52YWxpZGF0ZUZvcm0oKSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKENvbW1vblVzZXJzQWN0aW9ucy51cGRhdGVVc2VyQmFzaWNJbmZvKHRoaXMuc3RhdGUuYWNjb3VudFNldHRpbmdzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXRpZXMubm90aWZ5KExvY2FsaXphdGlvbi5nZXQoXCJVc2VyVXBkYXRlZFwiKSwgMzAwMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFVzZXJEZXRhaWxzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUuYWNjb3VudFNldHRpbmdzLnVzZXJJZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNvbGxhcHNlKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICB2YWxpZGF0ZUZvcm0oKSB7XHJcbiAgICAgICAgbGV0IHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICBsZXQge2Vycm9yc30gPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgIGVycm9ycy5kaXNwbGF5TmFtZSA9IGZhbHNlO1xyXG4gICAgICAgIGVycm9ycy51c2VyTmFtZSA9IGZhbHNlO1xyXG4gICAgICAgIGVycm9ycy5lbWFpbCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCB7YWNjb3VudFNldHRpbmdzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgaWYgKGFjY291bnRTZXR0aW5ncy5kaXNwbGF5TmFtZSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICBlcnJvcnMuZGlzcGxheU5hbWUgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWNjb3VudFNldHRpbmdzLnVzZXJOYW1lID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGVycm9ycy51c2VyTmFtZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhY2NvdW50U2V0dGluZ3MuZW1haWwgPT09IFwiXCIgfHwgIXZhbGlkYXRlRW1haWwoYWNjb3VudFNldHRpbmdzLmVtYWlsKSkge1xyXG4gICAgICAgICAgICBlcnJvcnMuZW1haWwgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JzIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsaWQ7XHJcbiAgICB9XHJcbiAgICBvbkNhbmNlbFBhc3N3b3JkKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBDaGFuZ2VQYXNzd29yZFZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvbkNoYW5nZVBhc3N3b3JkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmxvYWRpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgQ2hhbmdlUGFzc3dvcmRWaXNpYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvbkZvcmNlUGFzc3dvcmRDaGFuZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubG9hZGluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLmZvcmNlQ2hhbmdlUGFzc3dvcmQoeyB1c2VySWQ6IHRoaXMucHJvcHMudXNlcklkIH0sICgpID0+IHtcclxuICAgICAgICAgICAgdXRpbGl0aWVzLm5vdGlmeShMb2NhbGl6YXRpb24uZ2V0KFwiVXNlclBhc3N3b3JkVXBkYXRlQ2hhbmdlZFwiKSwgMzAwMCk7XHJcbiAgICAgICAgICAgIGxldCB7dXNlckRldGFpbHN9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgICAgICAgdXNlckRldGFpbHMubmVlZFVwZGF0ZVBhc3N3b3JkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHVzZXJEZXRhaWxzIH0pO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIG9uU2VuZFBhc3N3b3JkTGluaygpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5sb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuc2VuZFBhc3N3b3JkUmVzZXRMaW5rKHsgdXNlcklkOiB0aGlzLnByb3BzLnVzZXJJZCB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHV0aWxpdGllcy5ub3RpZnkoTG9jYWxpemF0aW9uLmdldChcIlBhc3N3b3JkU2VudFwiKSwgMzAwMCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgc3RyaW5naWZ5Qm9vbGVhbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gTG9jYWxpemF0aW9uLmdldChcIlRydWVcIikgOiBMb2NhbGl6YXRpb24uZ2V0KFwiRmFsc2VcIik7ICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IHtzdGF0ZX0gPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiA8R3JpZENlbGwgY2xhc3NOYW1lPXtzdHlsZXMudXNlclNldHRpbmdzfT5cclxuICAgICAgICAgICAgPEdyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgPEdyaWRDZWxsIGNsYXNzTmFtZT1cIm91dGVyLWJveFwiIGNvbHVtblNpemU9ezUwfT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2hhbmdlUGFzc3dvcmQgdmlzaWJsZT17dGhpcy5zdGF0ZS5DaGFuZ2VQYXNzd29yZFZpc2libGV9IG9uQ2FuY2VsPXt0aGlzLm9uQ2FuY2VsUGFzc3dvcmQuYmluZCh0aGlzKSB9IHVzZXJJZD17dGhpcy5wcm9wcy51c2VySWR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7TG9jYWxpemF0aW9uLmdldChcIkFjY291bnRTZXR0aW5nc1wiKX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5sb2FkaW5nID8gXCJpc2xvYWRpbmdcIiA6IFwiXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIHZhbHVlPXtzdGF0ZS5hY2NvdW50U2V0dGluZ3MudXNlck5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17c3RhdGUuZXJyb3JzLnVzZXJOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLCBcInVzZXJOYW1lXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtMb2NhbGl6YXRpb24uZ2V0KFwiVXNlcm5hbWVcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcE1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJVc2VybmFtZS5IZWxwXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtMb2NhbGl6YXRpb24uZ2V0KFwiVXNlcm5hbWUuUmVxdWlyZWRcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2lucHV0U3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZD17Y2FuRWRpdFNldHRpbmdzKHRoaXMucHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjUgfX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U2luZ2xlTGluZUlucHV0V2l0aEVycm9yIHZhbHVlPXtzdGF0ZS5hY2NvdW50U2V0dGluZ3MuZGlzcGxheU5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17c3RhdGUuZXJyb3JzLmRpc3BsYXlOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLCBcImRpc3BsYXlOYW1lXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtMb2NhbGl6YXRpb24uZ2V0KFwiRGlzcGxheU5hbWVcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcE1lc3NhZ2U9e0xvY2FsaXphdGlvbi5nZXQoXCJEaXNwbGF5TmFtZS5IZWxwXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlPXtMb2NhbGl6YXRpb24uZ2V0KFwiRGlzcGxheU5hbWUuUmVxdWlyZWRcIikgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2lucHV0U3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZD17Y2FuRWRpdFNldHRpbmdzKHRoaXMucHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjUgfX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNpbmdsZUxpbmVJbnB1dFdpdGhFcnJvciB2YWx1ZT17c3RhdGUuYWNjb3VudFNldHRpbmdzLmVtYWlsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I9e3N0YXRlLmVycm9ycy5lbWFpbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcywgXCJlbWFpbFwiKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17TG9jYWxpemF0aW9uLmdldChcIkVtYWlsXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXBNZXNzYWdlPXtMb2NhbGl6YXRpb24uZ2V0KFwiRW1haWwuSGVscFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZT17TG9jYWxpemF0aW9uLmdldChcIkVtYWlsLlJlcXVpcmVkXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtpbnB1dFN0eWxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ9e2NhbkVkaXRTZXR0aW5ncyh0aGlzLnByb3BzLmFwcFNldHRpbmdzLmFwcGxpY2F0aW9uU2V0dGluZ3Muc2V0dGluZ3MpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTdHlsZT17eyBtYXJnaW5Cb3R0b206IDI1IH19Lz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICB7Y2FuTWFuYWdlUGFzc3dvcmQodGhpcy5wcm9wcy5hcHBTZXR0aW5ncy5hcHBsaWNhdGlvblNldHRpbmdzLnNldHRpbmdzLCB0aGlzLnN0YXRlLnVzZXJEZXRhaWxzLnVzZXJJZCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIGNsYXNzTmFtZT1cIm5vLXBhZGRpbmdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGl0bGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7TG9jYWxpemF0aW9uLmdldChcIlBhc3N3b3JkTWFuYWdlbWVudFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIGNsYXNzTmFtZT17XCJsaW5rXCIgKyAodGhpcy5zdGF0ZS5sb2FkaW5nID8gXCIgZGlzYWJsZWRcIiA6IFwiXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9e3RoaXMub25DaGFuZ2VQYXNzd29yZC5iaW5kKHRoaXMpIH0+WyB7TG9jYWxpemF0aW9uLmdldChcIkNoYW5nZVBhc3N3b3JkXCIpfSBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyFzdGF0ZS51c2VyRGV0YWlscy5uZWVkVXBkYXRlUGFzc3dvcmQgJiYgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIGNsYXNzTmFtZT17XCJsaW5rXCIgKyAodGhpcy5zdGF0ZS5sb2FkaW5nID8gXCIgZGlzYWJsZWRcIiA6IFwiXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLm9uRm9yY2VQYXNzd29yZENoYW5nZS5iaW5kKHRoaXMpIH0+WyB7TG9jYWxpemF0aW9uLmdldChcIkZvcmNlQ2hhbmdlUGFzc3dvcmRcIil9IF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCBjbGFzc05hbWU9e1wibGlua1wiICsgKHRoaXMuc3RhdGUubG9hZGluZyA/IFwiIGRpc2FibGVkXCIgOiBcIlwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLm9uU2VuZFBhc3N3b3JkTGluay5iaW5kKHRoaXMpIH0+WyB7TG9jYWxpemF0aW9uLmdldChcIlJlc2V0UGFzc3dvcmRcIil9IF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCBjbGFzc05hbWU9XCJvdXRlci1ib3ggcmlnaHRcIiBjb2x1bW5TaXplPXs1MH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7TG9jYWxpemF0aW9uLmdldChcIkFjY291bnREYXRhXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkU3lzdGVtIGNsYXNzTmFtZT1cImZpcnN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCAgdGl0bGU9e0xvY2FsaXphdGlvbi5nZXQoXCJDcmVhdGVkRGF0ZS5IZWxwXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtMb2NhbGl6YXRpb24uZ2V0KFwiQ3JlYXRlZERhdGVcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmb3JtYXREYXRlKHN0YXRlLnVzZXJEZXRhaWxzLmNyZWF0ZWRPbkRhdGUsIHRydWUpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIkxhc3RMb2dpbkRhdGUuSGVscFwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7TG9jYWxpemF0aW9uLmdldChcIkxhc3RMb2dpbkRhdGVcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmb3JtYXREYXRlKHN0YXRlLnVzZXJEZXRhaWxzLmxhc3RMb2dpbiwgdHJ1ZSkgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgICAgICA8R3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIHRpdGxlPXtMb2NhbGl6YXRpb24uZ2V0KFwiTGFzdEFjdGl2aXR5RGF0ZS5IZWxwXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtMb2NhbGl6YXRpb24uZ2V0KFwiTGFzdEFjdGl2aXR5RGF0ZVwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2Zvcm1hdERhdGUoc3RhdGUudXNlckRldGFpbHMubGFzdEFjdGl2aXR5LCB0cnVlKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkU3lzdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkU3lzdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZENlbGwgdGl0bGU9e0xvY2FsaXphdGlvbi5nZXQoXCJMYXN0UGFzc3dvcmRDaGFuZ2VEYXRlLkhlbHBcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge0xvY2FsaXphdGlvbi5nZXQoXCJMYXN0UGFzc3dvcmRDaGFuZ2VEYXRlXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Zm9ybWF0RGF0ZShzdGF0ZS51c2VyRGV0YWlscy5sYXN0UGFzc3dvcmRDaGFuZ2UsIHRydWUpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIkxhc3RMb2Nrb3V0RGF0ZS5IZWxwXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtMb2NhbGl6YXRpb24uZ2V0KFwiTGFzdExvY2tvdXREYXRlXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Zm9ybWF0RGF0ZShzdGF0ZS51c2VyRGV0YWlscy5sYXN0TG9ja291dCwgdHJ1ZSkgPT09IFwiLVwiID8gTG9jYWxpemF0aW9uLmdldChcIk5ldmVyXCIpIDogZm9ybWF0RGF0ZShzdGF0ZS51c2VyRGV0YWlscy5sYXN0TG9ja291dCwgdHJ1ZSkgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgICAgICA8R3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIHRpdGxlPXtMb2NhbGl6YXRpb24uZ2V0KFwiSXNPbkxpbmUuSGVscFwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7TG9jYWxpemF0aW9uLmdldChcIklzT25MaW5lXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdHJpbmdpZnlCb29sZWFuKHN0YXRlLnVzZXJEZXRhaWxzLmlzT25saW5lKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIkxvY2tlZE91dC5IZWxwXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtMb2NhbGl6YXRpb24uZ2V0KFwiTG9ja2VkT3V0XCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdHJpbmdpZnlCb29sZWFuKHN0YXRlLnVzZXJEZXRhaWxzLmlzTG9ja2VkKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIkFwcHJvdmVkLkhlbHBcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge0xvY2FsaXphdGlvbi5nZXQoXCJBcHByb3ZlZFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RyaW5naWZ5Qm9vbGVhbihzdGF0ZS51c2VyRGV0YWlscy5hdXRob3JpemVkKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIlVwZGF0ZVBhc3N3b3JkLkhlbHBcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge0xvY2FsaXphdGlvbi5nZXQoXCJVcGRhdGVQYXNzd29yZFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RyaW5naWZ5Qm9vbGVhbihzdGF0ZS51c2VyRGV0YWlscy5uZWVkVXBkYXRlUGFzc3dvcmQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgICAgICA8R3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIHRpdGxlPXtMb2NhbGl6YXRpb24uZ2V0KFwiSXNEZWxldGVkLkhlbHBcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge0xvY2FsaXphdGlvbi5nZXQoXCJJc0RlbGV0ZWRcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0cmluZ2lmeUJvb2xlYW4oc3RhdGUudXNlckRldGFpbHMuaXNEZWxldGVkKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8L0dyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRTeXN0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIlVzZXJGb2xkZXIuSGVscFwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7TG9jYWxpemF0aW9uLmdldChcIlVzZXJGb2xkZXJcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdGF0ZS51c2VyRGV0YWlscy51c2VyRm9sZGVyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZFN5c3RlbT5cclxuICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgIHtjYW5FZGl0U2V0dGluZ3ModGhpcy5wcm9wcy5hcHBTZXR0aW5ncy5hcHBsaWNhdGlvblNldHRpbmdzLnNldHRpbmdzKSAmJlxyXG4gICAgICAgICAgICAgICAgPEdyaWRDZWxsIGNsYXNzTmFtZT1cImJ1dHRvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8R3JpZENlbGwgY29sdW1uU2l6ZT17NTB9IGNsYXNzTmFtZT1cImxlZnRCdG5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBpZD1cImNhbmNlbGJ0blwiICB0eXBlPVwic2Vjb25kYXJ5XCIgb25DbGljaz17dGhpcy5wcm9wcy5jb2xsYXBzZS5iaW5kKHRoaXMpIH0+e0xvY2FsaXphdGlvbi5nZXQoXCJidG5DYW5jZWxcIikgfTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIGNvbHVtblNpemU9ezUwfSBjbGFzc05hbWU9XCJyaWdodEJ0blwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGlkPVwiY29uZmlybWJ0blwiIGRpc2FibGVkPXt0aGlzLnN0YXRlLmxvYWRpbmd9IHR5cGU9XCJwcmltYXJ5XCIgb25DbGljaz17dGhpcy5zYXZlLmJpbmQodGhpcykgfT57TG9jYWxpemF0aW9uLmdldChcImJ0blNhdmVcIikgfTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9HcmlkQ2VsbD47XHJcbiAgICB9XHJcbn1cclxuVXNlclNldHRpbmdzLnByb3BUeXBlcyA9IHtcclxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgdXNlcklkOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcclxuICAgIGNvbGxhcHNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgdXNlckRldGFpbHM6IFByb3BUeXBlcy5vYmplY3QsXHJcbiAgICBhcHBTZXR0aW5nczogUHJvcFR5cGVzLm9iamVjdFxyXG59O1xyXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlckRldGFpbHM6IHN0YXRlLnVzZXJzLnVzZXJEZXRhaWxzXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoVXNlclNldHRpbmdzKTsiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IHsgQ29tbW9uVXNlcnNBY3Rpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2FjdGlvbnNcIjtcclxuaW1wb3J0IFwiLi9zdHlsZS5sZXNzXCI7XHJcblxyXG5jbGFzcyBFZGl0UHJvZmlsZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB1c2VyRGV0YWlsczogcHJvcHMudXNlckRldGFpbHNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgICAgIGxldCB7cHJvcHN9ID0gdGhpcztcclxuICAgICAgICBpZiAocHJvcHMudXNlckRldGFpbHMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy51c2VyRGV0YWlscy51c2VySWQgIT09IHByb3BzLnVzZXJJZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdldFVzZXJEZXRhaWxzKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XHJcbiAgICAgICAgaWYgKG5ld1Byb3BzLnVzZXJEZXRhaWxzID09PSB1bmRlZmluZWQgJiYgbmV3UHJvcHMudXNlckRldGFpbHMudXNlcklkICE9PSBuZXdQcm9wcy51c2VySWQpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRVc2VyRGV0YWlscyhuZXdQcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0VXNlckRldGFpbHMocHJvcHMpIHtcclxuICAgICAgICBwcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuZ2V0VXNlckRldGFpbHMoeyB1c2VySWQ6IHByb3BzLnVzZXJJZCB9LCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdXNlckRldGFpbHMgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB1c2VyRGV0YWlsc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUudXNlckRldGFpbHMgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnN0YXRlLnVzZXJEZXRhaWxzLmVkaXRQcm9maWxlVXJsICE9PSB1bmRlZmluZWQgICYmIDxpZnJhbWUgXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtcHJvZmlsZVwiIHNlYW1sZXNzXHJcbiAgICAgICAgICAgIHNyYz17dGhpcy5zdGF0ZS51c2VyRGV0YWlscy5lZGl0UHJvZmlsZVVybH1cclxuICAgICAgICAgICAgLz47XHJcbiAgICB9XHJcbn1cclxuXHJcbkVkaXRQcm9maWxlLnByb3BUeXBlcyA9IHtcclxuICAgIHVzZXJEZXRhaWxzOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gICAgdXNlcklkOlByb3BUeXBlcy5udW1iZXJcclxufTtcclxuXHJcbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VyRGV0YWlsczogc3RhdGUudXNlcnMudXNlckRldGFpbHNcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShFZGl0UHJvZmlsZSk7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCBcIi4vc3R5bGUubGVzc1wiO1xyXG5pbXBvcnQgdXRpbGl0aWVzIGZyb20gXCJ1dGlsc1wiO1xyXG5pbXBvcnQgTG9jYWxpemF0aW9uIGZyb20gXCJsb2NhbGl6YXRpb25cIjtcclxuaW1wb3J0IHsgQ29tbW9uVXNlcnNBY3Rpb25zIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2FjdGlvbnNcIjtcclxuaW1wb3J0IHtmb3JtYXREYXRlLGZvcm1hdFN0cmluZ30gZnJvbSBcIi4uLy4uLy4uLy4uL2hlbHBlcnNcIjtcclxuaW1wb3J0IHsgR3JpZENlbGwsIERhdGVQaWNrZXIsIFN2Z0ljb25zIH0gZnJvbSBcIkBkbm5zb2Z0d2FyZS9kbm4tcmVhY3QtY29tbW9uXCI7XHJcblxyXG5jbGFzcyBSb2xlUm93IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgZWRpdEluZGV4OiAtMSxcclxuICAgICAgICAgICAgZWRpdENvbW1hbmQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGlzQ2FsZW5kYXJWaXNpYmxlOiBmYWxzZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBvblN0YXJ0VGltZUNsaWNrKHVzZXJSb2xlLCBpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0SW5kZXg6IGluZGV4LCBlZGl0Q29tbWFuZDogXCJzdGFydFRpbWVcIiwgaXNDYWxlbmRhclZpc2libGU6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25FeHBpcmVzVGltZUNsaWNrKHVzZXJSb2xlLCBpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0SW5kZXg6IGluZGV4LCBlZGl0Q29tbWFuZDogXCJleHBpcmVzVGltZVwiLCBpc0NhbGVuZGFyVmlzaWJsZTogdHJ1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRlbGV0ZUNsaWNrKHVzZXJSb2xlKSB7XHJcbiAgICAgICAgY29uc3Qge3Byb3BzfSA9IHRoaXM7XHJcbiAgICAgICAgdXRpbGl0aWVzLmNvbmZpcm0oZm9ybWF0U3RyaW5nKExvY2FsaXphdGlvbi5nZXQoXCJEZWxldGVSb2xlLkNvbmZpcm1cIiksIHVzZXJSb2xlLnJvbGVOYW1lLCB1c2VyUm9sZS5kaXNwbGF5TmFtZSksIExvY2FsaXphdGlvbi5nZXQoXCJEZWxldGVcIiksIExvY2FsaXphdGlvbi5nZXQoXCJDYW5jZWxcIiksICgpID0+IHtcclxuICAgICAgICAgICAgcHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLnJlbW92ZVVzZXJSb2xlKHVzZXJSb2xlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpc0VtcHR5RGF0ZShkYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuICFkYXRlIHx8IG5ldyBEYXRlKGRhdGUpLmdldEZ1bGxZZWFyKCkgPCAxOTcwO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hhbmdlKHVzZXJSb2xlLCBjb21tYW5kLCBGaXJzdERhdGUpIHtcclxuICAgICAgICBjb25zdCB7c3RhdGV9ID0gdGhpcztcclxuICAgICAgICBzdGF0ZS5lZGl0SW5kZXggPSAtMTtcclxuICAgICAgICBzdGF0ZS5lZGl0Q29tbWFuZCA9IFwiXCI7XHJcbiAgICAgICAgbGV0IHN0YXJ0VGltZSA9IGNvbW1hbmQgPT09IFwic3RhcnRUaW1lXCIgPyBGaXJzdERhdGUgOiB1c2VyUm9sZS5zdGFydFRpbWU7XHJcbiAgICAgICAgbGV0IGV4cGlyZXNUaW1lID0gY29tbWFuZCA9PT0gXCJleHBpcmVzVGltZVwiID8gRmlyc3REYXRlIDogdXNlclJvbGUuZXhwaXJlc1RpbWU7XHJcblxyXG4gICAgICAgIHRoaXMucHJvcHMuc2F2ZVJvbGUodXNlclJvbGUucm9sZUlkLCBzdGFydFRpbWUsIGV4cGlyZXNUaW1lKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNDYWxlbmRhclZpc2libGU6IGZhbHNlIH0pO1xyXG4gICAgfVxyXG4gICAgZ2V0Qm91bmREYXRlKHVzZXJSb2xlLCBjb21tYW5kKSB7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQgPT09IFwic3RhcnRUaW1lXCIpIHtcclxuICAgICAgICAgICAgbGV0IG1heFZhbHVlID0gbmV3IERhdGUoMjA0OSwgMTEsIDMxKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRW1wdHlEYXRlKHVzZXJSb2xlLmV4cGlyZXNUaW1lKSkge1xyXG4gICAgICAgICAgICAgICAgbWF4VmFsdWUgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpLnNldFRpbWUobmV3IERhdGUodXNlclJvbGUuZXhwaXJlc1RpbWUpLmdldFRpbWUoKSAtIDEgKiA4NjQwMDAwMCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtYXhWYWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiZXhwaXJlc1RpbWVcIikge1xyXG4gICAgICAgICAgICBsZXQgbWluVmFsdWUgPSBuZXcgRGF0ZSgxOTcwLCAwLCAxKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRW1wdHlEYXRlKHVzZXJSb2xlLnN0YXJ0VGltZSkpIHtcclxuICAgICAgICAgICAgICAgIG1pblZhbHVlID0gbmV3IERhdGUobmV3IERhdGUoKS5zZXRUaW1lKG5ldyBEYXRlKHVzZXJSb2xlLnN0YXJ0VGltZSkuZ2V0VGltZSgpICsgMSAqIDg2NDAwMDAwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1pblZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldERhdGUocm9sZURldGFpbHMsIGNvbW1hbmQpIHtcclxuICAgICAgICBsZXQgZGF0ZVZhbHVlID0gbmV3IERhdGUoKTtcclxuICAgICAgICBpZiAoY29tbWFuZCA9PT0gXCJzdGFydFRpbWVcIikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNFbXB0eURhdGUocm9sZURldGFpbHMuc3RhcnRUaW1lKSkge1xyXG4gICAgICAgICAgICAgICAgZGF0ZVZhbHVlID0gbmV3IERhdGUocm9sZURldGFpbHMuc3RhcnRUaW1lKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiZXhwaXJlc1RpbWVcIikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNFbXB0eURhdGUocm9sZURldGFpbHMuZXhwaXJlc1RpbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRlVmFsdWUgPSBuZXcgRGF0ZShyb2xlRGV0YWlscy5leHBpcmVzVGltZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGVWYWx1ZTtcclxuICAgIH1cclxuICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLWRhbmdlciAqL1xyXG4gICAgY3JlYXRlUm9sZUFjdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc3Qge3Byb3BzLCBzdGF0ZX0gPSB0aGlzO1xyXG5cclxuICAgICAgICBsZXQgc3RhcnRUaW1lQWN0aW9uID0gcHJvcHMucm9sZURldGFpbHMuYWxsb3dFeHBpcmVkID8gPHNwYW4+XHJcbiAgICAgICAgICAgIDxEYXRlUGlja2VyICBkYXRlPXt0aGlzLmdldERhdGUocHJvcHMucm9sZURldGFpbHMsIFwic3RhcnRUaW1lXCIpIH0gbWF4RGF0ZT17dGhpcy5nZXRCb3VuZERhdGUocHJvcHMucm9sZURldGFpbHMsIFwic3RhcnRUaW1lXCIpIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGU9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzLCBwcm9wcy5yb2xlRGV0YWlscywgXCJzdGFydFRpbWVcIikgfSBtb2RlPXtcInN0YXJ0XCJ9IGFwcGx5QnV0dG9uVGV4dD17TG9jYWxpemF0aW9uLmdldChcImJ0bkFwcGx5XCIpIH1cclxuICAgICAgICAgICAgICAgIHNob3dJY29uPXt0cnVlfSBzaG93SW5wdXQ9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgb25JY29uQ2xpY2s9e3RoaXMub25TdGFydFRpbWVDbGljay5iaW5kKHRoaXMsIHByb3BzLnJvbGVEZXRhaWxzLCBwcm9wcy5pbmRleCkgfSAgICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvc3Bhbj4gOiBudWxsO1xyXG4gICAgICAgIGxldCBleHBpcmVzVGltZUFjdGlvbiA9IHByb3BzLnJvbGVEZXRhaWxzLmFsbG93RXhwaXJlZCA/IDxzcGFuPlxyXG4gICAgICAgICAgICA8RGF0ZVBpY2tlciAgZGF0ZT17dGhpcy5nZXREYXRlKHByb3BzLnJvbGVEZXRhaWxzLCBcImV4cGlyZXNUaW1lXCIpIH0gbWluRGF0ZT17dGhpcy5nZXRCb3VuZERhdGUocHJvcHMucm9sZURldGFpbHMsIFwiZXhwaXJlc1RpbWVcIikgfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0ZT17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMsIHByb3BzLnJvbGVEZXRhaWxzLCBcImV4cGlyZXNUaW1lXCIpIH0gbW9kZT17XCJlbmRcIn0gYXBwbHlCdXR0b25UZXh0PXtMb2NhbGl6YXRpb24uZ2V0KFwiYnRuQXBwbHlcIikgfVxyXG4gICAgICAgICAgICAgICAgc2hvd0ljb249e3RydWV9IHNob3dJbnB1dD17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICBvbkljb25DbGljaz17dGhpcy5vbkV4cGlyZXNUaW1lQ2xpY2suYmluZCh0aGlzLCBwcm9wcy5yb2xlRGV0YWlscywgcHJvcHMuaW5kZXgpIH0gICAgICAgICAgICAgLz5cclxuICAgICAgICA8L3NwYW4+IDogbnVsbDtcclxuICAgICAgICBsZXQgZGVsZXRlQWN0aW9uID0gcHJvcHMucm9sZURldGFpbHMuYWxsb3dEZWxldGUgP1xyXG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9e1wiZXh0ZW5zaW9uLWFjdGlvblwifSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IFN2Z0ljb25zLlhJY29uIH19IG9uQ2xpY2s9e3RoaXMub25EZWxldGVDbGljay5iaW5kKHRoaXMsIHByb3BzLnJvbGVEZXRhaWxzLCBwcm9wcy5pbmRleCkgfT48L2E+XHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3N0YXRlLmVkaXRJbmRleCA9PT0gcHJvcHMuaW5kZXggPyBcImVkaXQtcm93XCIgOiBudWxsfT5cclxuICAgICAgICAgICAge3N0YXJ0VGltZUFjdGlvbn1cclxuICAgICAgICAgICAge2V4cGlyZXNUaW1lQWN0aW9ufVxyXG4gICAgICAgICAgICB7ZGVsZXRlQWN0aW9ufVxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXItcm9sZS1yb3dcIj5cclxuICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCB0aXRsZT17cHJvcHMucm9sZURldGFpbHMucm9sZU5hbWV9IGNvbHVtblNpemU9ezI1fSA+XHJcbiAgICAgICAgICAgICAgICAgICAge3Byb3BzLnJvbGVEZXRhaWxzLnJvbGVOYW1lfTwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICA8R3JpZENlbGwgIGNvbHVtblNpemU9ezIwfSB0aXRsZT17Zm9ybWF0RGF0ZShwcm9wcy5yb2xlRGV0YWlscy5zdGFydFRpbWUpIH0gPlxyXG4gICAgICAgICAgICAgICAgICAgIHtmb3JtYXREYXRlKHByb3BzLnJvbGVEZXRhaWxzLnN0YXJ0VGltZSkgfTwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICA8R3JpZENlbGwgIGNvbHVtblNpemU9ezIwfSB0aXRsZT17Zm9ybWF0RGF0ZShwcm9wcy5yb2xlRGV0YWlscy5leHBpcmVzVGltZSkgfSA+XHJcbiAgICAgICAgICAgICAgICAgICAge2Zvcm1hdERhdGUocHJvcHMucm9sZURldGFpbHMuZXhwaXJlc1RpbWUpIH08L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICAgICAgPEdyaWRDZWxsICBjb2x1bW5TaXplPXszNX0gPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5jcmVhdGVSb2xlQWN0aW9ucygpIH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuUm9sZVJvdy5wcm9wVHlwZXMgPSB7XHJcbiAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIHJvbGVEZXRhaWxzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbiAgICBpbmRleDogUHJvcFR5cGVzLm51bWJlcixcclxuICAgIHNhdmVSb2xlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxyXG4gICAgZGVsZXRlUm9sZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxyXG59O1xyXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoKSB7XHJcbiAgICByZXR1cm4ge307XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUm9sZVJvdyk7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7ZGVib3VuY2V9IGZyb20gXCJ0aHJvdHRsZS1kZWJvdW5jZVwiO1xyXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCBMb2NhbGl6YXRpb24gZnJvbSBcImxvY2FsaXphdGlvblwiO1xyXG5pbXBvcnQgUm9sZVJvdyBmcm9tIFwiLi9Sb2xlUm93XCI7XHJcbmltcG9ydCBcIi4vc3R5bGUubGVzc1wiO1xyXG5pbXBvcnQgeyBDb21tb25Vc2Vyc0FjdGlvbnMgfSBmcm9tIFwiLi4vLi4vLi4vYWN0aW9uc1wiO1xyXG5pbXBvcnQgdXRpbGl0aWVzIGZyb20gXCJ1dGlsc1wiO1xyXG5pbXBvcnQgeyBDb21ib2JveCwgR3JpZENlbGwsIENoZWNrYm94LCBQYWdlciwgU3ZnSWNvbnMgfSBmcm9tIFwiQGRubnNvZnR3YXJlL2Rubi1yZWFjdC1jb21tb25cIjtcclxuXHJcbmNsYXNzIFVzZXJSb2xlcyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICByb2xlU2VsZWN0U3RhdGU6IHsgdXNlcklkOiAtMSwga2V5d29yZDogXCJcIiB9LFxyXG4gICAgICAgICAgICBjdXJyZW50UGFnZTogMCxcclxuICAgICAgICAgICAgcGFnZVNpemU6IDEwLFxyXG4gICAgICAgICAgICByb2xlS2V5d29yZDogXCJcIixcclxuICAgICAgICAgICAgc2VuZEVtYWlsOiB0cnVlLFxyXG4gICAgICAgICAgICBpc093bmVyOiBmYWxzZSxcclxuICAgICAgICAgICAgYWxsb3dPd25lcjogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29tYm9Cb3hEb20gPW51bGw7XHJcbiAgICAgICAgdGhpcy5kZWJvdW5jZUdldFN1Z2dlc3RSb2xlcyA9IGRlYm91bmNlKDUwMCwgdGhpcy5kZWJvdW5jZUdldFN1Z2dlc3RSb2xlcyk7XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShuZXdQcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMuZ2V0Um9sZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSb2xlcygpIHtcclxuICAgICAgICBjb25zdCB7cHJvcHMsIHN0YXRlfSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGxldCBwYXJhbWV0ZXIgPSB7XHJcbiAgICAgICAgICAgIHVzZXJJZDogcHJvcHMudXNlckRldGFpbHMudXNlcklkLFxyXG4gICAgICAgICAgICBrZXl3b3JkOiBzdGF0ZS5yb2xlS2V5d29yZCxcclxuICAgICAgICAgICAgcGFnZUluZGV4OiBzdGF0ZS5jdXJyZW50UGFnZSxcclxuICAgICAgICAgICAgcGFnZVNpemU6IHN0YXRlLnBhZ2VTaXplXHJcbiAgICAgICAgfTtcclxuICAgICAgICBwcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuZ2V0VXNlclJvbGVzKHBhcmFtZXRlcikpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN1Z2dlc3RSb2xlcygpIHtcclxuICAgICAgICBjb25zdCB7cHJvcHMsIHN0YXRlfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGtleXdvcmQgPSBzdGF0ZS5yb2xlU2VsZWN0U3RhdGUucm9sZUlkID49IDAgPyBcIlwiIDogc3RhdGUucm9sZVNlbGVjdFN0YXRlLmtleXdvcmQ7XHJcbiAgICAgICAgcHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLmdldFN1Z2dlc3RSb2xlcyh7IGtleXdvcmQ6IGtleXdvcmQsIGNvdW50OiAxMCB9KSk7XHJcbiAgICB9XHJcbiAgICBkZWJvdW5jZUdldFN1Z2dlc3RSb2xlcygpIHtcclxuICAgICAgICB0aGlzLmdldFN1Z2dlc3RSb2xlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUm9sZVNlbGVjdG9yQ2hhbmdlZChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0ucm9sZUlkIHx8IGl0ZW0ucm9sZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcm9sZVNlbGVjdFN0YXRlOiB7IHJvbGVJZDogLTEsIGtleXdvcmQ6IGl0ZW0gfSB9KTtcclxuICAgICAgICB0aGlzLmRlYm91bmNlR2V0U3VnZ2VzdFJvbGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Sb2xlU2VsZWN0b3JTZWxlY3RlZChpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5vblJvbGVTZWxlY3RlZChpdGVtLnJvbGVJZCwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcm9sZVNlbGVjdFN0YXRlOiB7IHJvbGVJZDogaXRlbS5yb2xlSWQsIGtleXdvcmQ6IGl0ZW0ucm9sZU5hbWUgfSB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFN1Z2dlc3RSb2xlcygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvblJvbGVTZWxlY3RvclRvZ2dsZSgpIHtcclxuICAgIH1cclxuXHJcbiAgICBvbkFkZFJvbGUoKSB7XHJcbiAgICAgICAgY29uc3Qge3N0YXRlfSA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHJvbGVJZCA9IHN0YXRlLnJvbGVTZWxlY3RTdGF0ZS5yb2xlSWQ7XHJcbiAgICAgICAgaWYgKHJvbGVJZCA9PT0gLTEgfHwgcm9sZUlkPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2F2ZVJvbGUocm9sZUlkKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcm9sZVNlbGVjdFN0YXRlOiB7IHJvbGVJZDogLTEsIGtleXdvcmQ6IFwiXCIgfSB9KTtcclxuICAgIH1cclxuICAgIHNhdmVSb2xlKHJvbGVJZCwgc3RhcnRUaW1lLCBleHBpcmVzVGltZSkge1xyXG4gICAgICAgIGNvbnN0IHtwcm9wc30gPSB0aGlzO1xyXG5cclxuICAgICAgICBsZXQgcGFyYW1ldGVyID0geyByb2xlSWQ6IHJvbGVJZCwgdXNlcklkOiBwcm9wcy51c2VyRGV0YWlscy51c2VySWQsIHN0YXJ0VGltZTogc3RhcnRUaW1lLCBleHBpcmVzVGltZTogZXhwaXJlc1RpbWUgfTtcclxuICAgICAgICBwcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuc2F2ZVVzZXJSb2xlKHBhcmFtZXRlciwgdGhpcy5zdGF0ZS5zZW5kRW1haWwsIHRoaXMuc3RhdGUuaXNPd25lcikpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZW5kRW1haWw6IHRydWUsIGlzT3duZXI6IGZhbHNlLCBhbGxvd093bmVyOiBmYWxzZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvblBhZ2VDaGFuZ2VkKGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSkge1xyXG4gICAgICAgIGxldCB7c3RhdGV9ID0gdGhpcztcclxuICAgICAgICBpZiAocGFnZVNpemUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZS5wYWdlU2l6ZSAhPT0gcGFnZVNpemUpIHtcclxuICAgICAgICAgICAgc3RhdGUucGFnZVNpemUgPSBwYWdlU2l6ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuY3VycmVudFBhZ2UgPSBjdXJyZW50UGFnZTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc3RhdGVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdldFJvbGVzKCk7XHJcbiAgICB9XHJcbiAgICBnZXRSb2xlUm93cygpIHtcclxuICAgICAgICBsZXQgdXNlclJvbGVzID0gdGhpcy5wcm9wcy51c2VyUm9sZXM7XHJcbiAgICAgICAgbGV0IHJvbGVSb3dzID0gdXNlclJvbGVzLm1hcCgocm9sZSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIDxSb2xlUm93XHJcbiAgICAgICAgICAgICAgICByb2xlRGV0YWlscz17cm9sZX1cclxuICAgICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cclxuICAgICAgICAgICAgICAgIGtleT17YHJvbGVfcm93XyR7aW5kZXh9YH1cclxuICAgICAgICAgICAgICAgIHNhdmVSb2xlPXt0aGlzLnNhdmVSb2xlLmJpbmQodGhpcykgfT5cclxuICAgICAgICAgICAgPC9Sb2xlUm93PjtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ1c2VyLXJvbGUtYm9keVwiPnsodXNlclJvbGVzLmxlbmd0aCA+IDApID9cclxuICAgICAgICAgICAgcm9sZVJvd3MgOlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5vLXJvbGVzLXJvd1wiPntMb2NhbGl6YXRpb24uZ2V0KFwiTm9Sb2xlc1wiKSB9PC9kaXY+IH1cclxuICAgICAgICA8L2Rpdj47XHJcbiAgICB9XHJcbiAgICBvblJvbGVTZWxlY3RlZChyb2xlSWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubWF0Y2hlZFJvbGVzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5wcm9wcy5tYXRjaGVkUm9sZXMubGVuZ3RoID4gMCAmJiB0aGlzLnByb3BzLm1hdGNoZWRSb2xlcy5zb21lKHIgPT4gci5yb2xlSWQgPT09IHJvbGVJZCkpIHtcclxuICAgICAgICAgICAgbGV0IHJvbGUgPSB0aGlzLnByb3BzLm1hdGNoZWRSb2xlcy5maWx0ZXIociA9PiByLnJvbGVJZCA9PT0gcm9sZUlkKVswXTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFsbG93T3duZXI6IHJvbGUuYWxsb3dPd25lciB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvblNlbmRFbWFpbENsaWNrKHNlbmRFbWFpbCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZW5kRW1haWwgfSk7XHJcbiAgICB9XHJcbiAgICBvbklzT3duZXJDbGljayhpc093bmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzT3duZXIgfSk7XHJcbiAgICB9XHJcbiAgICByZW5kZXJIZWFkZXIoKSB7XHJcbiAgICAgICAgY29uc3QgdGFibGVGaWVsZHMgPSBbXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJSb2xlXCIsIHdpZHRoOiAyNSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwiU3RhcnRcIiwgd2lkdGg6IDIwIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJFeHBpcmVzXCIsIHdpZHRoOiAyMCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwiXCIsIHdpZHRoOiAzNSB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBsZXQgdGFibGVIZWFkZXJzID0gdGFibGVGaWVsZHMubWFwKChmaWVsZCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIDxHcmlkQ2VsbCBrZXk9e2BncmlkX2NlbGxfJHtpbmRleH1gfSBjb2x1bW5TaXplPXtmaWVsZC53aWR0aH0gc3R5bGU9e3sgZm9udFdlaWdodDogXCJib2xkZXJcIiB9fT5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZC5uYW1lICE9PSBcIlwiID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e0xvY2FsaXphdGlvbi5nZXQoZmllbGQubmFtZSArIFwiLkhlYWRlclwiKSB9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDxkaXY+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDwvR3JpZENlbGw+O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInVzZXItcm9sZS1oZWFkZXItcm93XCI+e3RhYmxlSGVhZGVyc308L2Rpdj47XHJcbiAgICB9XHJcbiAgICByZW5kZXJQYWdpbmcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudG90YWxSZWNvcmRzID4gMClcclxuICAgICAgICAgICAgcmV0dXJuIDxQYWdlclxyXG4gICAgICAgICAgICAgICAgc2hvd1N0YXJ0RW5kQnV0dG9ucz17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICBzaG93UGFnZVNpemVPcHRpb25zPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgIG51bWVyaWNDb3VudGVycz17MH1cclxuICAgICAgICAgICAgICAgIHN1bW1hcnlUZXh0PXtMb2NhbGl6YXRpb24uZ2V0KFwicm9sZXNTdW1tYXJ5VGV4dFwiKX1cclxuICAgICAgICAgICAgICAgIHBhZ2VJbmZvVGV4dD17TG9jYWxpemF0aW9uLmdldChcInJvbGVzUGFnZUluZm9UZXh0XCIpfVxyXG4gICAgICAgICAgICAgICAgc2hvd1BhZ2VJbmZvPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICB0b3RhbFJlY29yZHM9e3RoaXMucHJvcHMudG90YWxSZWNvcmRzfVxyXG4gICAgICAgICAgICAgICAgb25QYWdlQ2hhbmdlZD17dGhpcy5vblBhZ2VDaGFuZ2VkLmJpbmQodGhpcykgfVxyXG4gICAgICAgICAgICAgICAgY3VsdHVyZT17dXRpbGl0aWVzLmdldEN1bHR1cmUoKX1cclxuICAgICAgICAgICAgLz47XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3Qge3N0YXRlfSA9IHRoaXM7XHJcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tZGFuZ2VyICovXHJcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidXNlcnJvbGVzLWZvcm0tZm9ybVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXItdGl0bGVcIj57TG9jYWxpemF0aW9uLmdldChcIlJvbGVzLlRpdGxlXCIpIH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWRkLWJveFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkQ2VsbCBjb2x1bW5TaXplPXszMH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZC1lbWFpbC1ib3hcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja2JveCB2YWx1ZT17dGhpcy5zdGF0ZS5zZW5kRW1haWx9IG9uQ2hhbmdlPXt0aGlzLm9uU2VuZEVtYWlsQ2xpY2suYmluZCh0aGlzKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9eyAgTG9jYWxpemF0aW9uLmdldChcIlNlbmRFbWFpbFwiKSB9IGxhYmVsUGxhY2U9XCJyaWdodFwiICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5hbGxvd093bmVyICYmIDxDaGVja2JveCB2YWx1ZT17dGhpcy5zdGF0ZS5pc093bmVyfSBvbkNoYW5nZT17dGhpcy5vbklzT3duZXJDbGljay5iaW5kKHRoaXMpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17ICBMb2NhbGl6YXRpb24uZ2V0KFwiSXNPd25lclwiKSB9IGxhYmVsUGxhY2U9XCJyaWdodFwiICAgLz59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgPEdyaWRDZWxsIGNvbHVtblNpemU9ezcwfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29tYm9ib3ggc3VnZ2VzdD17ZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXsoZG9tKSA9PiB7dGhpcy5jb21ib0JveERvbSA9IGRvbTt9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtMb2NhbGl6YXRpb24uZ2V0KFwiQWRkUm9sZVBsYWNlSG9sZGVyXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuPXt0aGlzLnByb3BzLm1hdGNoZWRSb2xlcyAmJiB0aGlzLnByb3BzLm1hdGNoZWRSb2xlcy5sZW5ndGggPiAwIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblRvZ2dsZT17dGhpcy5vblJvbGVTZWxlY3RvclRvZ2dsZS5iaW5kKHRoaXMpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vblJvbGVTZWxlY3RvckNoYW5nZWQuYmluZCh0aGlzKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q9e3RoaXMub25Sb2xlU2VsZWN0b3JTZWxlY3RlZC5iaW5kKHRoaXMpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXt0aGlzLnByb3BzLm1hdGNoZWRSb2xlcyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3N0YXRlLnJvbGVTZWxlY3RTdGF0ZS5rZXl3b3JkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlRmllbGQ9XCJyb2xlSWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRGaWVsZD1cInJvbGVOYW1lXCIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhZGQtcm9sZS1idXR0b25cIiBvbkNsaWNrPXt0aGlzLm9uQWRkUm9sZS5iaW5kKHRoaXMpIH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiZXh0ZW5zaW9uLWFjdGlvblwifSB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIkFkZFwiKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBTdmdJY29ucy5BZGRJY29uIH19PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtMb2NhbGl6YXRpb24uZ2V0KFwiQWRkXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyLXJvbGVzLWxpc3RcIj5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckhlYWRlcigpIH1cclxuICAgICAgICAgICAgICAgIHt0aGlzLmdldFJvbGVSb3dzKCkgfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyLXJvbGVzLWxpc3QtcGFnaW5nXCI+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJQYWdpbmcoKSB9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PjtcclxuICAgIH1cclxufVxyXG5Vc2VyUm9sZXMucHJvcFR5cGVzID0ge1xyXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICB1c2VyRGV0YWlsczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxyXG4gICAgdXNlclJvbGVzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcclxuICAgIHRvdGFsUmVjb3JkczogUHJvcFR5cGVzLm51bWJlcixcclxuICAgIG1hdGNoZWRSb2xlczogUHJvcFR5cGVzLmFycmF5XHJcbn07XHJcblVzZXJSb2xlcy5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBtYXRjaGVkUm9sZXM6IFtdXHJcbn07XHJcblxyXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWF0Y2hlZFJvbGVzOiBzdGF0ZS51c2Vycy5tYXRjaGVkUm9sZXMsXHJcbiAgICAgICAgdXNlclJvbGVzOiBzdGF0ZS51c2Vycy51c2VyUm9sZXMsXHJcbiAgICAgICAgdG90YWxSZWNvcmRzOiBzdGF0ZS51c2Vycy51c2VyUm9sZXNDb3VudFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFVzZXJSb2xlcyk7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IEhlYWRlclJvdyBmcm9tIFwiLi9IZWFkZXJSb3dcIjtcclxuaW1wb3J0IERldGFpbFJvdyBmcm9tIFwiLi9EZXRhaWxSb3dcIjtcclxuaW1wb3J0IENvbGxhcHNpYmxlU3dpdGNoZXIgZnJvbSBcIi4uL2NvbW1vbi9Db2xsYXBzaWJsZVN3aXRjaGVyXCI7XHJcbmltcG9ydCBDcmVhdGVVc2VyQm94IGZyb20gXCIuLi9DcmVhdGVVc2VyQm94XCI7XHJcbmltcG9ydCBVc2VyU2V0dGluZ3MgZnJvbSBcIi4vVXNlclNldHRpbmdzXCI7XHJcbmltcG9ydCBFZGl0UHJvZmlsZSBmcm9tIFwiLi9FZGl0UHJvZmlsZVwiO1xyXG5pbXBvcnQgVXNlcnNSb2xlcyBmcm9tIFwiLi9Vc2Vyc1JvbGVzXCI7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGUubGVzc1wiO1xyXG5pbXBvcnQge3NvcnR9IGZyb20gXCIuLi8uLi9oZWxwZXJzXCI7XHJcbmltcG9ydCBMb2NhbGl6YXRpb24gZnJvbSBcImxvY2FsaXphdGlvblwiO1xyXG5pbXBvcnQgQ29sdW1uU2l6ZXMgZnJvbSBcIi4vY29sdW1uU2l6ZXNcIjtcclxuaW1wb3J0IHtjYW5NYW5hZ2VSb2xlcywgY2FuTWFuYWdlUHJvZmlsZSwgY2FuVmlld1NldHRpbmdzLCBjYW5BZGRVc2VyfSBmcm9tIFwiLi4vcGVybWlzc2lvbkhlbHBlcnMuanNcIjtcclxuaW1wb3J0IHsgR3JpZENlbGwgfSBmcm9tIFwiQGRubnNvZnR3YXJlL2Rubi1yZWFjdC1jb21tb25cIjtcclxuXHJcbmNsYXNzIFVzZXJUYWJsZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIG9wZW5JZDogXCJcIixcclxuICAgICAgICAgICAgcmVuZGVySW5kZXg6IC0xXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xyXG4gICAgICAgIHRoaXMuY29sbGFwc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICB1bmNvbGxhcHNlKGlkLCBpbmRleCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIG9wZW5JZDogaWQsXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmRleDogaW5kZXhcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb2xsYXBzZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5vcGVuSWQgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBvcGVuSWQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICByZW5kZXJJbmRleDogLTFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdG9nZ2xlKG9wZW5JZCwgaW5kZXgpIHtcclxuICAgICAgICBpZiAob3BlbklkICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5jb2xsYXBzZShvcGVuSWQsIGluZGV4KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25BZGRVc2VyKCkge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlKHRoaXMuc3RhdGUub3BlbklkID09PSBcImFkZFwiID8gXCJcIiA6IFwiYWRkXCIsIDApO1xyXG4gICAgfVxyXG4gICAgZ2V0Q2hpbGRyZW4odXNlcikge1xyXG4gICAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KCh0aGlzLnByb3BzLmdldFVzZXJUYWJzICYmIHRoaXMucHJvcHMuZ2V0VXNlclRhYnModXNlcikpIHx8IFtdKTtcclxuICAgICAgICBpZiAoY2FuVmlld1NldHRpbmdzKHRoaXMucHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyU2V0dGluZ3MgPSA8VXNlclNldHRpbmdzIHVzZXJJZD17dXNlci51c2VySWR9IGNvbGxhcHNlPXt0aGlzLmNvbGxhcHNlLmJpbmQodGhpcykgfSBhcHBTZXR0aW5ncz17dGhpcy5wcm9wcy5hcHBTZXR0aW5nc30vPjtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoW3tcclxuICAgICAgICAgICAgICAgIGluZGV4OiAxMCxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHVzZXJTZXR0aW5nc1xyXG4gICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FuTWFuYWdlUm9sZXModGhpcy5wcm9wcy5hcHBTZXR0aW5ncy5hcHBsaWNhdGlvblNldHRpbmdzLnNldHRpbmdzLCB1c2VyKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KFt7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogNSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IDxVc2Vyc1JvbGVzIHVzZXJEZXRhaWxzPXt1c2VyfSAvPlxyXG4gICAgICAgICAgICB9XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FuTWFuYWdlUHJvZmlsZSh0aGlzLnByb3BzLmFwcFNldHRpbmdzLmFwcGxpY2F0aW9uU2V0dGluZ3Muc2V0dGluZ3MpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoW3tcclxuICAgICAgICAgICAgICAgIGluZGV4OiAxNSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IDxFZGl0UHJvZmlsZSAgdXNlcklkPXt1c2VyLnVzZXJJZH0gLz5cclxuICAgICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc29ydChjaGlsZHJlbiwgXCJpbmRleFwiLCBcImRlc2NcIikubWFwKChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQuY29udGVudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldEhlYWRlcnMoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBjb2x1bW5TaXplcyA9dGhpcy5wcm9wcy5jb2x1bW5TaXplcyE9PXVuZGVmaW5lZD8gdGhpcy5wcm9wcy5jb2x1bW5TaXplczogQ29sdW1uU2l6ZXM7XHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBbe2luZGV4OiA1LCBzaXplOiBjb2x1bW5TaXplcy5maW5kKHg9PnguaW5kZXg9PT01KS5zaXplLCBoZWFkZXI6IExvY2FsaXphdGlvbi5nZXQoXCJOYW1lLkhlYWRlclwiKX0sXHJcbiAgICAgICAgICAgIHtpbmRleDogMTAsIHNpemU6IGNvbHVtblNpemVzLmZpbmQoeD0+eC5pbmRleD09PTEwKS5zaXplLCBoZWFkZXI6IExvY2FsaXphdGlvbi5nZXQoXCJFbWFpbC5IZWFkZXJcIil9LFxyXG4gICAgICAgICAgICB7aW5kZXg6IDE1LCBzaXplOiBjb2x1bW5TaXplcy5maW5kKHg9PnguaW5kZXg9PT0xNSkuc2l6ZSwgaGVhZGVyOiBMb2NhbGl6YXRpb24uZ2V0KFwiQ3JlYXRlZC5IZWFkZXJcIil9LFxyXG4gICAgICAgICAgICB7aW5kZXg6IDI1LCBzaXplOiBjb2x1bW5TaXplcy5maW5kKHg9PnguaW5kZXg9PT0yNSkuc2l6ZSwgaGVhZGVyOlwiXCJ9XTtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5nZXRVc2VyQ29sdW1ucyAhPT0gdW5kZWZpbmVkICAmJiB0eXBlb2YgdGhpcy5wcm9wcy5nZXRVc2VyQ29sdW1ucyA9PT1cImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgbGV0IGV4dHJhQ29sdW1ucyA9IHRoaXMucHJvcHMuZ2V0VXNlckNvbHVtbnMoKTtcclxuICAgICAgICAgICAgaWYgKGV4dHJhQ29sdW1ucyE9PXVuZGVmaW5lZCAmJiBleHRyYUNvbHVtbnMubGVuZ3RoPjApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBzb3J0KGV4dHJhQ29sdW1ucy5tYXAoY29sdW1uPT57XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6Y29sdW1uLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI6Y29sdW1uLmhlYWRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogY29sdW1uU2l6ZXMuZmluZCh4PT54LmluZGV4PT09Y29sdW1uLmluZGV4KS5zaXplXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pLmNvbmNhdChoZWFkZXJzKSwgXCJpbmRleFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVhZGVycztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHtwcm9wc30gPSB0aGlzO1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICBsZXQgb3BlbmVkID0gKHRoaXMuc3RhdGUub3BlbklkID09PSBcImFkZFwiKTtcclxuICAgICAgICBjb25zdCBhZGRJc09wZW5lZCA9IG9wZW5lZCAmJiBjYW5BZGRVc2VyKHRoaXMucHJvcHMuYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncyk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuZ2V0SGVhZGVycygpO1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZVVzZXJCb3ggPSAoKSA9PiBbPENyZWF0ZVVzZXJCb3gga2V5PXtgY3JlYXRlLXVzZXItYm94LSR7aX1gfSBmaWx0ZXI9e3Byb3BzLmZpbHRlcn0gb25DYW5jZWw9e3RoaXMuY29sbGFwc2UuYmluZCh0aGlzKSB9IGFwcFNldHRpbmdzPXtwcm9wcy5hcHBTZXR0aW5nc30vPl07XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPEdyaWRDZWxsIGNsYXNzTmFtZT17c3R5bGVzLnVzZXJzTGlzdH0+XHJcbiAgICAgICAgICAgICAgICA8SGVhZGVyUm93IGhlYWRlcnM9e2hlYWRlcnN9Lz5cclxuICAgICAgICAgICAgICAgIDxEZXRhaWxSb3dcclxuICAgICAgICAgICAgICAgICAgICBDb2xsYXBzZT17dGhpcy5jb2xsYXBzZS5iaW5kKHRoaXMpIH1cclxuICAgICAgICAgICAgICAgICAgICBPcGVuQ29sbGFwc2U9e3RoaXMudG9nZ2xlLmJpbmQodGhpcykgfVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleD17dGhpcy5zdGF0ZS5yZW5kZXJJbmRleH1cclxuICAgICAgICAgICAgICAgICAgICBvcGVuSWQ9e3RoaXMuc3RhdGUub3BlbklkIH1cclxuICAgICAgICAgICAgICAgICAgICBrZXk9e1widXNlci1hZGRcIn1cclxuICAgICAgICAgICAgICAgICAgICBhcHBTZXR0aW5ncz17cHJvcHMuYXBwU2V0dGluZ3N9XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uU2l6ZXM9e3Byb3BzLmNvbHVtblNpemVzfVxyXG4gICAgICAgICAgICAgICAgICAgIGlkPXtcImFkZFwifVxyXG4gICAgICAgICAgICAgICAgICAgIGFkZElzT3BlbmVkPXthZGRJc09wZW5lZCA/IFwiYWRkLW9wZW5lZFwiIDogXCJjbG9zZWRcIn1cclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI9e3Byb3BzLmZpbHRlcn0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbGxhcHNpYmxlU3dpdGNoZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtjcmVhdGVVc2VyQm94KCl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Db2xsYXBzaWJsZVN3aXRjaGVyPlxyXG4gICAgICAgICAgICAgICAgPC9EZXRhaWxSb3c+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMudXNlcnMgJiYgcHJvcHMudXNlcnMubGVuZ3RoPjAgJiYgcHJvcHMudXNlcnMubWFwKCh1c2VyLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBcInJvdy1cIiArIGkrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPERldGFpbFJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj17dXNlcn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbGxhcHNlPXt0aGlzLmNvbGxhcHNlLmJpbmQodGhpcykgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT3BlbkNvbGxhcHNlPXt0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleD17dGhpcy5zdGF0ZS5yZW5kZXJJbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5JZD17dGhpcy5zdGF0ZS5vcGVuSWQgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtcInVzZXItXCIgKyBpbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFVzZXJDb2x1bW5zPXtwcm9wcy5nZXRVc2VyQ29sdW1ucyAmJiBwcm9wcy5nZXRVc2VyQ29sdW1ucy5iaW5kKHRoaXMpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFVzZXJUYWJzSWNvbnM9e3Byb3BzLmdldFVzZXJUYWJzSWNvbnMgJiYgcHJvcHMuZ2V0VXNlclRhYnNJY29ucy5iaW5kKHRoaXMpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFVzZXJNZW51PXtwcm9wcy5nZXRVc2VyTWVudSAmJiBwcm9wcy5nZXRVc2VyTWVudS5iaW5kKHRoaXMpfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJNZW51QWN0aW9uPXtwcm9wcy51c2VyTWVudUFjdGlvbiAmJiBwcm9wcy51c2VyTWVudUFjdGlvbi5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwU2V0dGluZ3M9e3Byb3BzLmFwcFNldHRpbmdzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uU2l6ZXM9e3Byb3BzLmNvbHVtblNpemVzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyPXtwcm9wcy5maWx0ZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbGxhcHNpYmxlU3dpdGNoZXIgcmVuZGVySW5kZXg9e3RoaXMuc3RhdGUucmVuZGVySW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sbGFwc2libGVTd2l0Y2hlcj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9EZXRhaWxSb3c+O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnVzZXJzICYmIHByb3BzLnVzZXJzLmxlbmd0aCA9PT0gMCAmJiA8R3JpZENlbGwgY2xhc3NOYW1lPVwibm8tdXNlcnNcIj57TG9jYWxpemF0aW9uLmdldChcIm5vVXNlcnNcIil9PC9HcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5Vc2VyVGFibGUucHJvcFR5cGVzID0ge1xyXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICBnZXRVc2VyVGFiczogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICBnZXRVc2VyVGFic0ljb25zOiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIGdldFVzZXJDb2x1bW5zOiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIGdldFVzZXJNZW51OiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIHVzZXJNZW51QWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcclxuICAgIGFwcFNldHRpbmdzOiBQcm9wVHlwZXMub2JqZWN0LFxyXG4gICAgY29sdW1uU2l6ZXM6IFByb3BUeXBlcy5hcnJheSxcclxuICAgIGZpbHRlcjogUHJvcFR5cGVzLm51bWJlclxyXG59O1xyXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlcnM6IHN0YXRlLnVzZXJzLnVzZXJzXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbnVsbCwgbnVsbCwgeyB3aXRoUmVmOiB0cnVlIH0pKFVzZXJUYWJsZSk7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL3N0eWxlLmxlc3NcIjtcclxuaW1wb3J0IExvY2FsaXphdGlvbiBmcm9tIFwibG9jYWxpemF0aW9uXCI7XHJcbmltcG9ydCB7IERyb3Bkb3duLCBTZWFyY2hCb3gsIEdyaWRDZWxsIH0gZnJvbSBcIkBkbm5zb2Z0d2FyZS9kbm4tcmVhY3QtY29tbW9uXCI7XHJcblxyXG5jbGFzcyBGaWx0ZXJzQmFyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkVXNlckZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IExvY2FsaXphdGlvbi5nZXQoXCJBdXRob3JpemVkXCIpLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2VhcmNoVGV4dDogXCJcIlxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBvblNlbGVjdChvcHRpb24pIHtcclxuICAgICAgICBsZXQgeyBsYWJlbH0gPSBvcHRpb247XHJcbiAgICAgICAgbGV0IHsgdmFsdWV9ID0gb3B0aW9uO1xyXG4gICAgICAgIGxldCB7c2VsZWN0ZWRVc2VyRmlsdGVyfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSBzZWxlY3RlZFVzZXJGaWx0ZXIudmFsdWUpIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRVc2VyRmlsdGVyLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkVXNlckZpbHRlci52YWx1ZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkVXNlckZpbHRlci52YWx1ZSA9PT0gMCB8fCBzZWxlY3RlZFVzZXJGaWx0ZXIudmFsdWUgPT09IDUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVXNlckZpbHRlcjogeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVGV4dDogXCJcIlxyXG4gICAgICAgICAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFVzZXJGaWx0ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHQ6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICB9LCAoKSA9PiB7IHRoaXMucHJvcHMub25DaGFuZ2Uob3B0aW9uLCB0aGlzLnN0YXRlLnNlYXJjaFRleHQpOyB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRVc2VyRmlsdGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFRleHQ6IFwiXCJcclxuICAgICAgICAgICAgICAgIH0sICgpID0+IHsgdGhpcy5wcm9wcy5vbkNoYW5nZShvcHRpb24sIHRoaXMuc3RhdGUuc2VhcmNoVGV4dCk7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uS2V5d29yZENoYW5nZWQodGV4dCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzZWFyY2hUZXh0OiB0ZXh0XHJcbiAgICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKHRoaXMuc3RhdGUuc2VsZWN0ZWRVc2VyRmlsdGVyLCB0ZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBCdWlsZFVzZXJGaWx0ZXJzT3B0aW9ucygpIHtcclxuICAgICAgICBsZXQge3VzZXJGaWx0ZXJzfSA9IHRoaXMucHJvcHM7XHJcbiAgICAgICAgbGV0IHVzZXJGaWx0ZXJzT3B0aW9ucyA9IFtdO1xyXG4gICAgICAgIHVzZXJGaWx0ZXJzT3B0aW9ucyA9IHVzZXJGaWx0ZXJzLm1hcCgodXNlckZpbHRlcikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4geyBsYWJlbDogdXNlckZpbHRlci5LZXksIHZhbHVlOiB1c2VyRmlsdGVyLlZhbHVlIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJGaWx0ZXJzT3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgbGV0IHVzZXJGaWx0ZXJzT3B0aW9ucyA9IHRoaXMuQnVpbGRVc2VyRmlsdGVyc09wdGlvbnMoKTtcclxuICAgICAgICByZXR1cm4gKDxkaXYgY2xhc3NOYW1lPVwidXNlcnMtZmlsdGVyLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICA8R3JpZENlbGwgY29sdW1uU2l6ZT17MzV9ID5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnVzZXJGaWx0ZXJzT3B0aW9ucyAhPSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VyRmlsdGVyc09wdGlvbnMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlci1maWx0ZXJzLWZpbHRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gc3R5bGU9e3sgd2lkdGg6IFwiMTAwJVwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQm9yZGVyPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3VzZXJGaWx0ZXJzT3B0aW9uc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0aGlzLnN0YXRlLnNlbGVjdGVkVXNlckZpbHRlci5sYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0PXt0aGlzLm9uU2VsZWN0LmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwZW5kV2l0aD17TG9jYWxpemF0aW9uLmdldChcIlNob3dMYWJlbFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2xlYXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgICA8L0dyaWRDZWxsPlxyXG4gICAgICAgICAgICA8R3JpZENlbGwgY29sdW1uU2l6ZT17MzB9ID5cclxuICAgICAgICAgICAgICAgIDxkaXY+Jm5ic3A7IDwvZGl2PjwvR3JpZENlbGw+XHJcbiAgICAgICAgICAgIDxHcmlkQ2VsbCBjb2x1bW5TaXplPXszNX0gPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtZmlsdGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgeyh0aGlzLnN0YXRlLnNlbGVjdGVkVXNlckZpbHRlci52YWx1ZSA9PT0gMCB8fCB0aGlzLnN0YXRlLnNlbGVjdGVkVXNlckZpbHRlci52YWx1ZSA9PT0gNSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaEJveCBwbGFjZWhvbGRlcj17TG9jYWxpemF0aW9uLmdldChcIlNlYXJjaFBsYWNlSG9sZGVyXCIpfSBvblNlYXJjaD17dGhpcy5vbktleXdvcmRDaGFuZ2VkLmJpbmQodGhpcyl9IG1heExlbmd0aD17NTB9IGljb25TdHlsZT17eyByaWdodDogMCB9fSAvPn1cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsZWFyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9HcmlkQ2VsbD5cclxuICAgICAgICA8L2Rpdj4pO1xyXG4gICAgfVxyXG59XHJcbkZpbHRlcnNCYXIucHJvcFR5cGVzID0ge1xyXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIHVzZXJGaWx0ZXJzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCAoRmlsdGVyc0Jhcik7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IExvY2FsaXphdGlvbiBmcm9tIFwibG9jYWxpemF0aW9uXCI7XHJcbmltcG9ydCBVc2VyVGFibGUgZnJvbSBcIi4uLy4uL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9Vc2VyVGFibGVcIjtcclxuaW1wb3J0IEZpbHRlcnNCYXIgZnJvbSBcIi4uLy4uL19leHBvcnRhYmxlcy9zcmMvY29tcG9uZW50cy9GaWx0ZXJzQmFyXCI7XHJcbmltcG9ydCBcIi4vc3R5bGUubGVzc1wiO1xyXG5pbXBvcnQge0NvbW1vblVzZXJzQWN0aW9ucyB9IGZyb20gXCJkbm4tdXNlcnMtY29tbW9uLWFjdGlvbnNcIjtcclxuaW1wb3J0IGFwcFNldHRpbmdzIGZyb20gXCJ1dGlscy9hcHBsaWNhdGlvblNldHRpbmdzXCI7XHJcbmltcG9ydCB1dGlsaXRpZXMgZnJvbSBcInV0aWxzXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiwgR3JpZENlbGwsIFBlcnNvbmFCYXJQYWdlSGVhZGVyLCBQZXJzb25hQmFyUGFnZUJvZHksIFBhZ2VyIH0gZnJvbSBcIkBkbm5zb2Z0d2FyZS9kbm4tcmVhY3QtY29tbW9uXCI7XHJcblxyXG5jb25zdCBzZWFyY2hQYXJhbWV0ZXJzID0ge1xyXG4gICAgc2VhcmNoVGV4dDogXCJcIixcclxuICAgIGZpbHRlcjogMCxcclxuICAgIHBhZ2VJbmRleDogMCxcclxuICAgIHBhZ2VTaXplOiAxMCxcclxuICAgIHNvcnRDb2x1bW46IFwiXCIsXHJcbiAgICBzb3J0QXNjZW5kaW5nOiBmYWxzZSxcclxuICAgIHJlc2V0SW5kZXg6IGZhbHNlXHJcbn07XHJcbmNsYXNzIEJvZHkgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB1c2VyRmlsdGVyczogW10sXHJcbiAgICAgICAgICAgIHNlYXJjaFBhcmFtZXRlcnNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLmdldFVzZXJGaWx0ZXJzKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB1c2VyRmlsdGVycyA9IE9iamVjdC5hc3NpZ24oW10sIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB1c2VyRmlsdGVyc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DaGFuZ2Uoa2V5LCBldmVudCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBba2V5XTogZXZlbnQudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25GaWx0ZXJDaGFuZ2Uob3B0aW9uLCBzZWFyY2hUZXh0KSB7XHJcbiAgICAgICAgbGV0IHtzZWFyY2hQYXJhbWV0ZXJzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgc2VhcmNoUGFyYW1ldGVycy5zZWFyY2hUZXh0ID0gc2VhcmNoVGV4dDtcclxuICAgICAgICBzZWFyY2hQYXJhbWV0ZXJzLmZpbHRlciA9IG9wdGlvbi52YWx1ZTtcclxuICAgICAgICBzZWFyY2hQYXJhbWV0ZXJzLnBhZ2VJbmRleCA9IDA7XHJcbiAgICAgICAgc2VhcmNoUGFyYW1ldGVycy5yZXNldEluZGV4ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKENvbW1vblVzZXJzQWN0aW9ucy5nZXRVc2VycyhzZWFyY2hQYXJhbWV0ZXJzKSk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFBhcmFtZXRlcnMgfSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQge3NlYXJjaFBhcmFtZXRlcnN9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgICAgICAgc2VhcmNoUGFyYW1ldGVycy5yZXNldEluZGV4ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hQYXJhbWV0ZXJzIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUGFnZUNoYW5nZWQoY3VycmVudFBhZ2UsIHBhZ2VTaXplKSB7XHJcbiAgICAgICAgbGV0IHtzZWFyY2hQYXJhbWV0ZXJzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgc2VhcmNoUGFyYW1ldGVycy5wYWdlSW5kZXggPSBjdXJyZW50UGFnZTtcclxuICAgICAgICBzZWFyY2hQYXJhbWV0ZXJzLnBhZ2VTaXplID0gcGFnZVNpemU7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChDb21tb25Vc2Vyc0FjdGlvbnMuZ2V0VXNlcnMoc2VhcmNoUGFyYW1ldGVycykpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hQYXJhbWV0ZXJzIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdvcmtTcGFjZVRyYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUudXNlckZpbHRlcnMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICA8R3JpZENlbGwgY2xhc3NOYW1lPVwidXNlcnMtd29ya3NwYWNlLXRyYXlcIj5cclxuICAgICAgICAgICAgICAgIDxGaWx0ZXJzQmFyXHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25GaWx0ZXJDaGFuZ2UuYmluZCh0aGlzKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlckZpbHRlcnM9e3RoaXMuc3RhdGUudXNlckZpbHRlcnN9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L0dyaWRDZWxsPjtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVDcmVhdGVCb3goKSB7XHJcbiAgICAgICAgdGhpcy51c2VyVGFibGUub25BZGRVc2VyKCk7XHJcbiAgICB9XHJcbiAgICBjYW5BZGRVc2VyKClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gYXBwU2V0dGluZ3MuYXBwbGljYXRpb25TZXR0aW5ncy5zZXR0aW5ncy5pc0FkbWluIHx8IGFwcFNldHRpbmdzLmFwcGxpY2F0aW9uU2V0dGluZ3Muc2V0dGluZ3MucGVybWlzc2lvbnMuQUREX1VTRVI7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3Qge3Byb3BzLCBzdGF0ZX0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHBhbmVsQm9keU1hcmdpbiA9IHN0YXRlLmNyZWF0ZUJveFZpc2libGUgPyBcIndpdGhvdXQtbWFyZ2luXCIgOiBcIlwiO1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxHcmlkQ2VsbD5cclxuICAgICAgICAgICAgICAgIDxQZXJzb25hQmFyUGFnZUhlYWRlciB0aXRsZT17TG9jYWxpemF0aW9uLmdldChcIm5hdl9Vc2Vyc1wiKSB9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5BZGRVc2VyKCkgJiYgIFxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cInByaW1hcnlcIiBzaXplPVwibGFyZ2VcIiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUNyZWF0ZUJveC5iaW5kKHRoaXMpIH0gdGl0bGU9e0xvY2FsaXphdGlvbi5nZXQoXCJidG5DcmVhdGVVc2VyXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge0xvY2FsaXphdGlvbi5nZXQoXCJidG5DcmVhdGVVc2VyXCIpIH1cclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L1BlcnNvbmFCYXJQYWdlSGVhZGVyPlxyXG4gICAgICAgICAgICAgICAgPFBlcnNvbmFCYXJQYWdlQm9keSB3b3JrU3BhY2VUcmF5VmlzaWJsZT17dHJ1ZX0gd29ya1NwYWNlVHJheU91dHNpZGU9e3RydWV9IHdvcmtTcGFjZVRyYXk9e3RoaXMuZ2V0V29ya1NwYWNlVHJheSgpIH0gY2xhc3NOYW1lPXtwYW5lbEJvZHlNYXJnaW59PlxyXG4gICAgICAgICAgICAgICAgICAgIDxVc2VyVGFibGUgcmVmPXsobm9kZSkgPT4gdGhpcy51c2VyVGFibGUgPSBub2RlfSBhcHBTZXR0aW5ncz17YXBwU2V0dGluZ3N9IGZpbHRlcj17c3RhdGUuc2VhcmNoUGFyYW1ldGVycy5maWx0ZXJ9Lz5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlcnMtcGFnaW5nXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFnZXIgcGFnZVNpemVEcm9wRG93bldpdGhvdXRCb3JkZXI9e3RydWV9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dTdW1tYXJ5PXt0cnVlfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UGFnZUluZm89e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplT3B0aW9uVGV4dD17TG9jYWxpemF0aW9uLmdldChcInVzZXJzUGFnZVNpemVPcHRpb25UZXh0XCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1hcnlUZXh0PXtMb2NhbGl6YXRpb24uZ2V0KFwidXNlcnNTdW1tYXJ5VGV4dFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZT17dGhpcy5zdGF0ZS5zZWFyY2hQYXJhbWV0ZXJzLnBhZ2VTaXplfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUmVjb3Jkcz17cHJvcHMudG90YWxVc2Vyc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblBhZ2VDaGFuZ2VkPXt0aGlzLm9uUGFnZUNoYW5nZWQuYmluZCh0aGlzKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRJbmRleD17dGhpcy5zdGF0ZS5zZWFyY2hQYXJhbWV0ZXJzLnJlc2V0SW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VsdHVyZT17dXRpbGl0aWVzLmdldEN1bHR1cmUoKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L1BlcnNvbmFCYXJQYWdlQm9keSA+XHJcbiAgICAgICAgICAgIDwvR3JpZENlbGw+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuQm9keS5wcm9wVHlwZXMgPSB7XHJcbiAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIHRvdGFsVXNlcnM6IFByb3BUeXBlcy5udW1iZXJcclxufTtcclxuXHJcbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0b3RhbFVzZXJzOiBzdGF0ZS51c2Vycy50b3RhbFVzZXJzXHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEJvZHkpOyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgQm9keSBmcm9tIFwiLi9Cb2R5XCI7XHJcbmltcG9ydCB7Q29tbW9uVXNlcnNBY3Rpb25zIH0gZnJvbSBcImRubi11c2Vycy1jb21tb24tYWN0aW9uc1wiO1xyXG5pbXBvcnQgeyBQZXJzb25hQmFyUGFnZSB9IGZyb20gXCJAZG5uc29mdHdhcmUvZG5uLXJlYWN0LWNvbW1vblwiO1xyXG5cclxuY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICAgICAgY29uc3Qge3Byb3BzfSA9IHRoaXM7XHJcbiAgICAgICAgcHJvcHMuZGlzcGF0Y2goQ29tbW9uVXNlcnNBY3Rpb25zLmdldFVzZXJzKHtcclxuICAgICAgICAgICAgc2VhcmNoVGV4dDogXCJcIixcclxuICAgICAgICAgICAgZmlsdGVyOiAwLFxyXG4gICAgICAgICAgICBwYWdlSW5kZXg6IDAsXHJcbiAgICAgICAgICAgIHBhZ2VTaXplOiAxMCxcclxuICAgICAgICAgICAgc29ydENvbHVtbjogXCJcIixcclxuICAgICAgICAgICAgc29ydEFzY2VuZGluZzogZmFsc2VcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2lsZXJwbGF0ZS1hcHAgcGVyc29uYUJhci1tYWluQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICA8UGVyc29uYUJhclBhZ2UgaXNPcGVuPXt0cnVlfT5cclxuICAgICAgICAgICAgICAgICAgICA8Qm9keSAvPlxyXG4gICAgICAgICAgICAgICAgPC9QZXJzb25hQmFyUGFnZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuQXBwLlByb3BUeXBlcyA9IHtcclxuICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKCkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEFwcCk7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgQXBwIGZyb20gXCIuLi9jb21wb25lbnRzL0FwcFwiO1xyXG5cclxuY29uc3QgUm9vdCA9ICgpID0+IChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9pbGVycGxhdGUtcm9vdFwiPlxyXG4gICAgICAgIDxBcHAvPlxyXG4gICAgPC9kaXY+XHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSb290OyIsImltcG9ydCBhcHBTZXR0aW5ncyBmcm9tIFwidXRpbHMvYXBwbGljYXRpb25TZXR0aW5nc1wiO1xyXG5cclxuY29uc3QgdXNlcnNBcHBsaWNhdGlvbiA9IHtcclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgLy8gVGhpcyBzZXR0aW5nIGlzIHJlcXVpcmVkIGFuZCBkZWZpbmUgdGhlIHB1YmxpYyBwYXRoIFxyXG4gICAgICAgIC8vIHRvIGFsbG93IHRoZSB3ZWIgYXBwbGljYXRpb24gdG8gZG93bmxvYWQgYXNzZXRzIG9uIGRlbWFuZCBcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgICAgICAvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyA9IG9wdGlvbnMucHVibGljUGF0aDsgICAgICAgIFxyXG4gICAgICAgIGxldCBvcHRpb25zID0gd2luZG93LmRubi5pbml0VXNlcnMoKTtcclxuICAgICAgICBhcHBTZXR0aW5ncy5pbml0KG9wdGlvbnMpO1xyXG4gICAgICAgIC8vIGRlbGF5IHRoZSBzdHlsZXMgbG9hZGluZyBhZnRlciB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gaXMgc2V0XHJcbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdGhlIGZvbnRzIGFzc29jaWF0ZWQgdG8gYmUgbG9hZGVkIHByb3Blcmx5IGluIHByb2R1Y3Rpb25cclxuICAgICAgICByZXF1aXJlKFwiLi4vbGVzcy9zdHlsZS5sZXNzXCIpO1xyXG4gICAgfSxcclxuICAgIGRpc3BhdGNoKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImRpc3BhdGNoIG1ldGhvZCBuZWVkcyB0byBiZSBvdmVyd3JpdHRlbiBmcm9tIHRoZSBSZWR1eCBzdG9yZVwiKTtcclxuICAgIH1cclxufTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2Vyc0FwcGxpY2F0aW9uOyIsImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQge3VzZXJzfSBmcm9tIFwiZG5uLXVzZXJzLWNvbW1vbi1yZWR1Y2Vyc1wiO1xyXG5cclxuY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xyXG4gICAgdXNlcnM6IHVzZXJzKClcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCByb290UmVkdWNlcjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEZXZUb29scyB9IGZyb20gXCJyZWR1eC1kZXZ0b29sc1wiO1xyXG5pbXBvcnQgTG9nTW9uaXRvciBmcm9tIFwicmVkdXgtZGV2dG9vbHMtbG9nLW1vbml0b3JcIjtcclxuaW1wb3J0IERvY2tNb25pdG9yIGZyb20gXCJyZWR1eC1kZXZ0b29scy1kb2NrLW1vbml0b3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZURldlRvb2xzKFxyXG4gIDxEb2NrTW9uaXRvciB0b2dnbGVWaXNpYmlsaXR5S2V5PVwiY3RybC1oXCJcclxuICAgICAgICAgICAgICAgY2hhbmdlUG9zaXRpb25LZXk9XCJjdHJsLXFcIj5cclxuICAgIDxMb2dNb25pdG9yIC8+XHJcbiAgPC9Eb2NrTW9uaXRvcj5cclxuKTtcclxuIiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGFwcGx5TWlkZGxld2FyZSwgY29tcG9zZSB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gXCJyZWR1eC10aHVua1wiO1xyXG5pbXBvcnQgcmVkdXhJbW11dGFibGVTdGF0ZUludmFyaWFudCBmcm9tIFwicmVkdXgtaW1tdXRhYmxlLXN0YXRlLWludmFyaWFudFwiO1xyXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSBcIi4uL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyXCI7XHJcbmltcG9ydCBEZXZUb29scyBmcm9tIFwiLi4vY29udGFpbmVycy9EZXZUb29sc1wiO1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuY29uc3QgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKGluaXRpYWxTdGF0ZSkge1xyXG4gICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcclxuICAgICAgICByb290UmVkdWNlcixcclxuICAgICAgICBpbml0aWFsU3RhdGUsXHJcbiAgICAgICAgY29tcG9zZShcclxuICAgICAgICAgICAgSVNfUFJPRFVDVElPTiA/XHJcbiAgICAgICAgICAgICAgICBhcHBseU1pZGRsZXdhcmUodGh1bmtNaWRkbGV3YXJlKSA6XHJcbiAgICAgICAgICAgICAgICBhcHBseU1pZGRsZXdhcmUodGh1bmtNaWRkbGV3YXJlLCByZWR1eEltbXV0YWJsZVN0YXRlSW52YXJpYW50KCkpLCBEZXZUb29scy5pbnN0cnVtZW50KClcclxuICAgICAgICApXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHN0b3JlO1xyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCBhcHBsaWNhdGlvbiBmcm9tIFwiLi9nbG9iYWxzL2FwcGxpY2F0aW9uXCI7XHJcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tIFwiLi9zdG9yZS9jb25maWd1cmVTdG9yZVwiO1xyXG5pbXBvcnQgQXBwIGZyb20gXCIuL2NvbnRhaW5lcnMvUm9vdFwiO1xyXG5cclxubGV0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcclxuXHJcbmFwcGxpY2F0aW9uLmRpc3BhdGNoID0gc3RvcmUuZGlzcGF0Y2g7XHJcblxyXG5jb25zdCBhcHBDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZXJzLWNvbnRhaW5lclwiKTtcclxuaWYgKGFwcENvbnRhaW5lcikge1xyXG4gICAgYXBwbGljYXRpb24uaW5pdCgpO1xyXG59IGVsc2Uge1xyXG4gICAgdGhyb3cgRXJyb3IoXCJDYW5ub3QgZmluZCB1c2VycyBjb250YWluZXIuXCIpO1xyXG59XHJcbnJlbmRlcihcclxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxyXG4gICAgICAgIDxBcHAgLz5cclxuICAgIDwvUHJvdmlkZXI+LFxyXG4gICAgYXBwQ29udGFpbmVyXHJcbik7Il0sInNvdXJjZVJvb3QiOiIifQ==