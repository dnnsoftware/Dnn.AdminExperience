!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="http://localhost:8050/dist/",r(r.s=39)}([function(e,t){e.exports=window.dnn.nodeModules.React},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents},function(e,t,r){e.exports=r(13)()},function(e,t){e.exports=window.dnn.nodeModules.ReactRedux},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var o=(i=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),s=n.sources.map(function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"});return[r].concat(s).concat([o]).join("\n")}var i;return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+r+"}":r}).join("")},t.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(n[s]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&n[i[0]]||(r&&!i[2]?i[2]=r:r&&(i[2]="("+i[2]+") and ("+r+")"),t.push(i))}},t}},function(e,t,r){var n,o,s={},i=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),a=function(e){var t={};return function(e,r){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,c=[],d=r(17);function p(e,t){for(var r=0;r<e.length;r++){var n=e[r],o=s[n.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](n.parts[i]);for(;i<n.parts.length;i++)o.parts.push(y(n.parts[i],t))}else{var a=[];for(i=0;i<n.parts.length;i++)a.push(y(n.parts[i],t));s[n.id]={id:n.id,refs:1,parts:a}}}}function f(e,t){for(var r=[],n={},o=0;o<e.length;o++){var s=e[o],i=t.base?s[0]+t.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};n[i]?n[i].parts.push(a):r.push(n[i]={id:i,parts:[a]})}return r}function h(e,t){var r=a(e.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=c[c.length-1];if("top"===e.insertAt)n?n.nextSibling?r.insertBefore(t,n.nextSibling):r.appendChild(t):r.insertBefore(t,r.firstChild),c.push(t);else if("bottom"===e.insertAt)r.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertAt.before,r);r.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var n=function(){0;return r.nc}();n&&(e.attrs.nonce=n)}return b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach(function(r){e.setAttribute(r,t[r])})}function y(e,t){var r,n,o,s;if(t.transform&&e.css){if(!(s="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=s}if(t.singleton){var i=u++;r=l||(l=g(t)),n=S.bind(null,r,i,!1),o=S.bind(null,r,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),n=function(e,t,r){var n=r.css,o=r.sourceMap,s=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||s)&&(n=d(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([n],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(i),a&&URL.revokeObjectURL(a)}.bind(null,r,t),o=function(){m(r),r.href&&URL.revokeObjectURL(r.href)}):(r=g(t),n=function(e,t){var r=t.css,n=t.media;n&&e.setAttribute("media",n);if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){m(r)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var r=f(e,t);return p(r,t),function(e){for(var n=[],o=0;o<r.length;o++){var i=r[o];(a=s[i.id]).refs--,n.push(a)}e&&p(f(e,t),t);for(o=0;o<n.length;o++){var a;if(0===(a=n[o]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete s[a.id]}}}};var v,w=(v=[],function(e,t){return v[e]=t,v.filter(Boolean).join("\n")});function S(e,t,r,n){var o=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var s=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(s,i[t]):e.appendChild(s)}}},function(e,t,r){var n=r(19);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){var n=r(18);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t){e.exports=window.dnn.nodeModules.Moment},function(e,t,r){var n=r(26);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){var n=r(29);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t){e.exports=window.dnn.nodeModules.ThrottleDebounce},function(e,t,r){var n=r(36);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){"use strict";var n=r(14);function o(){}e.exports=function(){function e(e,t,r,o,s,i){if(i!==n){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return r.checkPropTypes=o,r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,r){var n=r(16);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.header-row{padding:10px 0 10px;border-bottom:1px solid #C8C8C8;text-transform:uppercase}.header-row .dnn-grid-cell{padding:0 15px}.header-row .dnn-grid-cell.empty{text-indent:-100px;overflow:hidden}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var r=t.protocol+"//"+t.host,n=r+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,s=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?r+s:n+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,r){(t=e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.collapsible-component-users .collapsible-header-users.false{border-top:2px solid #1E88C3;border-bottom:2px solid #1E88C3;margin-top:-2px}._1Mguw8rOBoWWOa_pLgzWpT{padding:15px 0 7.5px;border-bottom:1px solid #C8C8C8}._1Mguw8rOBoWWOa_pLgzWpT.closed{padding:0;border-bottom:none}._1Mguw8rOBoWWOa_pLgzWpT .user-avatar{text-align:center}._1Mguw8rOBoWWOa_pLgzWpT .user-avatar img{border-radius:25px;width:40px}._1Mguw8rOBoWWOa_pLgzWpT .user-detail-row{float:left;width:100%}._1Mguw8rOBoWWOa_pLgzWpT .user-detail-row>div{width:100%;float:left}._1Mguw8rOBoWWOa_pLgzWpT .user-emails{padding-left:11px !important}._1Mguw8rOBoWWOa_pLgzWpT .email-link>a{color:#1E88C3;text-decoration:none}._1Mguw8rOBoWWOa_pLgzWpT .user-names{padding-left:2px !important}._1Mguw8rOBoWWOa_pLgzWpT .user-names h6{font-size:15px}._1Mguw8rOBoWWOa_pLgzWpT .user-names p{text-transform:lowercase}._1Mguw8rOBoWWOa_pLgzWpT .user-joined{padding-left:22px !important}._1Mguw8rOBoWWOa_pLgzWpT .deleted{text-decoration:line-through}._1Mguw8rOBoWWOa_pLgzWpT .extension-action{margin-left:5px;float:right;cursor:pointer}._1Mguw8rOBoWWOa_pLgzWpT .extension-action svg{width:20px;float:left;height:20px}._1Mguw8rOBoWWOa_pLgzWpT .extension-action.false svg{fill:#1E88C3}._1Mguw8rOBoWWOa_pLgzWpT .extension-action.false svg:hover{fill:#4B4E4F}._1Mguw8rOBoWWOa_pLgzWpT .extension-action.more-menu{position:relative}._1Mguw8rOBoWWOa_pLgzWpT .dnn-grid-cell{padding:0 15px}._1Mguw8rOBoWWOa_pLgzWpT .dnn-grid-cell p{word-wrap:break-word}._1Mguw8rOBoWWOa_pLgzWpT .package-name{word-wrap:break-word;display:inline;vertical-align:top}",""]),t.locals={extensionDetailRow:"_1Mguw8rOBoWWOa_pLgzWpT"}},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-menu.menu-item{padding:10px 20px;cursor:pointer;color:black}.dnn-user-menu.menu-item:hover{background-color:#EFF0F0;color:#1E88C3}.dnn-user-menu.menu{position:absolute;right:-18px;top:35px;text-align:left;min-width:200px;border:1px solid #C8C8C8;border-radius:3px;background-color:#FFFFFF;list-style:none;padding:10px 0px;box-shadow:0 0 30px 0 rgba(0,0,0,0.1);z-index:1000}",""])},function(e,t,r){var n=r(21);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-change-password{background-color:#FFFFFF;position:absolute;width:47%;left:30px;z-index:100;box-sizing:border-box;float:left;border:1px solid #C8C8C8;box-shadow:0 0 17px 2px rgba(0,0,0,0.2)}.dnn-user-change-password .dnn-grid-cell{padding:15px;margin:0px;float:left;text-align:left}.dnn-user-change-password .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell{padding:0px 15px;margin:0px}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell .right{float:right}.dnn-user-change-password .buttons .dnn-grid-cell.leftBtn{padding-right:0px;text-align:right}.dnn-user-change-password .buttons .dnn-grid-cell.rightBtn{padding-left:30px}",""])},function(e,t,r){var n=r(23);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .dnn-user-menu.menu-popup{position:absolute}#users-container .dnn-user-menu .dnn-user-change-password{width:400px;right:-18px;top:35px;left:auto}",""])},function(e,t,r){var n=r(25);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"",""])},function(e,t,r){(t=e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._1QFop-9zyo_9h6KP3GTTbH{box-sizing:border-box;margin-top:10px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box{width:100%;background-color:white;padding:10px 0}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .box-title{margin-bottom:15px;text-transform:uppercase}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-system.with-right-border.bottom-half{padding-top:25px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-switch-container{width:100%}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-switch-container .dnn-switch{float:right}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-single-line-input-with-error .__react_component_tooltip{max-width:200px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell{padding:10px 15px;box-sizing:border-box}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell>hr{border:none;height:1px;color:#C8C8C8;background-color:#C8C8C8}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell .version-dropdown{width:31.1%;box-sizing:border-box;margin-right:10px;vertical-align:bottom}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell .version-dropdown:last-child{margin-right:0}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell.modal-footer{text-align:center}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell.modal-footer button{min-width:100px;margin-right:10px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .email-notification-line{text-align:center}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .email-notification-line .dnn-checkbox-container.right{float:none}",""]),t.locals={newExtensionModal:"_1QFop-9zyo_9h6KP3GTTbH"}},function(e,t,r){var n=r(28);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.passwordStrength{line-height:1.5pt;height:1.5pt;position:relative;top:-18px}.passwordStrength.weak{background-color:red;width:25%}.passwordStrength.fair{background-color:#f6d500;width:75%}.passwordStrength.strong{background-color:green;width:100%}.passwordStrengthLabel{position:relative;top:-45px;left:308px;font-weight:700}.passwordStrengthLabel.weak{color:red}.passwordStrengthLabel.fair{color:#f6d500}.passwordStrengthLabel.strong{color:green}",""])},function(e,t,r){(t=e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._1V9clvN0tHMc4tkJHXUDNn{box-sizing:border-box;float:left;margin:15px 0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell{margin:5px 0px;float:left;text-align:left}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box{padding:10px 30px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right{border-left:1px solid #C8C8C8}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right .dnn-grid-system{margin:10px 0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right .dnn-grid-system.first{margin-bottom:4.5px;margin-right:0px;margin-left:0px;margin-top:0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right .dnn-grid-system .dnn-grid-cell{padding:0px;margin:0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell.no-padding{padding:0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link{padding:0px;font-weight:bold;cursor:pointer;color:#1E88C3}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link:active,._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link:hover{color:#21A3DA}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link.disabled{color:#C8C8C8;cursor:default}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link:visited{color:#226F9B}._1V9clvN0tHMc4tkJHXUDNn .buttons .dnn-grid-cell.leftBtn{padding-right:5px;text-align:right}._1V9clvN0tHMc4tkJHXUDNn .buttons .dnn-grid-cell.rightBtn{padding-left:10px}._1V9clvN0tHMc4tkJHXUDNn .isloading .input-tooltip-container input{pointer-events:none;border-color:#C8C8C8}",""]),t.locals={userSettings:"_1V9clvN0tHMc4tkJHXUDNn"}},function(e,t,r){var n=r(31);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.user-detail-row .edit-profile{float:left;padding:0px;width:100%;border:0px;min-height:700px;padding:10px 25px}",""])},function(e,t,r){var n=r(33);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .user-role-row{width:100%;float:left;padding:13px 20px;box-sizing:border-box;text-align:left}#users-container .user-role-row:not(:last-child){border-bottom:1px solid #C8C8C8}#users-container .user-role-row div.edit-row a{display:inline-block}#users-container .user-role-row .dnn-grid-cell{box-sizing:border-box}#users-container .user-role-row .dnn-grid-cell .actions{float:right;box-sizing:border-box;height:20px;text-align:right}#users-container .user-role-row .dnn-grid-cell .actions>div{text-align:left;float:left}#users-container .user-role-row .dnn-grid-cell .actions span{float:left}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker{height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:0;width:19px;height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon.active{opacity:1}#users-container .user-role-row .dnn-grid-cell .actions span a svg{width:23px;height:23px}#users-container .user-role-row .dnn-grid-cell .actions a{float:left;opacity:0}#users-container .user-role-row .dnn-grid-cell .actions:hover a{display:inline-block}#users-container .user-role-row .dnn-grid-cell .actions div.edit-row a{display:inline-block}#users-container .user-role-row:hover .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:1}#users-container .user-role-row:hover .dnn-grid-cell .actions a{opacity:1}",""])},function(e,t,r){var n=r(35);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,'svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .userroles-form-form{width:80%;margin:20px 10%;float:left;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list{float:left;width:100%;margin:15px 0;display:table;cursor:auto;box-sizing:border-box;border:1px solid #C8C8C8;text-align:left}#users-container .userroles-form-form .user-roles-list .user-role-body{color:#6F7273}#users-container .userroles-form-form .user-roles-list .user-role-body .no-roles-row{width:100%;float:left;text-align:center;font-weight:bold;padding:13px 20px;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list .user-role-header-row{display:table;border-bottom:1px solid #C8C8C8;width:100%;float:left;position:relative;padding:15px 20px;box-sizing:border-box;text-transform:uppercase}#users-container .userroles-form-form .user-roles-list-paging{text-align:left}#users-container .userroles-form-form .header{width:100%;float:left;box-sizing:border-box}#users-container .userroles-form-form .header .header-title{text-align:left;width:100%;font-weight:bold;display:inline-block;text-transform:uppercase;margin-top:10px;margin-bottom:10px}#users-container .userroles-form-form .header .add-box{width:100%;float:left;box-sizing:border-box;border-bottom:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box .dnn-grid-cell{padding:0px}#users-container .userroles-form-form .header .add-box .send-email-box{width:100%;float:left}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container{float:left;margin-top:10px;margin-right:10px}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container .checkbox{margin-bottom:0px}#users-container .userroles-form-form .header .add-box .send-email-box label{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span{width:100%;display:inline-block;border-left:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox{float:left;width:250px;height:34px;line-height:34px;vertical-align:middle;padding:0;border:none;color:#46292B;border-radius:0;display:inline-block;box-shadow:none;background:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox button{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-webkit-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox :-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox :-ms-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox input{-webkit-box-shadow:none;padding:0 0 0 12px;height:100%;vertical-align:top;background-color:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox input::-ms-clear{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container{box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup{border-radius:0px;border:1px solid #C8C8C8;box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list{margin:0;padding:0}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li{padding-left:15px;height:30px;line-height:30px;color:#6F7273;border:none;outline:none;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li:hover{background-color:#EFF0F0;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li.rw-state-selected{background-color:transparent;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .add-role-button{float:right;text-align:right;width:auto;font-weight:bolder;overflow:hidden;cursor:pointer;box-sizing:border-box;padding-top:10px}#users-container .userroles-form-form .header .add-box span .add-role-button svg{fill:#6F7273}#users-container .userroles-form-form .header .add-box span .add-role-button span{border:none}#users-container .userroles-form-form .header .add-box span .add-role-button .extension-action{float:left}#users-container .userroles-form-form .header .add-box span button[role="secondary"]{vertical-align:middle;margin:0 0 0 10px}',""])},function(e,t,r){(t=e.exports=r(4)(!1)).push([e.i,"._1zcTdybR7GYpSrjF2RU0Bv .dnn-grid-cell{overflow-wrap:break-word}._1zcTdybR7GYpSrjF2RU0Bv .dnn-grid-cell.no-users{float:left;width:100%;text-align:center;padding:10px}",""]),t.locals={usersList:"_1zcTdybR7GYpSrjF2RU0Bv"}},function(e,t,r){var n=r(38);"string"==typeof n&&(n=[[e.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};r(5)(n,o);n.locals&&(e.exports=n.locals)},function(e,t,r){(e.exports=r(4)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.users-filter-container{float:left;box-sizing:border-box;margin-bottom:15px;width:100%;border:none}.users-filter-container .dnn-grid-cell{margin-bottom:5px}.users-filter-container .dnn-grid-cell .user-filters-filter{width:100%;border-right:1px solid #C8C8C8;font-size:13px;font-family:inherit;float:left;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-label{padding-top:4px;padding-left:0}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .dropdown-icon{top:5px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box{width:100%;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box input{padding:0px 16px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-toggle{width:auto}.users-filter-container .dnn-grid-cell .search-filter{float:left;width:100%}.users-filter-container .dnn-grid-cell .search-filter>div{display:block !important;border-left:1px solid #C8C8C8}.users-filter-container .dnn-grid-cell .search-filter>div input{display:block;width:100%;position:inherit !important;border:none;border-radius:none;background-color:transparent;outline:none;padding-right:45px}",""])},function(e,t,r){"use strict";r.r(t);var n={};r.r(n),r.d(n,"users",function(){return V});var o={};r.r(o),r.d(o,"CommonUsersActions",function(){return X});var s={};r.r(s),r.d(s,"UserTable",function(){return Vt}),r.d(s,"FiltersBar",function(){return Yt});var i={};r.r(i),r.d(i,"users",function(){return tr});var a=r(2),l=r.n(a),u=r(0),c=r.n(u),d=r(3),p=r(1);r(15);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var y=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),m(this,g(t).apply(this,arguments))}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,u["Component"]),r=t,(n=[{key:"render",value:function(){return c.a.createElement(p.GridCell,{columnSize:100,className:"header-row"},this.props.headers.map(function(e,t){return c.a.createElement(p.GridCell,{key:"header-row-grid-cell-".concat(t),columnSize:e.size,className:e.header?"":"empty"},c.a.createElement("h6",null,e.header||"Default"))}))}}])&&h(r.prototype,n),o&&h(r,o),t}();y.propTypes={headers:l.a.array.isRequired};var v=y,w=r(7),S=r.n(w);var E=Object.assign({},window.dnn.utility),x=r(8),C=r.n(x);function U(e,t){return e?new Date(e).getFullYear()<1900?"-":C()(e).locale(E.getCulture()).format(!0===t?"LLL":"L"):""}function O(e){return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)}function R(e,t,r){return r=void 0===r?"asc":r,e=e.sort(function(e,n){return e[t]>n[t]?"asc"===r?1:-1:e[t]<n[t]?"asc"===r?-1:1:0})}function _(e,t){var r=Object.assign([],E.getObjectCopy(e)),n=Object.assign({},E.getObjectCopy(t));if(r.some(function(e){return e.userId===n.userId})&&(r=r.filter(function(e){return e.userId!==n.userId})),!r.some(function(e){return e.userId===n.userId}))return r=(r=[n].concat(r)).sort(function(e,t){var r=e.createdOnDate,n=t.createdOnDate;return r>n?-1:r<n?1:0})}function k(e,t){var r=Object.assign([],E.getObjectCopy(e));return r.some(function(e){return e.userId===t})&&(r=r.filter(function(e){return e.userId!==t})),r}r(6);function D(e){return(D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function I(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function T(e,t){return!t||"object"!==D(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var j=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),T(this,P(t).apply(this,arguments))}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(t,u["Component"]),r=t,(n=[{key:"render",value:function(){return c.a.createElement("ul",{className:"dnn-user-menu menu"},this.props.children)}}])&&I(r.prototype,n),o&&I(r,o),t}();j.propTypes={children:l.a.node};var M=j;function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function F(e){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function G(e,t){return(G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var H=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=A(this,F(t).call(this))).state={hover:!1},e}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&G(e,t)}(t,u["Component"]),r=t,(n=[{key:"render",value:function(){var e=this;return c.a.createElement("li",{className:"dnn-user-menu menu-item",onMouseEnter:function(){return e.setState({hover:!0})},onMouseLeave:function(){return e.setState({hover:!1})},onClick:this.props.onMenuAction},this.props.children)}}])&&L(r.prototype,n),o&&L(r,o),t}();H.propTypes={onMenuAction:l.a.func.isRequired,children:l.a.node.isRequired};var W=H;var B={get:e=>E.getResx("Users",e)},V={RETRIEVED_USERS:"RETRIEVED_USERS",RETRIEVED_USER_DETAILS:"RETRIEVED_USER_DETAILS",CREATE_USER:"CREATE_USER",UPDATE_USER:"UPDATE_USER",DELETE_USER:"DELETE_USER",ERASE_USER:"ERASE_USER",RESTORE_USER:"RESTORE_USER",RETRIEVED_USER_FILTERS:"RETRIEVED_USER_FILTERS",USER_MADE_SUPERUSER:"USER_MADE_SUPERUSER",RETRIEVED_USERS_ROLES:"RETRIEVED_USERS_ROLES",RETRIEVED_SUGGEST_ROLES:"RETRIEVED_SUGGEST_ROLES",SAVE_USER_ROLE:"SAVE_USER_ROLE",REMOVE_USER_ROLE:"REMOVE_USER_ROLE",UPDATE_USER_AUTHORIZE_STATUS:"UPDATE_USER_AUTHORIZE_STATUS",USER_UNLOCKED:"USER_UNLOCKED",RETRIEVED_PASSWORD_STRENGTH_OPTIONS:"RETRIEVED_PASSWORD_STRENGTH_OPTIONS"};function q(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function K(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return t.join("&")}var Q=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r,n;return t=e,(r=[{key:"getServiceFramework",value:function(e){var t=E.sf;return t.moduleRoot="PersonaBar",t.controller=e,t}},{key:"getUsers",value:function(e,t,r){this.getServiceFramework("Users").get("GetUsers?"+K(e),{},t,r)}},{key:"getUserDetails",value:function(e,t,r){this.getServiceFramework("Users").get("GetUserDetail?"+K(e),{},t,r)}},{key:"updateUserBasicInfo",value:function(e,t,r){this.getServiceFramework("Users").post("UpdateUserBasicInfo",e,t,r)}},{key:"getUserFilters",value:function(e,t){this.getServiceFramework("Users").get("GetUserFilters",{},e,t)}},{key:"createUser",value:function(e,t,r){this.getServiceFramework("Users").post("CreateUser",e,t,r)}},{key:"changePassword",value:function(e,t,r){this.getServiceFramework("Users").post("ChangePassword",e,t,r)}},{key:"forceChangePassword",value:function(e,t,r){this.getServiceFramework("Users").post("ForceChangePassword?"+K(e),null,t,r)}},{key:"sendPasswordResetLink",value:function(e,t,r){this.getServiceFramework("Users").post("SendPasswordResetLink?"+K(e),null,t,r)}},{key:"deleteUser",value:function(e,t,r){this.getServiceFramework("Users").post("SoftDeleteUser?"+K(e),null,t,r)}},{key:"hardDeleteUser",value:function(e,t,r){this.getServiceFramework("Users").post("HardDeleteUser?"+K(e),null,t,r)}},{key:"restoreUser",value:function(e,t,r){this.getServiceFramework("Users").post("RestoreDeletedUser?"+K(e),null,t,r)}},{key:"updateSuperUserStatus",value:function(e,t,r){this.getServiceFramework("Users").post("UpdateSuperUserStatus?"+K(e),null,t,r)}},{key:"updateAuthorizeStatus",value:function(e,t,r){this.getServiceFramework("Users").post("UpdateAuthorizeStatus?"+K(e),null,t,r)}},{key:"unlockUser",value:function(e,t,r){this.getServiceFramework("Users").post("UnlockUser?"+K(e),null,t,r)}},{key:"getUserRoles",value:function(e,t,r){this.getServiceFramework("Users").get("GetUserRoles?"+K(e),{},t,r)}},{key:"getSuggestRoles",value:function(e,t,r){this.getServiceFramework("Users").get("GetSuggestRoles?"+K(e),{},t,r)}},{key:"saveUserRole",value:function(e,t,r,n,o){this.getServiceFramework("Users").post("SaveUserRole?notifyUser="+t+"&isOwner="+r,e,n,o)}},{key:"removeUserRole",value:function(e,t,r){this.getServiceFramework("Users").post("RemoveUserRole",e,t,r)}},{key:"passwordStrengthOptions",value:function(e,t){this.getServiceFramework("Users").get("PasswordStrengthOptions",{},e,t)}}])&&q(t.prototype,r),n&&q(t,n),e}());function J(e){E.notifyError(JSON.parse(e.responseText).Message,5e3)}var X={getUsers:function(e,t){return function(r){Q.getUsers(e,function(e){r({type:V.RETRIEVED_USERS,payload:e}),t&&t(e)},J)}},getUserDetails:function(e,t){return function(r){Q.getUserDetails(e,function(e){r({type:V.RETRIEVED_USER_DETAILS,payload:e}),t&&t(e)},J)}},getUserFilters:function(e){return function(){Q.getUserFilters(function(t){e&&e(t)},J)}},createUser:function(e,t,r){return function(n){Q.createUser(e,function(e){n({type:V.CREATE_USER,payload:e,filter:t}),r&&r(e)},J)}},updateUserBasicInfo:function(e,t){return function(r){Q.updateUserBasicInfo(e,function(e){r({type:V.UPDATE_USER,payload:e}),t&&t(e)},J)}},changePassword:function(e,t){return function(){Q.changePassword(e,function(e){t&&t(e)},J)}},forceChangePassword:function(e,t){return function(){Q.forceChangePassword(e,function(e){t&&t(e)},J)}},sendPasswordResetLink:function(e,t){return function(){Q.sendPasswordResetLink(e,function(e){t&&t(e)},J)}},deleteUser:function(e,t,r){return function(n){var o=Object.assign({},e.userDetails);o.isDeleted=!0,Q.deleteUser({userId:e.userDetails.userId},function(e){n({type:V.DELETE_USER,payload:o,filter:t}),r&&r(e)},J)}},eraseUser:function(e,t){return function(r){Q.hardDeleteUser(e,function(n){r({type:V.ERASE_USER,payload:{userId:e.userId}}),t&&t(n)},J)}},restoreUser:function(e,t,r){return function(n){var o=Object.assign({},e.userDetails);o.isDeleted=!1,Q.restoreUser({userId:e.userDetails.userId},function(e){n({type:V.RESTORE_USER,payload:o,filter:t}),r&&r(e)},J)}},updateSuperUserStatus:function(e,t,r){return function(n){Q.updateSuperUserStatus(e,function(o){n({type:V.USER_MADE_SUPERUSER,payload:{userId:e.userId,setSuperUser:e.setSuperUser},filter:t}),r&&r(o)},J)}},updateAuthorizeStatus:function(e,t,r,n){return function(o){var s=Object.assign({},e.userDetails);s.authorized=t,Q.updateAuthorizeStatus({userId:e.userDetails.userId,authorized:t},function(e){o({type:V.UPDATE_USER_AUTHORIZE_STATUS,payload:s,filter:r}),n&&n(e)},J)}},unLockUser:function(e,t){return function(r){var n=Object.assign({},e.userDetails);Q.unlockUser({userId:e.userDetails.userId},function(e){r({type:V.USER_UNLOCKED,payload:n}),t&&t(e)},J)}},getUserRoles:function(e,t){return function(r){Q.getUserRoles(e,function(e){r({type:V.RETRIEVED_USERS_ROLES,payload:e}),t&&t(e)},J)}},passwordStrength:function(){return function(e){Q.passwordStrengthOptions(function(t){e({type:V.RETRIEVED_PASSWORD_STRENGTH_OPTIONS,payload:t})})}},getSuggestRoles:function(e,t){return function(r){Q.getSuggestRoles(e,function(e){r({type:V.RETRIEVED_SUGGEST_ROLES,payload:{matchedRoles:e}}),t&&t(e)},J)}},saveUserRole:function(e,t,r,n){return function(o){Q.saveUserRole(e,t,r,function(e){o({type:V.SAVE_USER_ROLE,payload:e}),n&&n(e)},J)}},removeUserRole:function(e,t){return function(r){Q.removeUserRole(e,function(n){r({type:V.REMOVE_USER_ROLE,payload:{userId:e.userId,roleId:e.roleId}}),t&&t(n)},J)}}};r(20);function Z(e){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Y(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function $(e,t){return!t||"object"!==Z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ee(e){return(ee=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function te(e,t){return(te=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var re={width:"100%"},ne={userId:0,password:""},oe=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=$(this,ee(t).call(this,e))).state={changePassword:Object.assign({},ne),errors:{password:!1,confirmPassword:!1,passwordsMatch:!1},confirmPassword:""},r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&te(e,t)}(t,u["Component"]),r=t,(n=[{key:"componentWillMount",value:function(){var e=this.state.changePassword;e.userId=this.props.userId,e.password="",this.setState({changePassword:e})}},{key:"componentWillReceiveProps",value:function(e){var t=this;this.clear(function(){var r=t.state.changePassword;r.userId=e.userId,t.setState({changePassword:r})})}},{key:"onChange",value:function(e,t){var r=this;if("confirmPassword"===e)this.setState({confirmPassword:t.target.value},function(){r.validateForm()});else{var n=this.state.changePassword;n[e]=t.target.value,this.setState({changePassword:n},function(){r.validateForm()})}}},{key:"save",value:function(){var e=this;this.validateForm()&&this.props.dispatch(X.changePassword(this.state.changePassword,function(){e.cancel(),E.notify(B.get("ChangeSuccessful"),3e3)}))}},{key:"validateForm",value:function(){var e=!0,t=this.state.errors;t.password=!1,t.confirmPassword=!1,t.passwordsMatch=!1;var r=this.state.changePassword,n=this.state.confirmPassword;return""===r.password&&(t.password=!0,e=!1),""===r.confirmPassword?(t.confirmPassword=!0,e=!1):n!==r.password&&(t.passwordsMatch=!0,e=!1),this.setState({errors:t}),e}},{key:"clear",value:function(e){this.setState({changePassword:Object.assign({},ne),confirmPassword:"",errors:{password:!1,confirmPassword:!1,passwordsMatch:!1}},function(){"function"==typeof e&&e()})}},{key:"cancel",value:function(){this.clear(),"function"==typeof this.props.onCancel&&this.props.onCancel()}},{key:"render",value:function(){var e=this.state;return this.props.visible&&c.a.createElement("div",{className:"dnn-user-change-password"},c.a.createElement(p.GridCell,{className:"do-not-close"},c.a.createElement(p.GridCell,null,c.a.createElement("div",{className:"title"},B.get("ChangePassword")),c.a.createElement(p.SingleLineInputWithError,{label:B.get("NewPassword"),error:e.errors.password,onChange:this.onChange.bind(this,"password"),tooltipMessage:B.get("NewPassword.Help"),errorMessage:B.get("NewPassword.Required"),style:re,type:"password",autoComplete:"off",inputStyle:{marginBottom:15},value:e.changePassword.password}),c.a.createElement(p.SingleLineInputWithError,{label:B.get("NewConfirm"),error:e.errors.confirmPassword||e.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:B.get("NewConfirm.Help"),errorMessage:e.errors.confirmPassword?B.get("NewConfirm.Required"):B.get("NewConfirmMismatch.ErrorMessage"),style:re,type:"password",inputStyle:{marginBottom:15},autoComplete:"off",value:e.confirmPassword})),c.a.createElement(p.GridSystem,null,c.a.createElement(p.Button,{className:"right do-not-close",id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this)},B.get("btnCancel")),c.a.createElement(p.Button,{id:"confirmbtn do-not-close",type:"primary",onClick:this.save.bind(this)},B.get("btnApply")))))}}])&&Y(r.prototype,n),o&&Y(r,o),t}();oe.propTypes={dispatch:l.a.func.isRequired,userId:l.a.array.isRequired,visible:l.a.bool,onCancel:l.a.func},oe.defaultProps={visible:!0};var se=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(oe);r(22);function ie(e,t){return!t.isSuperUser&&(e.isAdmin||e.permissions.MANAGE_ROLES)}function ae(e){return e.isAdmin||e.permissions.MANAGE_PROFILE}function le(e){return e.isAdmin||e.permissions.VIEW_SETTINGS}function ue(e,t){return e.isAdmin||e.permissions.MANAGE_PASSWORD}function ce(e){return e.isAdmin||e.permissions.EDIT_SETTINGS}function de(e){return(de="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pe(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function fe(e){return(fe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function he(e,t){return(he=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function me(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var ge=function(e){function t(e){var r,n,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(r=!(o=fe(t).call(this,e))||"object"!==de(o)&&"function"!=typeof o?me(n):o).state={userDetails:e.userDetails,ChangePasswordVisible:!1},r.showMenu=!1,r.handleClick=r.handleClick.bind(me(me(r))),r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&he(e,t)}(t,u["Component"]),r=t,(n=[{key:"handleClick",value:function(e){("string"!=typeof e.target.className||"string"==typeof e.target.className&&-1===e.target.className.indexOf("menu-item"))&&this.props.onClose()}},{key:"componentWillMount",value:function(){document.addEventListener("click",this.handleClick,!1);var e=this.props;void 0===e.userDetails||e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}},{key:"componentWillReceiveProps",value:function(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}},{key:"getUserDetails",value:function(e){var t=this;e.dispatch(X.getUserDetails({userId:e.userId},function(e){var r=Object.assign({},e);t.setState({userDetails:r},function(){t.showMenu=!0})}))}},{key:"reload",value:function(){this.getUserDetails(this.props)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleClick,!1)}},{key:"sort",value:function(e,t,r){return r=void 0===r?"asc":r,e=e.sort(function(e,n){return e[t]>n[t]?"asc"===r?1:-1:e[t]<n[t]?"asc"===r?-1:1:0})}},{key:"onItemClick",value:function(e){switch(e){case"ResetPassword":this.onSendPasswordLink(),this.props.onClose();break;case"ChangePassword":this.toggleChangePassword();break;case"ForceChangePassword":this.forcePasswordChange(),this.props.onClose();break;case"DeleteUser":this.deleteUser(),this.props.onClose();break;case"RemoveUser":this.hardDeleteUser(),this.props.onClose();break;case"RestoreUser":this.restoreUser(),this.props.onClose();break;case"cmdUnAuthorize":this.updateAuthorizeStatus(!1),this.props.onClose();break;case"cmdAuthorize":this.updateAuthorizeStatus(!0),this.props.onClose();break;case"cmdUnLock":this.unLockUser(),this.props.onClose();break;case"PromoteToSuperUser":this.updateSuperUserStatus(!0),this.props.onClose();break;case"DemoteToRegularUser":this.updateSuperUserStatus(!1),this.props.onClose();break;case"ViewProfile":this.onViewProfile(),this.props.onClose();break;default:"function"==typeof this.props.userMenuAction&&this.props.userMenuAction(e,this.state.userDetails),this.props.onClose()}}},{key:"onViewProfile",value:function(){var e=this;E.closePersonaBar(function(){window.top.location=e.state.userDetails.profileUrl})}},{key:"onSendPasswordLink",value:function(){this.props.dispatch(X.sendPasswordResetLink({userId:this.props.userId},function(){E.notify(B.get("PasswordSent"),1e4)}))}},{key:"deleteUser",value:function(){var e=this;E.confirm(B.get("DeleteUser.Confirm"),B.get("Delete"),B.get("Cancel"),function(){e.props.dispatch(X.deleteUser({userDetails:e.props.userDetails},e.props.filter,function(){E.notify(B.get("UserDeleted"),3e3),e.reload()}))})}},{key:"hardDeleteUser",value:function(){var e=this;E.confirm(B.get("RemoveUser.Confirm"),B.get("Delete"),B.get("Cancel"),function(){e.props.dispatch(X.eraseUser({userId:e.props.userId}))})}},{key:"restoreUser",value:function(){var e=this;this.props.dispatch(X.restoreUser({userDetails:this.props.userDetails},this.props.filter,function(){E.notify(B.get("UserRestored"),3e3),e.reload()}))}},{key:"forcePasswordChange",value:function(){var e=this;this.props.dispatch(X.forceChangePassword({userId:this.props.userId},function(){E.notify(B.get("UserPasswordUpdateChanged"),1e4),e.reload()}))}},{key:"updateAuthorizeStatus",value:function(e){var t=this;this.props.dispatch(X.updateAuthorizeStatus({userDetails:this.props.userDetails},e,this.props.filter,function(){E.notify(e?B.get("UserAuthorized"):B.get("UserUnAuthorized"),3e3),t.reload()}))}},{key:"unLockUser",value:function(){var e=this;this.props.dispatch(X.unLockUser({userDetails:this.props.userDetails},function(){E.notify(B.get("UserUnLocked"),3e3),e.reload()}))}},{key:"updateSuperUserStatus",value:function(e){var t=this;this.props.dispatch(X.updateSuperUserStatus({userId:this.props.userId,setSuperUser:e},this.props.filter,function(){t.reload()}))}},{key:"toggleChangePassword",value:function(e){var t=!this.state.ChangePasswordVisible;this.setState({ChangePasswordVisible:t}),e&&this.props.onClose()}},{key:"render",value:function(){var e,t,r=this,n=[{key:"ViewProfile",title:B.get("ViewProfile"),index:10}];return e=this.props.appSettings.applicationSettings.settings,t=this.state.userDetails.userId,e.isHost&&t!==e.userId&&(this.state.userDetails.isSuperUser?this.state.userDetails.isSuperUser&&(n=[{key:"DemoteToRegularUser",title:B.get("DemoteToRegularUser"),index:80}].concat(n)):n=[{key:"PromoteToSuperUser",title:B.get("PromoteToSuperUser"),index:80}].concat(n)),ue(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(n=[{key:"ResetPassword",title:B.get("ResetPassword"),index:40}].concat(n),n=[{key:"ChangePassword",title:B.get("ChangePassword"),index:30}].concat(n),this.state.userDetails.needUpdatePassword||(n=[{key:"ForceChangePassword",title:B.get("ForceChangePassword"),index:40}].concat(n))),function(e,t){return(e.isAdmin||e.permissions.DELETE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(this.state.userDetails.isDeleted?(n=[{key:"RestoreUser",title:B.get("RestoreUser"),index:70}].concat(n),n=[{key:"RemoveUser",title:B.get("RemoveUser"),index:60}].concat(n)):n=[{key:"DeleteUser",title:B.get("DeleteUser"),index:60}].concat(n)),function(e,t){return(e.isAdmin||e.permissions.AUTHORIZE_UNAUTHORIZE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(n=this.state.userDetails.authorized?[{key:"cmdUnAuthorize",title:B.get("cmdUnAuthorize"),index:50}].concat(n):[{key:"cmdAuthorize",title:B.get("cmdAuthorize"),index:50}].concat(n),this.state.userDetails.isLocked&&(n=[{key:"cmdUnLock",title:B.get("cmUnlockUser"),index:100}].concat(n))),n=n.concat(this.props.getUserMenu&&this.props.getUserMenu(this.state.userDetails)||[]),n=this.sort(n,"index"),this.showMenu?c.a.createElement(p.GridCell,{className:"dnn-user-menu menu-popup",ref:function(e){return r.rootElement=e}},!this.state.ChangePasswordVisible&&c.a.createElement(M,null,n.map(function(e,t){return c.a.createElement(W,{key:"menu_item_".concat(t),onMenuAction:r.onItemClick.bind(r,e.key)},e.title)})),this.state.ChangePasswordVisible&&c.a.createElement(se,{onCancel:this.toggleChangePassword.bind(this,!0),userId:this.props.userId})):c.a.createElement("div",null)}}])&&pe(r.prototype,n),o&&pe(r,o),t}();ge.propTypes={dispatch:l.a.func.isRequired,userId:l.a.number.isRequired,onClose:l.a.func.isRequired,userDetails:l.a.object,getUserMenu:l.a.func.isRequired,userMenuAction:l.a.func.isRequired,appSettings:l.a.object,filter:l.a.number};var be=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(ge),ye=[{index:5,size:30},{index:10,size:30},{index:15,size:20},{index:25,size:20}];function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function we(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Se(e){return(Se=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ee(e,t){return(Ee=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ce=function(e){function t(){var e,r,n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(e=!(n=Se(t).call(this))||"object"!==ve(n)&&"function"!=typeof n?xe(r):n).handleClick=e.handleClick.bind(xe(xe(e))),e.rootElement=c.a.createRef(),e.state={opened:!1,showMenu:!1},e}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ee(e,t)}(t,u["Component"]),r=t,(n=[{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleClick),this._isMounted=!0}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleClick),this._isMounted=!1}},{key:"componentWillMount",value:function(){var e=""!==this.props.openId&&this.props.id===this.props.openId;this.setState({opened:e})}},{key:"handleClick",value:function(e){this._isMounted&&"string"==typeof e.target.className&&-1===e.target.className.indexOf("do-not-close")&&"confirmbtn"!==e.target.id&&"cancelbtn"!==e.target.id&&"add"!==this.props.openId&&""!==this.props.openId&&this.props.id===this.props.openId&&this.props.Collapse()}},{key:"toggle",value:function(e){""!==this.props.openId&&this.props.id===this.props.openId&&this.props.currentIndex===e?this.props.Collapse():this.props.OpenCollapse(this.props.id,e)}},{key:"toggleUserMenu",value:function(){var e=!this.state.showMenu;this.setState({showMenu:e})}},{key:"getUserActions",value:function(e,t){var r=this,n=[];n=n.concat(this.props.getUserTabsIcons&&this.props.getUserTabsIcons(e)||[]),ae(this.props.appSettings.applicationSettings.settings)&&(n=n.concat([{index:15,icon:p.SvgIcons.UserIcon,title:B.get("ManageProfile.title")}])),le(this.props.appSettings.applicationSettings.settings)&&(n=n.concat([{index:10,icon:p.SvgIcons.SettingsIcon,title:B.get("ManageSettings.title")}])),ie(this.props.appSettings.applicationSettings.settings,e)&&(n=n.concat([{index:5,icon:p.SvgIcons.ShieldIcon,title:B.get("ManageRoles.title")}]));var o=0,s=R(n,"index","desc").map(function(e){var n=c.a.createElement("div",{key:"user_action_".concat(o),title:e.title,className:"extension-action "+!(t&&r.props.currentIndex===o),dangerouslySetInnerHTML:{__html:e.icon},onClick:r.toggle.bind(r,o)});return o++,n});return[c.a.createElement("div",{key:"user_action_wrapper_".concat(e.userId),style:{position:"relative"}},c.a.createElement("div",{className:"extension-action "+!this.state.showMenu,dangerouslySetInnerHTML:{__html:p.SvgIcons.MoreMenuIcon},onClick:this.toggleUserMenu.bind(this)}),this.state.showMenu&&c.a.createElement(be,{filter:this.props.filter,appSettings:this.props.appSettings,getUserMenu:this.props.getUserMenu&&this.props.getUserMenu.bind(this),userMenuAction:this.props.userMenuAction&&this.props.userMenuAction.bind(this),onClose:this.toggleUserMenu.bind(this),userId:e.userId}))].concat(s)}},{key:"getUserColumns",value:function(e,t,r){var n=this.getUserActions(e,r),o=this.props.getUserColumns&&this.props.getUserColumns(e),s=void 0!==this.props.columnSizes?this.props.columnSizes:ye;return R([{index:5,content:c.a.createElement(p.GridCell,{columnSize:s.find(function(e){return 5===e.index}).size,className:"user-names"+(e.isDeleted?" deleted":"")},c.a.createElement("h6",null,c.a.createElement(p.TextOverflowWrapper,{className:"email-link",text:e.displayName,maxWidth:125})),"-"!==e.displayName&&c.a.createElement("p",null,e.userName))},{index:10,content:c.a.createElement(p.GridCell,{columnSize:s.find(function(e){return 10===e.index}).size,className:"user-emails"+(e.isDeleted?" deleted":"")},c.a.createElement(p.TextOverflowWrapper,{className:"email-link",isAnchor:!0,href:"mailto:"+e.email,text:e.email,maxWidth:125}))},{index:15,content:c.a.createElement(p.GridCell,{columnSize:s.find(function(e){return 15===e.index}).size,className:"user-joined"+(e.isDeleted?" deleted":"")},"-"!==e.createdOnDate&&c.a.createElement("p",null,U(e.createdOnDate)),"-"===e.createdOnDate&&e.createdOnDate)},{index:25,content:"add"!==t&&c.a.createElement(p.GridCell,{columnSize:s.find(function(e){return 25===e.index}).size,style:{float:"right",textAlign:"right",paddingRight:2}},n)}].concat(o||[]),"index").map(function(e){return e.content})}},{key:"render",value:function(){var e=this,t=this.props,r=this.props.user,n=""!==t.openId&&t.id===t.openId,o="userRow-"+Math.random()+Date.now();void 0===r&&(r={avatar:"-",displayName:"-",userName:"-",email:"-",createdOnDate:"-",authorized:"-"});var s=this.getUserColumns(r,t.id,n);return c.a.createElement(p.GridCell,{className:"collapsible-component-users",id:o,ref:function(t){return e.rootElement=t}},c.a.createElement(p.GridCell,{className:"collapsible-header-users "+!n},c.a.createElement(p.GridCell,{className:S.a.extensionDetailRow+" "+t.addIsOpened,columnSize:100},(!t.addIsOpened||"add-opened"===t.addIsOpened)&&c.a.createElement(p.GridCell,null,s),c.a.createElement(p.Collapsible,{accordion:!0,isOpened:n,keepCollapsedContent:!0,className:"user-detail-row"},n&&t.children))))}}])&&we(r.prototype,n),o&&we(r,o),t}();Ce.propTypes={user:l.a.object,OpenCollapse:l.a.func,Collapse:l.a.func,id:l.a.string,openId:l.a.string,currentIndex:l.a.number,getUserTabsIcons:l.a.func,getUserColumns:l.a.func,getUserMenu:l.a.func.isRequired,userMenuAction:l.a.func.isRequired,appSettings:l.a.object,columnSizes:l.a.array,filter:l.a.number},Ce.defaultProps={isEvoq:!1};var Ue=Ce;r(24);function Oe(e){return(Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Re(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _e(e,t){return!t||"object"!==Oe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ke(e){return(ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function De(e,t){return(De=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ie=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),_e(this,ke(t).call(this))}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&De(e,t)}(t,u["Component"]),r=t,(n=[{key:"render",value:function(){var e=this.props;return e.renderIndex>=0&&e.children[e.renderIndex]}}])&&Re(r.prototype,n),o&&Re(r,o),t}();Ie.propTypes={renderIndex:l.a.number,children:l.a.array},Ie.defaultProps={renderIndex:0};var Te=Ie,Pe=r(9),Ne=r.n(Pe);const je="weak",Me="fair",ze="strong",Le=(e,t)=>{if(null==t)return null;let r=Ae(e,t);return e.length<=2?null:r.rating<3?je:r.rating<5?Me:r.rating>=5?ze:void 0},Ae=(e,t)=>{let r=0,n=t.minLength,o=!1,s=!1,i=!1,a=!1,l=!1,u=!1,c=t.minNumberOfSpecialChars||0,d=t.validationExpression||"";if(e.length>0){e.match(/[a-z]/)&&(r++,s=!0),e.match(/[A-Z]/)&&(r++,o=!0),e.match(/[0-9]/g)&&(r++,a=!0);let t=e.match(/[!,@,#,$,%,&,*,(,),\-,_,=,+,\',\",\\,|,\,,<,.,>,;,:,\/,?,\[,{,\],}]/g);t&&t.length>=c&&(r++,i=!0),e.length>=n&&(r++,l=!0),e.length>=n+3&&r++,d&&(u=new RegExp(d,"g").test(e))}return{rating:r,maxRating:5,hasOneUpperCaseChar:o,hasOneLowerCaseChar:s,hasMinNumberOfSpecialChars:i,hasOneNumericChar:a,hasLengthOfNChars:l,matchValidationExpression:u}};r(27);function Fe(e){return(Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ge(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function He(e,t){return!t||"object"!==Fe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function We(e){return(We=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Be(e,t){return(Be=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ve=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),He(this,We(t).call(this,e))}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Be(e,t)}(t,u["Component"]),r=t,(n=[{key:"componentDidMount",value:function(){this.props.loadPasswordStrengthOptions()}},{key:"render",value:function(){return c.a.createElement("div",null,c.a.createElement(p.SingleLineInputWithError,{label:B.get("Password"),error:this.props.error.password,onChange:this.props.onChangePassword,tooltipMessage:B.get("Password.Help"),errorMessage:B.get("Password.Required"),style:this.props.style,inputStyle:this.props.requiresQuestionAndAnswer?{marginBottom:0}:{marginBottom:15},type:"password",autoComplete:"off",value:this.props.UserDetails.password,tabIndex:7}),c.a.createElement("div",{id:"passwordStrengthBar",className:"passwordStrength "+Le(this.props.UserDetails.password,this.props.passwordStrengthOptions)}),c.a.createElement("div",{id:"passwordStrengthLabel",className:"passwordStrengthLabel "+Le(this.props.UserDetails.password,this.props.passwordStrengthOptions)},Le(this.props.UserDetails.password,this.props.passwordStrengthOptions)))}}])&&Ge(r.prototype,n),o&&Ge(r,o),t}();Ve.propTypes={error:l.a.object,style:l.a.object.isRequired,UserDetails:l.a.object.isRequired,requiresQuestionAndAnswer:l.a.bool.isRequired,onChangePassword:l.a.func.isRequired,passwordStrengthOptions:l.a.object,loadPasswordStrengthOptions:l.a.func};var qe=Object(d.connect)(function(e){return{passwordStrengthOptions:e.users.passwordStrengthOptions}},function(e){return{loadPasswordStrengthOptions:function(){e(X.passwordStrength())}}})(Ve);function Ke(e){return(Ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){Je(e,t,r[t])})}return e}function Je(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Xe(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ze(e,t){return!t||"object"!==Ke(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ye(e){return(Ye=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $e(e,t){return($e=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var et={width:"100%"},tt={firstName:"",lastName:"",email:"",userName:"",password:"",question:"",answer:"",randomPassword:!1,authorize:!0,notify:!1},rt=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=Ze(this,Ye(t).call(this,e))).state={UserDetails:Object.assign({},tt),confirmPassword:"",errors:{firstName:!1,lastName:!1,userName:!1,email:!1,password:!1,confirmPassword:!1,passwordsMatch:!1,question:!1,answer:!1}},r.submitted=!1,r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$e(e,t)}(t,u["Component"]),r=t,(n=[{key:"onChangePassword",value:function(e){this.setState({UserDetails:Qe({},this.state.UserDetails,{password:e.target.value}),errors:Qe({},this.state.errors,{password:!1})})}},{key:"onChange",value:function(e,t){var r=this,n=this.state.UserDetails;if("randomPassword"===e||"authorize"===e||"notify"===e)n[e]=t;else if("confirmPassword"===e){var o=this.state.confirmPassword;o=t.target.value,this.setState({confirmPassword:o})}else n[e]=t.target.value;this.setState({},function(){r.validateForm()})}},{key:"save",value:function(){var e=this;this.submitted=!0,this.validateForm()&&this.props.save(X.createUser(this.state.UserDetails,this.props.filter,function(){e.cancel(),E.notify(B.get("UserCreated"),3e3)}))}},{key:"clearForm",value:function(e){var t=this.state.UserDetails;t=Object.assign({},tt);var r=this.state.errors;r.firstName=!1,r.lastName=!1,r.userName=!1,r.email=!1,r.password=!1,r.confirmPassword=!1,r.passwordsMatch=!1,r.question=!1,r.answer=!1,this.submitted=!1,this.setState({UserDetails:t,errors:r,confirmPassword:""},function(){"function"==typeof e&&e()})}},{key:"cancel",value:function(){var e=this;this.clearForm(function(){e.props.onCancel()})}},{key:"validateForm",value:function(){var e=!0,t=this.props.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;if(this.submitted){var r=this.state.UserDetails,n=this.state.errors;n.firstName=!1,n.lastName=!1,n.userName=!1,n.email=!1,n.password=!1,n.confirmPassword=!1,n.passwordsMatch=!1,n.question=!1,n.answer=!1,""===r.firstName&&(n.firstName=!0,e=!1),""===r.lastName&&(n.lastName=!0,e=!1),""===r.userName&&(n.userName=!0,e=!1),""!==r.email&&O(r.email)||(n.email=!0,e=!1),!1===r.randomPassword&&""===r.password&&(n.password=!0,e=!1),!1===r.randomPassword&&""===this.state.confirmPassword?(n.confirmPassword=!0,e=!1):!1===r.randomPassword&&this.state.confirmPassword!==r.password&&(n.passwordsMatch=!0,e=!1),t&&(""===r.question&&(n.question=!0,e=!1),""===r.answer&&(n.answer=!0,e=!1)),this.setState({errors:n})}return e}},{key:"render",value:function(){var e=this.props,t=this.state,r=e.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;return c.a.createElement(p.GridCell,{className:Ne.a.newExtensionModal,style:e.style},c.a.createElement(p.GridCell,{className:"new-user-box"},c.a.createElement(p.GridSystem,{className:"with-right-border top-half"},c.a.createElement("div",null,c.a.createElement(p.SingleLineInputWithError,{value:t.UserDetails.firstName,error:t.errors.firstName,onChange:this.onChange.bind(this,"firstName"),label:B.get("FirstName"),tooltipMessage:B.get("FirstName.Help"),errorMessage:B.get("FirstName.Required"),style:et,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:1}),c.a.createElement(p.SingleLineInputWithError,{value:t.UserDetails.userName,error:t.errors.userName,onChange:this.onChange.bind(this,"userName"),label:B.get("Username"),tooltipMessage:B.get("Username.Help"),errorMessage:B.get("Username.Required"),style:et,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:3}),c.a.createElement(p.Switch,{value:t.UserDetails.authorize,label:B.get("Approved"),title:B.get("Approved.Help"),onChange:this.onChange.bind(this,"authorize"),tabIndex:5,onText:B.get("SwitchOn"),offText:B.get("SwitchOff")})),c.a.createElement("div",null,c.a.createElement(p.SingleLineInputWithError,{value:t.UserDetails.lastName,error:t.errors.lastName,onChange:this.onChange.bind(this,"lastName"),label:B.get("LastName"),tooltipMessage:B.get("LastName.Help"),errorMessage:B.get("LastName.Required"),style:et,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:2}),c.a.createElement(p.SingleLineInputWithError,{value:t.UserDetails.email,error:t.errors.email,onChange:this.onChange.bind(this,"email"),label:B.get("Email"),tooltipMessage:B.get("Email.Help"),errorMessage:B.get("Email.Required"),style:et,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:4}),c.a.createElement(p.Switch,{value:t.UserDetails.randomPassword,title:B.get("Random.Help"),label:B.get("Random")+":",onChange:this.onChange.bind(this,"randomPassword"),tabIndex:6,onText:B.get("SwitchOn"),offText:B.get("SwitchOff")}))),!t.UserDetails.randomPassword&&c.a.createElement(p.GridCell,null,c.a.createElement("hr",null)),!t.UserDetails.randomPassword&&c.a.createElement(p.GridSystem,null,c.a.createElement(qe,{error:t.errors,onChangePassword:this.onChangePassword.bind(this),style:et,inputStyle:r?{marginBottom:0}:{marginBottom:15},UserDetails:this.state.UserDetails}),c.a.createElement(p.SingleLineInputWithError,{label:B.get("Confirm"),error:t.errors.confirmPassword||t.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:B.get("Confirm.Help"),errorMessage:t.errors.confirmPassword?B.get("Confirm.Required"):B.get("ConfirmMismatch.ErrorMessage"),style:et,type:"password",autoComplete:"off",inputStyle:r?{marginBottom:0}:{marginBottom:15},value:t.confirmPassword,tabIndex:8})),r&&c.a.createElement(p.GridSystem,null,c.a.createElement("div",null,c.a.createElement(p.SingleLineInputWithError,{label:B.get("Question"),error:t.errors.question,onChange:this.onChange.bind(this,"question"),tooltipMessage:B.get("Question.Help"),errorMessage:B.get("Question.Required"),style:et,inputStyle:{marginBottom:15},autoComplete:"off",value:t.UserDetails.question,tabIndex:9})),c.a.createElement("div",null,c.a.createElement(p.SingleLineInputWithError,{label:B.get("Answer"),error:t.errors.answer,onChange:this.onChange.bind(this,"answer"),tooltipMessage:B.get("Answer.Help"),errorMessage:B.get("Answer.Required"),style:et,autoComplete:"off",inputStyle:{marginBottom:15},value:t.UserDetails.answer,tabIndex:10}))),c.a.createElement(p.GridCell,{columnSize:100,className:"email-notification-line"},c.a.createElement(p.CheckBox,{value:t.UserDetails.notify,label:B.get("Notify"),onChange:this.onChange.bind(this,"notify"),tabIndex:9})),c.a.createElement(p.GridCell,{columnSize:100,className:"modal-footer"},c.a.createElement(p.Button,{id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this),tabIndex:10},B.get("btnCancel")),c.a.createElement(p.Button,{id:"confirmbtn",type:"primary",onClick:this.save.bind(this),tabIndex:11},B.get("btnSave")))))}}])&&Xe(r.prototype,n),o&&Xe(r,o),t}();rt.propTypes={save:l.a.func.isRequired,onCancel:l.a.func.isRequired,style:l.a.object,filter:l.a.number,appSettings:l.a.object};var nt=Object(d.connect)(function(){},function(e){return{save:function(t){e(t)}}})(rt),ot=r(10),st=r.n(ot);function it(e){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function at(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function lt(e,t){return!t||"object"!==it(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ut(e){return(ut=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ct(e,t){return(ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var dt={width:"100%"},pt={userId:0,displayName:"",userName:"",email:""},ft=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=lt(this,ut(t).call(this,e))).state={accountSettings:Object.assign(pt),userDetails:e.userDetails,errors:{displayName:!1,userName:!1,loading:!1,email:!1},ChangePasswordVisible:!1},r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ct(e,t)}(t,u["Component"]),r=t,(n=[{key:"componentWillMount",value:function(){var e=this.props;void 0===e.userDetails||e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}},{key:"componentWillReceiveProps",value:function(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}},{key:"makeBlankObj",value:function(e){var t=Object.assign({},e);return Object.keys(t).forEach(function(e){return t[e]=""}),t}},{key:"getUserDetails",value:function(e,t){var r=this,n=this.makeBlankObj(this.state.accountSettings),o=this.makeBlankObj(this.state.userDetails);this.setState({accountSettings:n,userDetails:o,loading:!0}),e.dispatch(X.getUserDetails({userId:t},function(e){r.updateUserDetailsState(e)}))}},{key:"updateUserDetailsState",value:function(e){var t=Object.assign({},e),r=this.state.accountSettings;r.displayName=t.displayName,r.userName=t.userName,r.email=t.email,r.userId=t.userId,this.setState({accountSettings:r,userDetails:t,loading:!1})}},{key:"onChange",value:function(e,t){var r=this;if(!this.state.loading){var n=this.state.accountSettings;n[e]=t.target.value,this.setState({accountSettings:n},function(){r.validateForm(!0)})}}},{key:"save",value:function(){var e=this;this.validateForm()&&this.props.dispatch(X.updateUserBasicInfo(this.state.accountSettings,function(){E.notify(B.get("UserUpdated"),3e3),e.getUserDetails(e.props,e.state.accountSettings.userId),e.props.collapse()}))}},{key:"validateForm",value:function(){var e=!0,t=this.state.errors;t.displayName=!1,t.userName=!1,t.email=!1;var r=this.state.accountSettings;return""===r.displayName&&(t.displayName=!0,e=!1),""===r.userName&&(t.userName=!0,e=!1),""!==r.email&&O(r.email)||(t.email=!0,e=!1),this.setState({errors:t}),e}},{key:"onCancelPassword",value:function(){this.setState({ChangePasswordVisible:!1})}},{key:"onChangePassword",value:function(){this.state.loading||this.setState({ChangePasswordVisible:!0})}},{key:"onForcePasswordChange",value:function(){var e=this;this.state.loading||this.props.dispatch(X.forceChangePassword({userId:this.props.userId},function(){E.notify(B.get("UserPasswordUpdateChanged"),3e3);var t=e.state.userDetails;t.needUpdatePassword=!0,e.setState({userDetails:t})}))}},{key:"onSendPasswordLink",value:function(){this.state.loading||this.props.dispatch(X.sendPasswordResetLink({userId:this.props.userId},function(){E.notify(B.get("PasswordSent"),3e3)}))}},{key:"stringifyBoolean",value:function(e){return""===e?"":e?B.get("True"):B.get("False")}},{key:"render",value:function(){var e=this.state;return c.a.createElement(p.GridCell,{className:st.a.userSettings},c.a.createElement(p.GridCell,null,c.a.createElement(p.GridCell,{className:"outer-box",columnSize:50},c.a.createElement(se,{visible:this.state.ChangePasswordVisible,onCancel:this.onCancelPassword.bind(this),userId:this.props.userId}),c.a.createElement("div",{className:"title"},B.get("AccountSettings")),c.a.createElement("div",{className:this.state.loading?"isloading":""},c.a.createElement(p.SingleLineInputWithError,{value:e.accountSettings.userName,error:e.errors.userName,onChange:this.onChange.bind(this,"userName"),label:B.get("Username"),tooltipMessage:B.get("Username.Help"),errorMessage:B.get("Username.Required"),style:dt,autoComplete:"off",enabled:ce(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),c.a.createElement(p.SingleLineInputWithError,{value:e.accountSettings.displayName,error:e.errors.displayName,onChange:this.onChange.bind(this,"displayName"),label:B.get("DisplayName"),tooltipMessage:B.get("DisplayName.Help"),errorMessage:B.get("DisplayName.Required"),style:dt,autoComplete:"off",enabled:ce(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),c.a.createElement(p.SingleLineInputWithError,{value:e.accountSettings.email,error:e.errors.email,onChange:this.onChange.bind(this,"email"),label:B.get("Email"),tooltipMessage:B.get("Email.Help"),errorMessage:B.get("Email.Required"),style:dt,autoComplete:"off",enabled:ce(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}})),ue(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&c.a.createElement(p.GridCell,{className:"no-padding"},c.a.createElement("div",{className:"title"},B.get("PasswordManagement")),c.a.createElement(p.GridCell,{className:"link"+(this.state.loading?" disabled":"")},c.a.createElement("div",{onClick:this.onChangePassword.bind(this)},"[ ",B.get("ChangePassword")," ]")),!e.userDetails.needUpdatePassword&&c.a.createElement(p.GridCell,{className:"link"+(this.state.loading?" disabled":"")},c.a.createElement("div",{onClick:this.onForcePasswordChange.bind(this)},"[ ",B.get("ForceChangePassword")," ]")),c.a.createElement(p.GridCell,{className:"link"+(this.state.loading?" disabled":"")},c.a.createElement("div",{onClick:this.onSendPasswordLink.bind(this)},"[ ",B.get("ResetPassword")," ]")))),c.a.createElement(p.GridCell,{className:"outer-box right",columnSize:50},c.a.createElement("div",{className:"title"},B.get("AccountData")),c.a.createElement(p.GridSystem,{className:"first"},c.a.createElement(p.GridCell,{title:B.get("CreatedDate.Help")},B.get("CreatedDate")),c.a.createElement(p.GridCell,null,U(e.userDetails.createdOnDate,!0))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("LastLoginDate.Help")},B.get("LastLoginDate")),c.a.createElement(p.GridCell,null,U(e.userDetails.lastLogin,!0))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("LastActivityDate.Help")},B.get("LastActivityDate")),c.a.createElement(p.GridCell,null,U(e.userDetails.lastActivity,!0))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("LastPasswordChangeDate.Help")},B.get("LastPasswordChangeDate")),c.a.createElement(p.GridCell,null,U(e.userDetails.lastPasswordChange,!0))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("LastLockoutDate.Help")},B.get("LastLockoutDate")),c.a.createElement(p.GridCell,null,"-"===U(e.userDetails.lastLockout,!0)?B.get("Never"):U(e.userDetails.lastLockout,!0))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("IsOnLine.Help")},B.get("IsOnLine")),c.a.createElement(p.GridCell,null,this.stringifyBoolean(e.userDetails.isOnline))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("LockedOut.Help")},B.get("LockedOut")),c.a.createElement(p.GridCell,null,this.stringifyBoolean(e.userDetails.isLocked))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("Approved.Help")},B.get("Approved")),c.a.createElement(p.GridCell,null,this.stringifyBoolean(e.userDetails.authorized))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("UpdatePassword.Help")},B.get("UpdatePassword")),c.a.createElement(p.GridCell,null,this.stringifyBoolean(e.userDetails.needUpdatePassword))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("IsDeleted.Help")},B.get("IsDeleted")),c.a.createElement(p.GridCell,null,this.stringifyBoolean(e.userDetails.isDeleted))),c.a.createElement(p.GridSystem,null,c.a.createElement(p.GridCell,{title:B.get("UserFolder.Help")},B.get("UserFolder")),c.a.createElement(p.GridCell,null,e.userDetails.userFolder)))),ce(this.props.appSettings.applicationSettings.settings)&&c.a.createElement(p.GridCell,{className:"buttons"},c.a.createElement(p.GridCell,{columnSize:50,className:"leftBtn"},c.a.createElement(p.Button,{id:"cancelbtn",type:"secondary",onClick:this.props.collapse.bind(this)},B.get("btnCancel"))),c.a.createElement(p.GridCell,{columnSize:50,className:"rightBtn"},c.a.createElement(p.Button,{id:"confirmbtn",disabled:this.state.loading,type:"primary",onClick:this.save.bind(this)},B.get("btnSave")))))}}])&&at(r.prototype,n),o&&at(r,o),t}();ft.propTypes={dispatch:l.a.func.isRequired,userId:l.a.array.isRequired,collapse:l.a.func.isRequired,userDetails:l.a.object,appSettings:l.a.object};var ht=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(ft);r(30);function mt(e){return(mt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function bt(e,t){return!t||"object"!==mt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function yt(e){return(yt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function vt(e,t){return(vt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var wt=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=bt(this,yt(t).call(this,e))).state={userDetails:e.userDetails},r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vt(e,t)}(t,u["Component"]),r=t,(n=[{key:"componentWillMount",value:function(){var e=this.props;void 0!==e.userDetails&&e.userDetails.userId===e.userId||this.getUserDetails(e)}},{key:"componentWillReceiveProps",value:function(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId&&this.getUserDetails(e)}},{key:"getUserDetails",value:function(e){var t=this;e.dispatch(X.getUserDetails({userId:e.userId},function(e){var r=Object.assign({},e);t.setState({userDetails:r})}))}},{key:"render",value:function(){return void 0!==this.state.userDetails&&void 0!==this.state.userDetails.editProfileUrl&&c.a.createElement("iframe",{className:"edit-profile",seamless:!0,src:this.state.userDetails.editProfileUrl})}}])&&gt(r.prototype,n),o&&gt(r,o),t}();wt.propTypes={userDetails:l.a.object,userId:l.a.number};var St=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(wt),Et=r(11);r(32);function xt(e){return(xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ct(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Ut(e,t){return!t||"object"!==xt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ot(e){return(Ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Rt(e,t){return(Rt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var _t=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=Ut(this,Ot(t).call(this))).state={editIndex:-1,editCommand:"",isCalendarVisible:!1},e}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rt(e,t)}(t,u["Component"]),r=t,(n=[{key:"onStartTimeClick",value:function(e,t){this.setState({editIndex:t,editCommand:"startTime",isCalendarVisible:!0})}},{key:"onExpiresTimeClick",value:function(e,t){this.setState({editIndex:t,editCommand:"expiresTime",isCalendarVisible:!0})}},{key:"onDeleteClick",value:function(e){var t=this.props;E.confirm(function(){var e=arguments[0],t=arguments;return e.replace(/{(\d+)}/gi,function(e,r){var n=parseInt(r)+1;return t[n]})}(B.get("DeleteRole.Confirm"),e.roleName,e.displayName),B.get("Delete"),B.get("Cancel"),function(){t.dispatch(X.removeUserRole(e))})}},{key:"isEmptyDate",value:function(e){return!e||new Date(e).getFullYear()<1970}},{key:"onChange",value:function(e,t,r){var n=this.state;n.editIndex=-1,n.editCommand="";var o="startTime"===t?r:e.startTime,s="expiresTime"===t?r:e.expiresTime;this.props.saveRole(e.roleId,o,s),this.setState({isCalendarVisible:!1})}},{key:"getBoundDate",value:function(e,t){if("startTime"===t){var r=new Date(2049,11,31);return this.isEmptyDate(e.expiresTime)||(r=new Date((new Date).setTime(new Date(e.expiresTime).getTime()-864e5))),r}if("expiresTime"===t){var n=new Date(1970,0,1);return this.isEmptyDate(e.startTime)||(n=new Date((new Date).setTime(new Date(e.startTime).getTime()+864e5))),n}}},{key:"getDate",value:function(e,t){var r=new Date;return"startTime"===t?this.isEmptyDate(e.startTime)||(r=new Date(e.startTime)):"expiresTime"===t&&(this.isEmptyDate(e.expiresTime)||(r=new Date(e.expiresTime))),r}},{key:"createRoleActions",value:function(){var e=this.props,t=this.state,r=e.roleDetails.allowExpired?c.a.createElement("span",null,c.a.createElement(p.DatePicker,{date:this.getDate(e.roleDetails,"startTime"),maxDate:this.getBoundDate(e.roleDetails,"startTime"),updateDate:this.onChange.bind(this,e.roleDetails,"startTime"),mode:"start",applyButtonText:B.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onStartTimeClick.bind(this,e.roleDetails,e.index)})):null,n=e.roleDetails.allowExpired?c.a.createElement("span",null,c.a.createElement(p.DatePicker,{date:this.getDate(e.roleDetails,"expiresTime"),minDate:this.getBoundDate(e.roleDetails,"expiresTime"),updateDate:this.onChange.bind(this,e.roleDetails,"expiresTime"),mode:"end",applyButtonText:B.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onExpiresTimeClick.bind(this,e.roleDetails,e.index)})):null,o=e.roleDetails.allowDelete?c.a.createElement("a",{className:"extension-action",dangerouslySetInnerHTML:{__html:p.SvgIcons.XIcon},onClick:this.onDeleteClick.bind(this,e.roleDetails,e.index)}):null;return c.a.createElement("div",{className:t.editIndex===e.index?"edit-row":null},r,n,o)}},{key:"render",value:function(){var e=this.props;return c.a.createElement("div",{className:"user-role-row"},c.a.createElement(p.GridCell,{title:e.roleDetails.roleName,columnSize:25},e.roleDetails.roleName),c.a.createElement(p.GridCell,{columnSize:20,title:U(e.roleDetails.startTime)},U(e.roleDetails.startTime)),c.a.createElement(p.GridCell,{columnSize:20,title:U(e.roleDetails.expiresTime)},U(e.roleDetails.expiresTime)),c.a.createElement(p.GridCell,{columnSize:35},c.a.createElement("div",{className:"actions"},this.createRoleActions())))}}])&&Ct(r.prototype,n),o&&Ct(r,o),t}();_t.propTypes={dispatch:l.a.func.isRequired,roleDetails:l.a.object.isRequired,index:l.a.number,saveRole:l.a.func.isRequired,deleteRole:l.a.func.isRequired};var kt=Object(d.connect)(function(){return{}})(_t);r(34);function Dt(e){return(Dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function It(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Tt(e,t){return!t||"object"!==Dt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Pt(e){return(Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Nt(e,t){return(Nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var jt=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=Tt(this,Pt(t).call(this,e))).state={roleSelectState:{userId:-1,keyword:""},currentPage:0,pageSize:10,roleKeyword:"",sendEmail:!0,isOwner:!1,allowOwner:!1},r.comboBoxDom=null,r.debounceGetSuggestRoles=Object(Et.debounce)(500,r.debounceGetSuggestRoles),r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Nt(e,t)}(t,u["Component"]),r=t,(n=[{key:"componentWillReceiveProps",value:function(e){this.setState(e)}},{key:"componentWillMount",value:function(){this.getRoles()}},{key:"getRoles",value:function(){var e=this.props,t=this.state,r={userId:e.userDetails.userId,keyword:t.roleKeyword,pageIndex:t.currentPage,pageSize:t.pageSize};e.dispatch(X.getUserRoles(r))}},{key:"getSuggestRoles",value:function(){var e=this.props,t=this.state,r=t.roleSelectState.roleId>=0?"":t.roleSelectState.keyword;e.dispatch(X.getSuggestRoles({keyword:r,count:10}))}},{key:"debounceGetSuggestRoles",value:function(){this.getSuggestRoles()}},{key:"onRoleSelectorChanged",value:function(e){e.roleId||e.roleName||(this.setState({roleSelectState:{roleId:-1,keyword:e}}),this.debounceGetSuggestRoles())}},{key:"onRoleSelectorSelected",value:function(e){var t=this;this.onRoleSelected(e.roleId,function(){t.setState({roleSelectState:{roleId:e.roleId,keyword:e.roleName}},function(){t.getSuggestRoles()})})}},{key:"onRoleSelectorToggle",value:function(){}},{key:"onAddRole",value:function(){var e=this.state.roleSelectState.roleId;-1!==e&&void 0!==e&&(this.saveRole(e),this.setState({roleSelectState:{roleId:-1,keyword:""}}))}},{key:"saveRole",value:function(e,t,r){var n=this.props,o={roleId:e,userId:n.userDetails.userId,startTime:t,expiresTime:r};n.dispatch(X.saveUserRole(o,this.state.sendEmail,this.state.isOwner)),this.setState({sendEmail:!0,isOwner:!1,allowOwner:!1})}},{key:"onPageChanged",value:function(e,t){var r=this.state;void 0!==t&&r.pageSize!==t&&(r.pageSize=t),r.currentPage=e,this.setState({state:r}),this.getRoles()}},{key:"getRoleRows",value:function(){var e=this,t=this.props.userRoles,r=t.map(function(t,r){return c.a.createElement(kt,{roleDetails:t,index:r,key:"role_row_".concat(r),saveRole:e.saveRole.bind(e)})});return c.a.createElement("div",{className:"user-role-body"},t.length>0?r:c.a.createElement("div",{className:"no-roles-row"},B.get("NoRoles")))}},{key:"onRoleSelected",value:function(e,t){if(void 0!==this.props.matchedRoles&&this.props.matchedRoles.length>0&&this.props.matchedRoles.some(function(t){return t.roleId===e})){var r=this.props.matchedRoles.filter(function(t){return t.roleId===e})[0];this.setState({allowOwner:r.allowOwner},function(){"function"==typeof t&&t()})}}},{key:"onSendEmailClick",value:function(e){this.setState({sendEmail:e})}},{key:"onIsOwnerClick",value:function(e){this.setState({isOwner:e})}},{key:"renderHeader",value:function(){var e=[{name:"Role",width:25},{name:"Start",width:20},{name:"Expires",width:20},{name:"",width:35}].map(function(e,t){return c.a.createElement(p.GridCell,{key:"grid_cell_".concat(t),columnSize:e.width,style:{fontWeight:"bolder"}},""!==e.name?c.a.createElement("span",null,B.get(e.name+".Header")):c.a.createElement("div",null))});return c.a.createElement("div",{className:"user-role-header-row"},e)}},{key:"renderPaging",value:function(){if(this.props.totalRecords>0)return c.a.createElement(p.Pager,{showStartEndButtons:!1,showPageSizeOptions:!1,numericCounters:0,summaryText:B.get("rolesSummaryText"),pageInfoText:B.get("rolesPageInfoText"),showPageInfo:!0,pageSize:this.state.pageSize,totalRecords:this.props.totalRecords,onPageChanged:this.onPageChanged.bind(this),culture:E.getCulture()})}},{key:"render",value:function(){var e=this,t=this.state;return c.a.createElement("div",{className:"userroles-form-form"},c.a.createElement("div",{className:"header"},c.a.createElement("div",{className:"header-title"},B.get("Roles.Title")),c.a.createElement("div",{className:"add-box"},c.a.createElement(p.GridCell,{columnSize:30},c.a.createElement("div",{className:"send-email-box"},c.a.createElement(p.CheckBox,{value:this.state.sendEmail,onChange:this.onSendEmailClick.bind(this),label:B.get("SendEmail"),labelPlace:"right"}),this.state.allowOwner&&c.a.createElement(p.CheckBox,{value:this.state.isOwner,onChange:this.onIsOwnerClick.bind(this),label:B.get("IsOwner"),labelPlace:"right"}))),c.a.createElement(p.GridCell,{columnSize:70},c.a.createElement("span",null,c.a.createElement(p.Combobox,{suggest:!1,ref:function(t){e.comboBoxDom=t},placeholder:B.get("AddRolePlaceHolder"),open:this.props.matchedRoles&&this.props.matchedRoles.length>0,onToggle:this.onRoleSelectorToggle.bind(this),onChange:this.onRoleSelectorChanged.bind(this),onSelect:this.onRoleSelectorSelected.bind(this),data:this.props.matchedRoles,value:t.roleSelectState.keyword,valueField:"roleId",textField:"roleName"}),c.a.createElement("div",{className:"add-role-button",onClick:this.onAddRole.bind(this)},c.a.createElement("div",{className:"extension-action",title:B.get("Add"),dangerouslySetInnerHTML:{__html:p.SvgIcons.AddIcon}}),B.get("Add")))))),c.a.createElement("div",{className:"user-roles-list"},this.renderHeader(),this.getRoleRows()),c.a.createElement("div",{className:"user-roles-list-paging"},this.renderPaging()))}}])&&It(r.prototype,n),o&&It(r,o),t}();jt.propTypes={dispatch:l.a.func.isRequired,userDetails:l.a.object.isRequired,userRoles:l.a.array.isRequired,totalRecords:l.a.number,matchedRoles:l.a.array},jt.defaultProps={matchedRoles:[]};var Mt=Object(d.connect)(function(e){return{matchedRoles:e.users.matchedRoles,userRoles:e.users.userRoles,totalRecords:e.users.userRolesCount}})(jt),zt=r(12),Lt=r.n(zt);function At(e){return(At="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ft(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Gt(e,t){return!t||"object"!==At(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ht(e){return(Ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Wt(e,t){return(Wt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Bt=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=Gt(this,Ht(t).call(this))).state={openId:"",renderIndex:-1},e}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Wt(e,t)}(t,u["Component"]),r=t,(n=[{key:"componentWillReceiveProps",value:function(){this.collapse()}},{key:"uncollapse",value:function(e,t){var r=this;setTimeout(function(){r.setState({openId:e,renderIndex:t})})}},{key:"collapse",value:function(){""!==this.state.openId&&this.setState({openId:"",renderIndex:-1})}},{key:"toggle",value:function(e,t){""!==e?this.uncollapse(e,t):this.collapse()}},{key:"onAddUser",value:function(){this.toggle("add"===this.state.openId?"":"add",0)}},{key:"getChildren",value:function(e){var t=[];if(t=t.concat(this.props.getUserTabs&&this.props.getUserTabs(e)||[]),le(this.props.appSettings.applicationSettings.settings)){var r=c.a.createElement(ht,{userId:e.userId,collapse:this.collapse.bind(this),appSettings:this.props.appSettings});t=t.concat([{index:10,content:r}])}return ie(this.props.appSettings.applicationSettings.settings,e)&&(t=t.concat([{index:5,content:c.a.createElement(Mt,{userDetails:e})}])),ae(this.props.appSettings.applicationSettings.settings)&&(t=t.concat([{index:15,content:c.a.createElement(St,{userId:e.userId})}])),R(t,"index","desc").map(function(e){return e.content})}},{key:"getHeaders",value:function(){var e=void 0!==this.props.columnSizes?this.props.columnSizes:ye,t=[{index:5,size:e.find(function(e){return 5===e.index}).size,header:B.get("Name.Header")},{index:10,size:e.find(function(e){return 10===e.index}).size,header:B.get("Email.Header")},{index:15,size:e.find(function(e){return 15===e.index}).size,header:B.get("Created.Header")},{index:25,size:e.find(function(e){return 25===e.index}).size,header:""}];if(void 0!==this.props.getUserColumns&&"function"==typeof this.props.getUserColumns){var r=this.props.getUserColumns();void 0!==r&&r.length>0&&(t=R(r.map(function(t){return{index:t.index,header:t.header,size:e.find(function(e){return e.index===t.index}).size}}).concat(t),"index"))}return t}},{key:"render",value:function(){var e,t=this,r=this.props,n=0,o="add"===this.state.openId&&((e=this.props.appSettings.applicationSettings.settings).isAdmin||e.permissions.ADD_USER),s=this.getHeaders();return c.a.createElement(p.GridCell,{className:Lt.a.usersList},c.a.createElement(v,{headers:s}),c.a.createElement(Ue,{Collapse:this.collapse.bind(this),OpenCollapse:this.toggle.bind(this),currentIndex:this.state.renderIndex,openId:this.state.openId,key:"user-add",appSettings:r.appSettings,columnSizes:r.columnSizes,id:"add",addIsOpened:o?"add-opened":"closed",filter:r.filter},c.a.createElement(Te,null,[c.a.createElement(nt,{key:"create-user-box-".concat(n),filter:r.filter,onCancel:t.collapse.bind(t),appSettings:r.appSettings})])),r.users&&r.users.length>0&&r.users.map(function(e,o){var s="row-"+n++,i=t.getChildren(e);return c.a.createElement(Ue,{user:e,Collapse:t.collapse.bind(t),OpenCollapse:t.toggle.bind(t),currentIndex:t.state.renderIndex,openId:t.state.openId,key:"user-"+o,getUserColumns:r.getUserColumns&&r.getUserColumns.bind(t),getUserTabsIcons:r.getUserTabsIcons&&r.getUserTabsIcons.bind(t),getUserMenu:r.getUserMenu&&r.getUserMenu.bind(t),userMenuAction:r.userMenuAction&&r.userMenuAction.bind(t),appSettings:r.appSettings,columnSizes:r.columnSizes,id:s,filter:r.filter},c.a.createElement(Te,{renderIndex:t.state.renderIndex},i))}),r.users&&0===r.users.length&&c.a.createElement(p.GridCell,{className:"no-users"},B.get("noUsers")))}}])&&Ft(r.prototype,n),o&&Ft(r,o),t}();Bt.propTypes={dispatch:l.a.func.isRequired,getUserTabs:l.a.func,getUserTabsIcons:l.a.func,getUserColumns:l.a.func,getUserMenu:l.a.func,userMenuAction:l.a.func,appSettings:l.a.object,columnSizes:l.a.array,filter:l.a.number};var Vt=Object(d.connect)(function(e){return{users:e.users.users}},null,null,{withRef:!0})(Bt);r(37);function qt(e){return(qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Kt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function Qt(e,t){return!t||"object"!==qt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Jt(e){return(Jt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xt(e,t){return(Xt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Zt=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=Qt(this,Jt(t).call(this,e))).state={selectedUserFilter:{label:B.get("Authorized"),value:0},searchText:""},r}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xt(e,t)}(t,u["Component"]),r=t,(n=[{key:"onSelect",value:function(e){var t=this,r=e.label,n=e.value,o=this.state.selectedUserFilter;n!==o.value&&(o.label=r,o.value=n,0===o.value||5===o.value?this.setState({selectedUserFilter:{label:"",value:-1},searchText:""},function(){t.setState({selectedUserFilter:o,searchText:""},function(){t.props.onChange(e,t.state.searchText)})}):this.setState({selectedUserFilter:o,searchText:""},function(){t.props.onChange(e,t.state.searchText)}))}},{key:"onKeywordChanged",value:function(e){var t=this;this.setState({searchText:e},function(){t.props.onChange(t.state.selectedUserFilter,e)})}},{key:"BuildUserFiltersOptions",value:function(){return this.props.userFilters.map(function(e){return{label:e.Key,value:e.Value}})}},{key:"render",value:function(){var e=this.BuildUserFiltersOptions();return c.a.createElement("div",{className:"users-filter-container"},c.a.createElement(p.GridCell,{columnSize:35},null!=this.userFiltersOptions&&this.userFiltersOptions.length>0&&c.a.createElement("div",{className:"user-filters-filter"},c.a.createElement(p.Dropdown,{style:{width:"100%"},withBorder:!1,options:e,label:this.state.selectedUserFilter.label,onSelect:this.onSelect.bind(this),prependWith:B.get("ShowLabel")}),c.a.createElement("div",{className:"clear"}))),c.a.createElement(p.GridCell,{columnSize:30},c.a.createElement("div",null,"  ")),c.a.createElement(p.GridCell,{columnSize:35},c.a.createElement("div",{className:"search-filter"},(0===this.state.selectedUserFilter.value||5===this.state.selectedUserFilter.value)&&c.a.createElement(p.SearchBox,{placeholder:B.get("SearchPlaceHolder"),onSearch:this.onKeywordChanged.bind(this),maxLength:50,iconStyle:{right:0}}),c.a.createElement("div",{className:"clear"}))))}}])&&Kt(r.prototype,n),o&&Kt(r,o),t}();Zt.propTypes={dispatch:l.a.func.isRequired,onChange:l.a.func.isRequired,userFilters:l.a.array.isRequired};var Yt=Zt;function $t(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var er=[{condition:V.RETRIEVED_USERS,functionToRun:function(e,t){return{users:t.payload.Results,totalUsers:t.payload.TotalResults}}},{condition:V.UPDATE_USER,functionToRun:function(e,t){return{users:_(e.users,t.payload)}}},{condition:V.CREATE_USER,functionToRun:function(e,t){var r=Object.assign(e.totalUsers);if(0===t.filter&&t.payload.authorized||1===t.filter||5===t.filter)return{users:_(e.users,t.payload),totalUsers:r+1}}},{condition:V.DELETE_USER,functionToRun:function(e,t){var r=Object.assign(e.totalUsers);return 3===t.filter||5===t.filter?{users:_(e.users,t.payload)}:{users:k(e.users,t.payload.userId),totalUsers:r-1}}},{condition:V.RESTORE_USER,functionToRun:function(e,t){var r=Object.assign(e.totalUsers);return 3===t.filter||5===t.filter?{users:_(e.users,t.payload)}:{users:k(e.users,t.payload.userId),totalUsers:r-1}}},{condition:V.USER_MADE_SUPERUSER,functionToRun:function(e,t){var r,n,o,s,i,a,l=Object.assign(e.totalUsers);return 3===t.filter?{users:k(e.users,t.payload.userId),totalUsers:l-1}:{users:(r=e.users,n=t.payload.userId,o=null,s=null,i=t.payload.setSuperUser,a=Object.assign([],E.getObjectCopy(r)),a.some(function(e){return e.userId===n})&&(a=a.filter(function(e){return e.userId===n&&(null!=o&&(e.isDeleted=o),null!=s&&(e.authorized=s),null!=i&&(e.isSuperUser=i)),!0})),a),totalUsers:l}}},{condition:V.ERASE_USER,functionToRun:function(e,t){var r=Object.assign(e.totalUsers);return{users:k(e.users,t.payload.userId),totalUsers:r-1}}},{condition:V.RETRIEVED_USER_DETAILS,functionToRun:function(e,t){return{userDetails:t.payload}}},{condition:V.RETRIEVED_USERS_ROLES,functionToRun:function(e,t){return{userRoles:t.payload.UserRoles,userRolesCount:t.payload.TotalRecords}}},{condition:V.RETRIEVED_SUGGEST_ROLES,functionToRun:function(e,t){return{matchedRoles:t.payload.matchedRoles}}},{condition:V.SAVE_USER_ROLE,functionToRun:function(e,t){return{userRoles:function(e,t){var r=Object.assign([],E.getObjectCopy(e)),n=Object.assign({},E.getObjectCopy(t));if(r.some(function(e){return e.roleId===n.roleId})&&(r=r.filter(function(e){return e.roleId!==n.roleId})),!r.some(function(e){return e.roleId===n.roleId}))return r=(r=[n].concat(r)).sort(function(e,t){var r=e.roleId,n=t.roleId;return r<n?-1:r>n?1:0})}(e.userRoles,t.payload)}}},{condition:V.UPDATE_USER_AUTHORIZE_STATUS,functionToRun:function(e,t){var r=Object.assign(e.totalUsers);return 2===t.filter||3===t.filter||5===t.filter?{users:_(e.users,t.payload)}:{users:k(e.users,t.payload.userId),totalUsers:r-1}}},{condition:V.USER_UNLOCKED,functionToRun:function(e,t){return{users:_(e.users,t.payload)}}},{condition:V.REMOVE_USER_ROLE,functionToRun:function(e,t){return{userRoles:(r=e.userRoles,n=t.payload.roleId,o=Object.assign([],E.getObjectCopy(r)),o.some(function(e){return e.roleId===n})&&(o=o.filter(function(e){return e.roleId!==n})),o)};var r,n,o}},{condition:V.RETRIEVED_PASSWORD_STRENGTH_OPTIONS,functionToRun:function(e,t){return{passwordStrengthOptions:t.payload}}}];function tr(e,t){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.assign({users:[],totalUsers:0,userFilters:[],userRoles:[],matchedRoles:[],userRolesCount:0,userDetails:{},passwordStrengthOptions:{}},e),n=arguments.length>1?arguments[1]:void 0,o=function(e,t){var r=e;return"[object Array]"===Object.prototype.toString.call(t)&&t.forEach(function(e){var t=!1,n=0;r.forEach(function(r,o){e.condition===r.condition&&(t=!0,n=o)}),t?r[n]=e:r.push(e)}),r}(er,t),s=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){$t(e,t,r[t])})}return e}({},r);return o.forEach(function(e){if(e.condition===n.type){var t=e.functionToRun(r,n);s=Object.assign(s,t)}}),s}}window.dnn||(window.dnn={}),window.dnn.Users||(window.dnn.Users={}),window.dnn.Users.CommonActionTypes=n,window.dnn.Users.CommonComponents=s,window.dnn.Users.CommonReducers=i,window.dnn.Users.CommonActions=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,