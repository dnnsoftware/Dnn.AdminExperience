!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="http://localhost:8050/dist/",n(n.s=125)}([function(e,t){e.exports=window.dnn.nodeModules.React},function(e,t,n){e.exports=n(56)()},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.GridCell},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t){e.exports=window.dnn.nodeModules.ReactRedux},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.GridSystem},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.SingleLineInputWithError},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,u=0,c=[],d=n(60);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(v(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(v(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,n);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var i=u++;n=l||(l=g(t)),r=E.bind(null,n,i,!1),o=E.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&p(f(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var b,w=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function E(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Button},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.SvgIcons},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=r,e.exports=t.default},function(e,t){e.exports=window.dnn.nodeModules.ReactDOM},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Checkbox},function(e,t,n){"use strict";t.__esModule=!0,t.message=t.accessor=t.disabled=t.dateFormat=t.numberFormat=void 0;var r=s(n(1)),o=s(n(80));t.elementType=o.default;var a=s(n(30)),i=n(83);function s(e){return e&&e.__esModule?e:{default:e}}var l=(0,a.default)(function(){return i.number.propType.apply(i.number,arguments)});t.numberFormat=l;var u=(0,a.default)(function(){return i.date.propType.apply(i.date,arguments)});t.dateFormat=u;var c=(0,a.default)(function(){return r.default.bool.apply(r.default,arguments)});t.disabled=c,c.acceptsArray=r.default.oneOfType([c,r.default.array]);var d=r.default.oneOfType([r.default.string,r.default.func]);t.accessor=d;var p=r.default.oneOfType([r.default.node,r.default.string,r.default.func]);t.message=p},function(e,t,n){"use strict";t.__esModule=!0,t.isShallowEqual=function(e,t){if(e===t)return!0;if(e instanceof Date&&t instanceof Date)return+e==+t;if("object"!=typeof e&&"object"!=typeof t)return e===t;if(typeof e!=typeof t)return!1;if(null==e||null==t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0;a<n.length;a++)if(!o(t,n[a])||e[n[a]]!==t[n[a]])return!1;return!0},t.chunk=function(e,t){var n=0,r=e?e.length:0,o=[];t=Math.max(+t||1,1);for(;n<r;)o.push(e.slice(n,n+=t));return o},t.groupBySortedKeys=function(e,t,n){var r="function"==typeof e?e:function(t){return t[e]};return n=n||[],t.reduce(function(e,t){var a=r(t);return o(e,a)?e[a].push(t):(n.push(a),e[a]=[t]),e},{})},t.has=t.makeArray=void 0;var r;(r=n(84))&&r.__esModule;t.makeArray=function(e){return null==e?[]:[].concat(e)};var o=function(e,t){return!!e&&Object.prototype.hasOwnProperty.call(e,t)};t.has=o},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t){var n={componentWillMount:!0,componentDidMount:!0,componentWillReceiveProps:!0,getSnapshotBeforeUpdate:!0,shouldComponentUpdate:!0,componentWillUpdate:!0,componentDidUpdate:!0,componentWillUnmount:!0},r={getDerivedStateFromProps:!0};function o(e,t,n){var r=!0;return Array.isArray(t)&&(r="after"!==t[0],t=t[1]),e?function(){var o=n?null:this;r&&t.apply(o,arguments),e.apply(o,arguments),!r&&t.apply(o,arguments)}:t}e.exports=function(e,t){var a=Object.create(null);for(var i in t)r[i]&&(e.constructor[i]=o(a[i]=e.constructor[i],t[i],!0));for(var i in t)n[i]&&(e[i]=o(a[i]=e[i],t[i]));return function(t){var n=r[t]?e.constructor:e;if(t&&t in a)n[t]=a[t];else for(var t in a)n[t]=a[t]}},e.exports.mixin=function(e,t){return spyOnComponent(e.prototype,t),e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,s],c=0;(l=new Error(t.replace(/%s/g,function(){return u[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";t.__esModule=!0,t.pick=function(e,t){var n=Object.keys(t.propTypes),r={};return Object.keys(e).forEach(function(t){-1!==n.indexOf(t)&&(r[t]=e[t])}),r},t.pickElementProps=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var s=a.apply(void 0,[e].concat(n)),l={};return Object.keys(s).forEach(function(e){(-1!==r.indexOf(e)||o.some(function(t){return!!e.match(t)}))&&(l[e]=s[e])}),l},t.omitOwn=a;var r=["style","className","role","id","autocomplete","size","tabIndex","maxLength","name"],o=[/^aria-/,/^data-/,/^on[A-Z]\w+/];function a(e){for(var t=Object.keys(e.constructor.propTypes),n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=r.reduce(function(e,t){return e.concat(Object.keys(t.propTypes))},t),i={};return Object.keys(e.props).forEach(function(t){-1===a.indexOf(t)&&(i[t]=e.props[t])}),i}},function(e,t,n){"use strict";t.__esModule=!0,t.notify=function(e,t){e&&e.apply(null,[].concat(t))},t.instanceId=function(e,t){void 0===t&&(t="");return e.__id||(e.__id=(n="rw_",""+((null==n?"":n)+ ++r))),(e.props.id||e.__id)+t;var n},t.isFirstFocusedRender=function(e){return e._firstFocus||(e.state.focused||!!e.props.open)&&(e._firstFocus=!0)};var r=0},function(e,t,n){"use strict";t.__esModule=!0,t.dataIndexOf=a,t.valueMatcher=i,t.dataItem=function(e,t,n){var r=a(e,t,n);return-1!==r?e[r]:t},t.dataText=t.dataValue=void 0;var r=n(16),o=function(e,t){var n=e;return"function"==typeof t?n=t(e):null==e?n=e:"string"==typeof t&&"object"==typeof e&&t in e&&(n=e[t]),n};t.dataValue=o;function a(e,t,n){for(var r=-1,o=function(e){return i(t,e,n)};++r<e.length;){var a=e[r];if(a===t||o(a))return r}return-1}function i(e,t,n){return(0,r.isShallowEqual)(o(e,n),o(t,n))}t.dataText=function(e,t){var n=o(e,t);return null==n?"":n+""}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t){var n=(0,a.default)(e);return n?n.innerHeight:t?e.clientHeight:(0,o.default)(e).height};var o=r(n(41)),a=r(n(17));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t=!0;return(0,o.default)(e,{componentWillUnmount:function(){t=!1}}),function(){return t}};var r,o=(r=n(18))&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.TextOverflowWrapper},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Switch},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.DatePicker},function(e,t,n){var r=n(62);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function a(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,i=null,s=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?s="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(s="UNSAFE_componentWillUpdate"),null!==n||null!==i||null!==s){var l=e.displayName||e.name,u="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+l+" uses "+u+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==i?"\n  "+i:"")+(null!==s?"\n  "+s:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return i}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,n,r,o,a,i){var s=o||"<<anonymous>>",l=i||r;if(null==n[r])return t?new Error("Required "+a+" `"+l+"` was not specified in `"+s+"`."):null;for(var u=arguments.length,c=Array(u>6?u-6:0),d=6;d<u;d++)c[d-6]=arguments[d];return e.apply(void 0,[n,r,s,a,l].concat(c))}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.defaultGetDataState=u,t.getCommonListProps=function(e,t,n){var r=n.groupBy,o=n.optionComponent,a=n.itemComponent,s=n.groupComponent,l=n.searchTerm,u=n.listProps;return i({searchTerm:l,groupBy:r,groupComponent:s,itemComponent:a,optionComponent:o},u,{data:e.data,dataState:e.state,textAccessor:t.text,valueAccessor:t.value})},t.default=function(e,t,n){var o=void 0===n?{}:n,i=o.nextProps,l=o.getDataState,p=i.disabled,f=i.valueField,h=i.textField,m=(l=l||c(i)||u)(e,i,t&&t.dataState),g=m&&m.sequentialData||e,y=d(p,f),v=function(e,t){return y(e)||t&&!r.presets.startsWith((0,a.dataText)(e,h).toLowerCase(),t.toLowerCase())},b={dataState:m,isDisabled:y,first:function(){return b.next(s)},last:function(){return b.prevEnabled(g[g.length-1])},prev:function(e,t){for(var n=Math.max(0,g.indexOf(e))-1;n>-1&&v(g[n],t);)n--;return n>=0?g[n]:y(e)?null:e},next:function(e,t){for(var n=g.indexOf(e)+1;n<g.length&&v(g[n],t);)n++;return n<g.length?g[n]:y(e)?null:e},prevEnabled:function(e){return y(e)?b.prev(e):e},nextEnabled:function(e){return y(e)?b.next(e):e}};return b};var r=n(32),o=n(16),a=n(22);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var s={},l=function(){return!1};function u(e,t,n){var r=t.groupBy;if(void 0===n&&(n={}),n.data!==e||n.groupBy!==r){if(!r)return{};var a=[],i=(0,o.groupBySortedKeys)(r,e,a);return{data:e,groupBy:r,groups:i,sortedKeys:a,sequentialData:Object.keys(i).reduce(function(e,t){return e.concat(i[t])},[])}}return n}var c=function(e){var t=e.listComponent;return t&&t.getDataState},d=function(e,t){return Array.isArray(e)?function(n){return e.some(function(e){return(0,a.dataValue)(n,t)===(0,a.dataValue)(e,t)})}:l}},function(e,t,n){"use strict";t.__esModule=!0,t.indexOf=function(e,t){var n=t.searchTerm,r=void 0===n?"":n,o=c(s(t,["searchTerm"])),a=o.filter,i=o.minLength;if(!a||!r||!r.trim()||r.length<i)return-1;for(var l=0;l<e.length;l++)if(a(e[l],r,l))return l;return-1},t.filter=function(e,t){var n=t.searchTerm,r=void 0===n?"":n,o=c(s(t,["searchTerm"])),a=o.filter,i=o.minLength;return!a||!r||!r.trim()||r.length<i?e:e.filter(function(e,t){return a(e,r,t)})},t.suggest=function(e,t){var n=t.searchTerm,r=void 0===n?"":n,o=c(s(t,["searchTerm"])),a=o.filter,i=o.minLength;if(!a||!r||!r.trim()||r.length<i)return r;for(var l=0;l<e.length;l++)if(a(e[l],r,l))return e[l];return r},t.propTypes=t.presets=void 0;var r,o=(r=n(1))&&r.__esModule?r:{default:r},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(15)),i=n(22);function s(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u={eq:function(e,t){return e===t},neq:function(e,t){return e!==t},gt:function(e,t){return e>t},gte:function(e,t){return e>=t},lt:function(e,t){return e<t},lte:function(e,t){return e<=t},contains:function(e,t){return-1!==e.indexOf(t)},startsWith:function(e,t){return 0===e.lastIndexOf(t,0)},endsWith:function(e,t){var n=e.length-t.length,r=e.indexOf(t,n);return-1!==r&&r===n}};function c(e){var t,n,r,o,a,s,c=l({},e);return c.minLengh=c.minLengh||0,c.filter=(r=(t=c).filter,o=t.caseSensitive,a=void 0!==o&&o,s=t.textField,"function"!=typeof(r=!1===(n=r)?null:!0===n?"startsWith":n||"eq")&&r?(r=u[r],function(e,t){var n=(0,i.dataText)(e,s);return a||(n=n.toLowerCase(),t=t.toLowerCase()),r(n,t)}):r),c}t.presets=u;var d={textField:a.accessor,caseSensitive:o.default.bool,minLength:o.default.number,filter:o.default.oneOfType([o.default.func,o.default.bool,o.default.oneOf(Object.keys(u))])};t.propTypes=d},function(e,t,n){"use strict";t.__esModule=!0,t.getMessages=function(e){void 0===e&&(e={});var t={};return Object.keys(a).forEach(function(n){var r=e[n];null==r&&(r=a[n]),t[n]="function"==typeof r?r:function(){return r}}),t};var r,o=(r=n(0))&&r.__esModule?r:{default:r};var a={moveBack:"Navigate back",moveForward:"Navigate forward",dateButton:"Select date",timeButton:"Select time",openCombobox:"open combobox",openDropdown:"open dropdown",placeholder:"",filterPlaceholder:"",emptyList:"There are no items in this list",emptyFilter:"The filter returned no results",createOption:function(e){var t=e.searchTerm;return[" Create option",t&&" ",t&&o.default.createElement("strong",{key:"_"},'"'+t+'"')]},tagsLabel:"Selected items",removeLabel:"Remove selected item",noneSelected:"no selected items",selectedItems:function(e){return"Selected items: "+e.join(", ")},increment:"Increment value",decrement:"Decrement value"}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=function(){};r(n(12)).default&&(o=document.addEventListener?function(e,t,n,r){return e.addEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.attachEvent("on"+t,function(t){(t=t||window.event).target=t.target||t.srcElement,t.currentTarget=e,n.call(e,t)})}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=function(){};r(n(12)).default&&(o=document.addEventListener?function(e,t,n,r){return e.removeEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.detachEvent("on"+t,n)}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(12)).default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):a(e,t)}:a;function a(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}t.default=o,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n,a="#"===t[0],i="."===t[0],s=a||i?t.slice(1):t;if(r.test(s))return a?(e=e.getElementById?e:document,(n=e.getElementById(s))?[n]:[]):e.getElementsByClassName&&i?o(e.getElementsByClassName(s)):o(e.getElementsByTagName(t));return o(e.querySelectorAll(t))};var r=/^[\w-]*$/,o=Function.prototype.bind.call(Function.prototype.call,[].slice);e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t,n){var r="",c="",d=t;if("string"==typeof t){if(void 0===n)return e.style[(0,o.default)(t)]||(0,i.default)(e).getPropertyValue((0,a.default)(t));(d={})[t]=n}Object.keys(d).forEach(function(t){var n=d[t];n||0===n?(0,u.default)(t)?c+=t+"("+n+") ":r+=(0,a.default)(t)+": "+n+";":(0,s.default)(e,(0,a.default)(t))}),c&&(r+=l.transform+": "+c+";");e.style.cssText+=";"+r};var o=r(n(39)),a=r(n(94)),i=r(n(96)),s=r(n(97)),l=n(40),u=r(n(98));e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e){return(0,o.default)(e.replace(a,"ms-"))};var o=r(n(93)),a=/^-ms-/;e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,a,i,s,l,u,c,d,p,f,h,m=r(n(12)),g="transform";if(t.transform=g,t.animationEnd=i,t.transitionEnd=a,t.transitionDelay=c,t.transitionTiming=u,t.transitionDuration=l,t.transitionProperty=s,t.animationDelay=h,t.animationTiming=f,t.animationDuration=p,t.animationName=d,m.default){var y=function(){for(var e,t,n=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),a="",i=0;i<o.length;i++){var s=o[i];if(s+"TransitionProperty"in n){a="-"+s.toLowerCase(),e=r[s]("TransitionEnd"),t=r[s]("AnimationEnd");break}}!e&&"transitionProperty"in n&&(e="transitionend");!t&&"animationName"in n&&(t="animationend");return n=null,{animationEnd:t,transitionEnd:e,prefix:a}}();o=y.prefix,t.transitionEnd=a=y.transitionEnd,t.animationEnd=i=y.animationEnd,t.transform=g=o+"-"+g,t.transitionProperty=s=o+"-transition-property",t.transitionDuration=l=o+"-transition-duration",t.transitionDelay=c=o+"-transition-delay",t.transitionTiming=u=o+"-transition-timing-function",t.animationName=d=o+"-animation-name",t.animationDuration=p=o+"-animation-duration",t.animationTiming=f=o+"-animation-delay",t.animationDelay=h=o+"-animation-timing-function"}var v={transform:g,end:a,property:s,timing:u,delay:c,duration:l};t.default=v},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e){var t=(0,i.default)(e),n=(0,a.default)(t),r=t&&t.documentElement,s={top:0,left:0,height:0,width:0};if(!t)return;if(!(0,o.default)(r,e))return s;void 0!==e.getBoundingClientRect&&(s=e.getBoundingClientRect());return s={top:s.top+(n.pageYOffset||r.scrollTop)-(r.clientTop||0),left:s.left+(n.pageXOffset||r.scrollLeft)-(r.clientLeft||0),width:(null==s.width?e.offsetWidth:s.width)||0,height:(null==s.height?e.offsetHeight:s.height)||0}};var o=r(n(36)),a=r(n(17)),i=r(n(99));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r=u(n(18));t.spyOnComponent=r.default;var o=u(n(107));t.autoFocus=o.default;var a=u(n(108));t.focusManager=a.default;var i=u(n(24));t.mountManager=i.default;var s=u(n(43));t.timeoutManager=s.default;var l=u(n(109));function u(e){return e&&e.__esModule?e:{default:e}}t.mixin=l.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t,n=(0,o.default)(e),a=Object.create(null);return(0,r.default)(e,{componentWillUnmount:function(){for(var e in a)clearTimeout(a[e]);a=null}}),t={clear:function(e){clearTimeout(a[e])},set:function(e,r,o){n()&&(t.clear(e),a[e]=setTimeout(r,o))}}};var r=a(n(18)),o=a(n(24));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.widgetEditable=t.widgetEnabled=t.isInDisabledFieldset=void 0;var r,o=n(13),a=(r=n(110))&&r.__esModule?r:{default:r};var i=function(e){var t;try{t=(0,o.findDOMNode)(e)}catch(e){}return!!t&&(0,a.default)(t,"fieldset[disabled] *")};t.isInDisabledFieldset=i;var s=u(!0);t.widgetEnabled=s;var l=u(!1);function u(e){function t(t){return function(){var n=this.props,r=n.disabled,o=n.readOnly;r=i(this)||1==r||!e&&!0===o;for(var a=arguments.length,s=new Array(a),l=0;l<a;l++)s[l]=arguments[l];if(!r)return t.apply(this,s)}}return function(e,n,r){if(r.initializer){var o=r.initializer;r.initializer=function(){return t(o.call(this)).bind(this)}}else r.value=t(r.value);return r}}t.widgetEditable=l},function(e,t,n){var r=n(61);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=window.dnn.nodeModules.Moment},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Collapsible},function(e,t,n){var r=n(69);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(72);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=window.dnn.nodeModules.ThrottleDebounce},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o,a,i,s,l,u,c=j(n(0)),d=j(n(1)),p=j(n(9)),f=n(29),h=j(n(75)),m=j(n(77)),g=j(n(78)),y=j(n(79)),v=j(n(88)),b=j(n(102)),w=j(n(104)),E=n(33),x=j(n(106)),S=j(n(31)),O=j(n(111)),_=I(n(15)),C=j(n(112)),U=n(16),R=I(n(20)),T=I(n(32)),D=n(44),P=n(21),k=n(117);function I(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function j(e){return e&&e.__esModule?e:{default:e}}function M(e,t,n,r){n&&Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function N(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function F(e,t,n,r,o){var a={};return Object.keys(r).forEach(function(e){a[e]=r[e]}),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},a),o&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(o):void 0,a.initializer=void 0),void 0===a.initializer&&(Object.defineProperty(e,t,a),a=null),a}function L(){return(L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var A=L({},T.propTypes,{value:d.default.any,onChange:d.default.func,open:d.default.bool,onToggle:d.default.func,itemComponent:_.elementType,listComponent:_.elementType,groupComponent:_.elementType,groupBy:_.accessor,data:d.default.array,valueField:_.accessor,textField:_.accessor,name:d.default.string,onSelect:d.default.func,autoFocus:d.default.bool,disabled:_.disabled.acceptsArray,readOnly:_.disabled,suggest:T.propTypes.filter,busy:d.default.bool,selectIcon:d.default.node,busySpinner:d.default.node,delay:d.default.number,dropUp:d.default.bool,popupTransition:_.elementType,placeholder:d.default.string,containerClassName:d.default.string,inputProps:d.default.object,listProps:d.default.object,isRtl:d.default.bool,messages:d.default.shape({openCombobox:_.message,emptyList:_.message,emptyFilter:_.message})}),z=(0,f.polyfill)((u=l=function(e){var t,n;function r(t,n){var r;return(r=e.call(this,t,n)||this).handleFocusWillChange=function(e){!e&&r.inputRef&&r.inputRef.accept(),e&&r.focus()},r.handleFocusChanged=function(e){e||r.close()},M(r,"handleSelect",a,N(N(r))),r.handleInputKeyDown=function(e){var t=e.key;r._deleting="Backspace"===t||"Delete"===t,r._isTyping=!0},r.handleInputChange=function(e){var t=r.suggest(e.target.value);r.change(t,!0,e),r.open()},M(r,"handleKeyDown",i,N(N(r))),r.attachListRef=function(e){r.listRef=e},r.attachInputRef=function(e){r.inputRef=e},M(r,"toggle",s,N(N(r))),r.inputId=(0,P.instanceId)(N(N(r)),"_input"),r.listId=(0,P.instanceId)(N(N(r)),"_listbox"),r.activeId=(0,P.instanceId)(N(N(r)),"_listbox_active_option"),r.handleScroll=(0,C.default)(N(N(r))),r.focusManager=(0,x.default)(N(N(r)),{willHandle:r.handleFocusWillChange,didHandle:r.handleFocusChanged}),r.state={isSuggesting:function(){return r.inputRef&&r.inputRef.isSuggesting()}},r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.shouldComponentUpdate=function(e,t){var n=t.isSuggesting(),r=!(0,U.isShallowEqual)(t,this.state),o=!(0,U.isShallowEqual)(e,this.props);return n||r||o},r.getDerivedStateFromProps=function(e,t){var n,r=e.value,o=e.data,a=e.messages,i=e.filter,s=e.minLength,l=e.caseSensitive,u=t.focusedItem,c=(0,O.default)(e),d=r!==t.lastValue,p=c.indexOf(o,r),f=-1===p?r:o[p];(-1===p||t.isSuggesting())&&(n=c.text(f)),o=o=T.filter(o,{filter:i,searchTerm:n,minLength:s,caseSensitive:l,textField:c.text});var h=(0,S.default)(o,t.list,{nextProps:e}),m=p;m=-1!==p?p=c.indexOf(o,r):T.indexOf(o,{searchTerm:n,textField:c.text,filter:i||!0});var g=o[p],y=~m?u:o[0];return{data:o,list:h,accessors:c,lastValue:r,messages:(0,E.getMessages)(a),selectedItem:d?h.nextEnabled(g):t.selectedItem,focusedItem:d||!u?h.nextEnabled(g||y):y}},o.renderInput=function(){var e=this.props,t=e.suggest,n=e.filter,r=e.busy,o=e.name,a=e.data,i=e.value,s=e.autoFocus,l=e.tabIndex,u=e.placeholder,d=e.inputProps,p=e.disabled,f=e.readOnly,h=e.open,m=this.state.accessors,g=m.findOrSelf(a,i),y=t?n?"both":"inline":n?"list":"";return c.default.createElement(w.default,L({},d,{role:"combobox",name:o,id:this.inputId,autoFocus:s,tabIndex:l,suggest:t,disabled:!0===p,readOnly:!0===f,"aria-busy":!!r,"aria-owns":this.listId,"aria-autocomplete":y,"aria-activedescendant":h?this.activeId:null,"aria-expanded":h,"aria-haspopup":!0,placeholder:u,value:m.text(g),onChange:this.handleInputChange,onKeyDown:this.handleInputKeyDown,ref:this.attachInputRef}))},o.renderList=function(e){var t=this.activeId,n=this.inputId,r=this.listId,o=this.props,a=o.open,i=o.data,s=o.value,l=o.listProps,u=o.optionComponent,d=o.itemComponent,p=o.groupComponent,f=this.state,h=f.list,m=f.accessors,g=f.focusedItem,y=f.selectedItem,v=f.data,b=this.props.listComponent;return c.default.createElement(b,L({},l,{id:r,activeId:t,data:v,dataState:h.dataState,isDisabled:h.isDisabled,textAccessor:m.text,valueAccessor:m.value,itemComponent:d,groupComponent:p,optionComponent:u,selectedItem:y,focusedItem:a?g:null,searchTerm:m.text(s)||"","aria-hidden":!a,"aria-labelledby":n,"aria-live":a&&"polite",onSelect:this.handleSelect,onMove:this.handleScroll,ref:this.attachListRef,messages:{emptyList:i.length?e.emptyFilter:e.emptyList}}))},o.render=function(){var e=this,t=this.props,n=t.isRtl,r=t.className,o=t.popupTransition,a=t.busy,i=t.dropUp,s=t.open,l=t.selectIcon,u=t.busySpinner,d=t.containerClassName,f=this.state,h=f.focused,y=f.messages,w=!0===this.props.disabled,E=!0===this.props.readOnly,x=R.pickElementProps(this),S=(0,P.isFirstFocusedRender)(this);return c.default.createElement(m.default,L({},x,{open:s,isRtl:n,dropUp:i,focused:h,disabled:w,readOnly:E,onBlur:this.focusManager.handleBlur,onFocus:this.focusManager.handleFocus,onKeyDown:this.handleKeyDown,className:(0,p.default)(r,"rw-combobox")}),c.default.createElement(g.default,{className:d},this.renderInput(),c.default.createElement(b.default,{bordered:!0,busy:a,icon:l,spinner:u,onClick:this.toggle,disabled:w||E,label:y.openCombobox(this.props)})),S&&c.default.createElement(v.default,{open:s,dropUp:i,transition:o,onEntering:function(){return e.listRef.forceUpdate()}},c.default.createElement("div",null,this.renderList(y))))},o.focus=function(){this.inputRef&&this.inputRef.focus()},o.change=function(e,t,n){var r=this.props,o=r.onChange,a=r.value;this._typedChange=!!t,(0,P.notify)(o,[e,{lastValue:a,originalEvent:n}])},o.open=function(){this.props.open||(0,P.notify)(this.props.onToggle,!0)},o.close=function(){this.props.open&&(0,P.notify)(this.props.onToggle,!1)},o.suggest=function(e){var t=this.props,n=t.textField,r=t.suggest,o=t.minLength,a=this.state.data;return this._deleting?e:T.suggest(a,{minLength:o,textField:n,searchTerm:e,filter:r,caseSensitive:!1})},r}(c.default.Component),l.propTypes=A,l.defaultProps={data:[],value:"",open:!1,suggest:!1,filter:!1,delay:500,selectIcon:k.caretDown,listComponent:y.default},a=F((o=u).prototype,"handleSelect",[D.widgetEditable],{enumerable:!0,initializer:function(){var e=this;return function(t,n){e.close(),(0,P.notify)(e.props.onSelect,[t,{originalEvent:n}]),e.change(t,!1,n),e.inputRef&&e.inputRef.accept(!0),e.focus()}}}),i=F(o.prototype,"handleKeyDown",[D.widgetEditable],{enumerable:!0,initializer:function(){var e=this;return function(t){var n=t.key,r=t.altKey,o=e.props,a=o.open,i=o.onKeyDown,s=e.state,l=s.focusedItem,u=s.selectedItem,c=s.list;if((0,P.notify)(i,[t]),!t.defaultPrevented){var d=function(n){return null!=n&&e.handleSelect(n,t)},p=function(t){return e.setState({focusedItem:t})};if("End"===n&&a)t.preventDefault(),p(c.last());else if("Home"===n&&a)t.preventDefault(),p(c.first());else if("Escape"===n&&a)t.preventDefault(),e.close();else if("Enter"===n&&a)t.preventDefault(),d(e.state.focusedItem);else if("Tab"===n)e.inputRef.accept();else if("ArrowDown"===n){if(t.preventDefault(),r)return e.open();a?p(c.next(l)):d(c.next(u))}else if("ArrowUp"===n){if(t.preventDefault(),r)return e.close();a?p(c.prev(l)):d(c.prev(u))}}}}}),s=F(o.prototype,"toggle",[D.widgetEditable],{enumerable:!0,initializer:function(){var e=this;return function(){e.focus(),e.props.open?e.close():e.open()}}}),r=o))||r,W=(0,h.default)(z,{open:"onToggle",value:"onChange"},["focus"]);t.default=W,e.exports=t.default},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Pager},function(e,t,n){var r=n(122);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.Dropdown},function(e,t){e.exports=window.dnn.nodeModules.CommonComponents.SearchBox},function(e,t,n){"use strict";var r=n(57);function o(){}e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(59);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.header-row{padding:10px 0 10px;border-bottom:1px solid #C8C8C8;text-transform:uppercase}.header-row .dnn-grid-cell{padding:0 15px}.header-row .dnn-grid-cell.empty{text-indent:-100px;overflow:hidden}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(t=e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.collapsible-component-users .collapsible-header-users.false{border-top:2px solid #1E88C3;border-bottom:2px solid #1E88C3;margin-top:-2px}._1Mguw8rOBoWWOa_pLgzWpT{padding:15px 0 7.5px;border-bottom:1px solid #C8C8C8}._1Mguw8rOBoWWOa_pLgzWpT.closed{padding:0;border-bottom:none}._1Mguw8rOBoWWOa_pLgzWpT .user-avatar{text-align:center}._1Mguw8rOBoWWOa_pLgzWpT .user-avatar img{border-radius:25px;width:40px}._1Mguw8rOBoWWOa_pLgzWpT .user-detail-row{float:left;width:100%}._1Mguw8rOBoWWOa_pLgzWpT .user-detail-row>div{width:100%;float:left}._1Mguw8rOBoWWOa_pLgzWpT .user-emails{padding-left:11px !important}._1Mguw8rOBoWWOa_pLgzWpT .email-link>a{color:#1E88C3;text-decoration:none}._1Mguw8rOBoWWOa_pLgzWpT .user-names{padding-left:2px !important}._1Mguw8rOBoWWOa_pLgzWpT .user-names h6{font-size:15px}._1Mguw8rOBoWWOa_pLgzWpT .user-names p{text-transform:lowercase}._1Mguw8rOBoWWOa_pLgzWpT .user-joined{padding-left:22px !important}._1Mguw8rOBoWWOa_pLgzWpT .deleted{text-decoration:line-through}._1Mguw8rOBoWWOa_pLgzWpT .extension-action{margin-left:5px;float:right;cursor:pointer}._1Mguw8rOBoWWOa_pLgzWpT .extension-action svg{width:20px;float:left;height:20px}._1Mguw8rOBoWWOa_pLgzWpT .extension-action.false svg{fill:#1E88C3}._1Mguw8rOBoWWOa_pLgzWpT .extension-action.false svg:hover{fill:#4B4E4F}._1Mguw8rOBoWWOa_pLgzWpT .extension-action.more-menu{position:relative}._1Mguw8rOBoWWOa_pLgzWpT .dnn-grid-cell{padding:0 15px}._1Mguw8rOBoWWOa_pLgzWpT .dnn-grid-cell p{word-wrap:break-word}._1Mguw8rOBoWWOa_pLgzWpT .package-name{word-wrap:break-word;display:inline;vertical-align:top}",""]),t.locals={extensionDetailRow:"_1Mguw8rOBoWWOa_pLgzWpT"}},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-menu.menu-item{padding:10px 20px;cursor:pointer;color:black}.dnn-user-menu.menu-item:hover{background-color:#EFF0F0;color:#1E88C3}.dnn-user-menu.menu{position:absolute;right:-18px;top:35px;text-align:left;min-width:200px;border:1px solid #C8C8C8;border-radius:3px;background-color:#FFFFFF;list-style:none;padding:10px 0px;box-shadow:0 0 30px 0 rgba(0,0,0,0.1);z-index:1000}",""])},function(e,t,n){var r=n(64);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.dnn-user-change-password{background-color:#FFFFFF;position:absolute;width:47%;left:30px;z-index:100;box-sizing:border-box;float:left;border:1px solid #C8C8C8;box-shadow:0 0 17px 2px rgba(0,0,0,0.2)}.dnn-user-change-password .dnn-grid-cell{padding:15px;margin:0px;float:left;text-align:left}.dnn-user-change-password .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell{padding:0px 15px;margin:0px}.dnn-user-change-password .dnn-grid-system .dnn-grid-cell .right{float:right}.dnn-user-change-password .buttons .dnn-grid-cell.leftBtn{padding-right:0px;text-align:right}.dnn-user-change-password .buttons .dnn-grid-cell.rightBtn{padding-left:30px}",""])},function(e,t,n){var r=n(66);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .dnn-user-menu.menu-popup{position:absolute}#users-container .dnn-user-menu .dnn-user-change-password{width:400px;right:-18px;top:35px;left:auto}",""])},function(e,t,n){var r=n(68);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"",""])},function(e,t,n){(t=e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._1QFop-9zyo_9h6KP3GTTbH{box-sizing:border-box;margin-top:10px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box{width:100%;background-color:white;padding:10px 0}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .box-title{margin-bottom:15px;text-transform:uppercase}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-system.with-right-border.bottom-half{padding-top:25px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-switch-container{width:100%}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-switch-container .dnn-switch{float:right}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-single-line-input-with-error .__react_component_tooltip{max-width:200px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell{padding:10px 15px;box-sizing:border-box}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell>hr{border:none;height:1px;color:#C8C8C8;background-color:#C8C8C8}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell .version-dropdown{width:31.1%;box-sizing:border-box;margin-right:10px;vertical-align:bottom}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell .version-dropdown:last-child{margin-right:0}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell.modal-footer{text-align:center}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .dnn-grid-cell.modal-footer button{min-width:100px;margin-right:10px}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .email-notification-line{text-align:center}._1QFop-9zyo_9h6KP3GTTbH .new-user-box .email-notification-line .dnn-checkbox-container.right{float:none}",""]),t.locals={newExtensionModal:"_1QFop-9zyo_9h6KP3GTTbH"}},function(e,t,n){var r=n(71);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.passwordStrength{line-height:1.5pt;height:1.5pt;position:relative;top:-18px}.passwordStrength.weak{background-color:red;width:25%}.passwordStrength.fair{background-color:#f6d500;width:75%}.passwordStrength.strong{background-color:green;width:100%}.passwordStrengthLabel{position:relative;top:-45px;left:308px;font-weight:700}.passwordStrengthLabel.weak{color:red}.passwordStrengthLabel.fair{color:#f6d500}.passwordStrengthLabel.strong{color:green}",""])},function(e,t,n){(t=e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}._1V9clvN0tHMc4tkJHXUDNn{box-sizing:border-box;float:left;margin:15px 0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell{margin:5px 0px;float:left;text-align:left}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box{padding:10px 30px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right{border-left:1px solid #C8C8C8}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right .dnn-grid-system{margin:10px 0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right .dnn-grid-system.first{margin-bottom:4.5px;margin-right:0px;margin-left:0px;margin-top:0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .outer-box.right .dnn-grid-system .dnn-grid-cell{padding:0px;margin:0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell.no-padding{padding:0px}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .title{text-transform:uppercase;font-weight:bold;margin-bottom:20px;float:left}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link{padding:0px;font-weight:bold;cursor:pointer;color:#1E88C3}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link:active,._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link:hover{color:#21A3DA}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link.disabled{color:#C8C8C8;cursor:default}._1V9clvN0tHMc4tkJHXUDNn .dnn-grid-cell .link:visited{color:#226F9B}._1V9clvN0tHMc4tkJHXUDNn .buttons .dnn-grid-cell.leftBtn{padding-right:5px;text-align:right}._1V9clvN0tHMc4tkJHXUDNn .buttons .dnn-grid-cell.rightBtn{padding-left:10px}._1V9clvN0tHMc4tkJHXUDNn .isloading .input-tooltip-container input{pointer-events:none;border-color:#C8C8C8}",""]),t.locals={userSettings:"_1V9clvN0tHMc4tkJHXUDNn"}},function(e,t,n){var r=n(74);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.user-detail-row .edit-profile{float:left;padding:0px;width:100%;border:0px;min-height:700px;padding:10px 25px}",""])},function(e,t,n){"use strict";t.__esModule=!0,t.default=function e(t,n,a){void 0===a&&(a=[]);var s=t.displayName||t.name||"Component";var l=o.isReactComponent(t);var u=Object.keys(n);var c=u.map(o.defaultKey);!l&&a.length&&invariant(!1);var d=function(e){var a,s;function d(){for(var t,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=e.call.apply(e,[this].concat(o))||this).handlers=Object.create(null),u.forEach(function(e){var r=n[e];t.handlers[r]=function(n){if(t.props[r]){var o;t._notifying=!0;for(var a=arguments.length,i=new Array(a>1?a-1:0),s=1;s<a;s++)i[s-1]=arguments[s];(o=t.props)[r].apply(o,[n].concat(i)),t._notifying=!1}t._values[e]=n,t.unmounted||t.forceUpdate()}}),l&&(t.attachRef=function(e){t.inner=e}),t}s=e,(a=d).prototype=Object.create(s.prototype),a.prototype.constructor=a,a.__proto__=s;var p=d.prototype;return p.shouldComponentUpdate=function(){return!this._notifying},p.componentWillMount=function(){var e=this,t=this.props;this._values=Object.create(null),u.forEach(function(n){e._values[n]=t[o.defaultKey(n)]})},p.componentWillReceiveProps=function(e){var t=this,n=this.props;u.forEach(function(r){!o.isProp(e,r)&&o.isProp(n,r)&&(t._values[r]=e[o.defaultKey(r)])})},p.componentWillUnmount=function(){this.unmounted=!0},p.getControlledInstance=function(){return this.inner},p.render=function(){var e=this,n=i({},this.props);c.forEach(function(e){delete n[e]});var o={};return u.forEach(function(t){var n=e.props[t];o[t]=void 0!==n?n:e._values[t]}),r.default.createElement(t,i({},n,o,this.handlers,{ref:this.attachRef}))},d}(r.default.Component);d.displayName="Uncontrolled("+s+")";d.propTypes=o.uncontrolledPropTypes(n,s);a.forEach(function(e){d.prototype[e]=function(){var t;return(t=this.inner)[e].apply(t,arguments)}});d.ControlledComponent=t;d.deferControlTo=function(t,r,o){return void 0===r&&(r={}),e(t,i({},n,r),o)};return d};var r=a(n(0)),o=(a(n(19)),function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(76)));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.uncontrolledPropTypes=function(e,t){var n={};return Object.keys(e).forEach(function(e){n[a(e)]=o}),n},t.isProp=function(e,t){return void 0!==e[t]},t.defaultKey=a,t.isReactComponent=function(e){return!!(e&&e.prototype&&e.prototype.isReactComponent)};var r;(r=n(19))&&r.__esModule;var o=function(){};function a(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=i(n(0)),o=i(n(1)),a=i(n(9));function i(e){return e&&e.__esModule?e:{default:e}}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var l=function(e){var t,n;function o(){return e.apply(this,arguments)||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.render=function(){var e=this.props,t=e.className,n=e.tabIndex,o=e.focused,i=e.open,l=e.dropUp,u=e.disabled,c=e.readOnly,d=e.autofilling,p=e.isRtl,f=void 0===p?this.context.isRtl:p,h=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["className","tabIndex","focused","open","dropUp","disabled","readOnly","autofilling","isRtl"]);return n=null!=n?n:"-1",r.default.createElement("div",s({},h,{tabIndex:n,className:(0,a.default)(t,"rw-widget",f&&"rw-rtl",u&&"rw-state-disabled",c&&"rw-state-readonly",o&&"rw-state-focus",d&&"rw-webkit-autofill",i&&"rw-open"+(l?"-up":""))}))},o}(r.default.Component);l.contextTypes={isRtl:o.default.bool},l.propTypes={tabIndex:o.default.node,focused:o.default.bool,disabled:o.default.bool,readOnly:o.default.bool,autofilling:o.default.bool,open:o.default.bool,dropUp:o.default.bool,isRtl:o.default.bool};var u=l;t.default=u,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=i(n(0)),o=i(n(1)),a=i(n(9));function i(e){return e&&e.__esModule?e:{default:e}}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var l=function(e){var t,n;function o(){return e.apply(this,arguments)||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.render=function(){var e=this.props,t=e.open,n=e.dropUp,o=e.className,i=e.disabled,l=e.readOnly,u=e.focused,c=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["open","dropUp","className","disabled","readOnly","focused"]),d="rw-open"+(n?"-up":"");return r.default.createElement("div",s({},c,{className:(0,a.default)(o,"rw-widget-picker","rw-widget-container",t&&d,i&&"rw-state-disabled",l&&"rw-state-readonly",u&&"rw-state-focus")}))},o}(r.default.Component);l.propTypes={tabIndex:o.default.node,focused:o.default.bool,disabled:o.default.bool,readOnly:o.default.bool,open:o.default.bool,dropUp:o.default.bool,picker:o.default.bool};var u=l;t.default=u,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=m(n(1)),o=m(n(0)),a=n(13),i=h(n(15)),s=h(n(20)),l=n(21),u=n(31),c=m(n(85)),d=m(n(86)),p=m(n(87)),f=n(33);function h(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}function m(e){return e&&e.__esModule?e:{default:e}}function g(){return(g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var y={data:r.default.array,dataState:r.default.shape({sortedKeys:r.default.array,groups:r.default.object,data:r.default.array,sequentialData:r.default.array}),valueAccessor:i.accessor,textAccessor:i.accessor,onSelect:r.default.func,onMove:r.default.func,activeId:r.default.string,itemComponent:i.elementType,groupComponent:i.elementType,optionComponent:i.elementType,renderItem:r.default.func,renderGroup:r.default.func,focusedItem:r.default.any,selectedItem:r.default.any,searchTerm:r.default.string,isDisabled:r.default.func.isRequired,messages:r.default.shape({emptyList:r.default.func.isRequired})},v={onSelect:function(){},data:[],dataState:{},optionComponent:d.default},b=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).renderItem=function(e){var n=e.item,r=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["item"]),a=t.props,i=a.isDisabled,s=a.renderItem,l=a.textAccessor,u=a.valueAccessor,c=t.props.itemComponent;return s?s(g({item:n},r)):c?o.default.createElement(c,g({item:n,value:u(n),text:l(n),disabled:i(n)},r)):l(n)},t.renderGroup=function(e){var n=t.props,r=n.renderGroup,a=n.groupComponent;return r?r({group:e}):a?o.default.createElement(a,{item:e}):e},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.componentDidMount=function(){this.move()},i.componentDidUpdate=function(){this.move()},i.mapItems=function(e){var t=this.props,n=t.data,r=t.dataState,o=r.sortedKeys,a=r.groups;if(!a)return n.map(function(t,n){return e(t,n,!1)});var i=-1;return o.reduce(function(t,n){var r=a[n];return t.concat(e(n,i,!0),r.map(function(t){return e(t,++i,!1)}))},[])},i.move=function(){var e=this.props,t=e.focusedItem,n=e.onMove,r=e.data,o=e.dataState,i=(0,a.findDOMNode)(this),s=function(e,t,n,r){var o=r.groups,a=r.sortedKeys;if(!o)return n.indexOf(e);var i=-1,s=-1;return a.some(function(t){var n=o[t].indexOf(e);if(i++,-1!==n)return s=i+n+1,!0;i+=o[t].length}),s}(t,0,r,o),u=i.children[s];u&&(0,l.notify)(n,[u,i,t])},i.renderOption=function(e,t){var n=this.props,r=n.activeId,a=n.focusedItem,i=n.selectedItem,s=n.onSelect,l=n.isDisabled,u=n.searchTerm,c=n.optionComponent,d=a===e;return o.default.createElement(c,{dataItem:e,key:"item_"+t,index:t,activeId:r,focused:d,onSelect:s,disabled:l(e),selected:i===e},this.renderItem({item:e,index:t,searchTerm:u}))},i.render=function(){var e=this,t=this.props,n=t.className,r=t.messages,a=s.pickElementProps(this),i=(0,f.getMessages)(r).emptyList;return o.default.createElement(c.default,g({},a,{className:n,emptyListMessage:i(this.props)}),this.mapItems(function(t,n,r){return r?o.default.createElement(p.default,{key:"group_"+t,group:t},e.renderGroup(t)):e.renderOption(t,n)}))},r}(o.default.Component);b.getDataState=u.defaultGetDataState,b.propTypes=y,b.defaultProps=v;var w=b;t.default=w,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(0)),o=n(81),a=i(n(30));function i(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)(function(e,t,n,a,i){var s=e[t];return r.default.isValidElement(s)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+n+"`,expected an element type (a string , component class, or function component)."):(0,o.isValidElementType)(s)?null:new Error("Invalid "+a+" `"+i+"` of value `"+s+"` supplied to `"+n+"`, expected an element type (a string , component class, or function component).")}),e.exports=t.default},function(e,t,n){"use strict";e.exports=n(82)},function(e,t,n){"use strict";
/** @license React v16.6.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,f=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case p:case i:case l:case s:return e;default:switch(e=e&&e.$$typeof){case c:case f:case u:return e;default:return t}}case a:return t}}}function v(e){return y(e)===p}t.typeOf=y,t.AsyncMode=d,t.ConcurrentMode=p,t.ContextConsumer=c,t.ContextProvider=u,t.Element=o,t.ForwardRef=f,t.Fragment=i,t.Profiler=l,t.Portal=a,t.StrictMode=s,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===l||e===s||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===u||e.$$typeof===c||e.$$typeof===f)},t.isAsyncMode=function(e){return v(e)||y(e)===d},t.isConcurrentMode=v,t.isContextConsumer=function(e){return y(e)===c},t.isContextProvider=function(e){return y(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return y(e)===f},t.isFragment=function(e){return y(e)===i},t.isProfiler=function(e){return y(e)===l},t.isPortal=function(e){return y(e)===a},t.isStrictMode=function(e){return y(e)===s}},function(e,t,n){"use strict";t.__esModule=!0,t.setNumber=function(e){var t=e.format,n=e.parse,r=e.formats,o=e.propType,s=void 0===o?a:o,u=e.decimalChar,c=void 0===u?function(){return"."}:u,d=e.precision,h=void 0===d?function(){return null}:d;f(i,r),l={formats:r,precision:h,decimalChar:c,propType:s,format:p(t),parse:function(e,t,r){var o=n.call(this,e,t,r);return null!=o&&"number"!=typeof o&&invariant(!1),o}}},t.setDate=function(e){var t=e.formats,n=e.format,r=e.parse,o=e.firstOfWeek,i=e.propType,l=void 0===i?a:i;f(s,t),c={formats:t,propType:l,firstOfWeek:o,format:p(n),parse:function(e,t,n){var o=r.call(this,e,t,n);return null==o||o instanceof Date&&!isNaN(o.getTime())||invariant(!1),o}}},t.date=t.number=void 0;o(n(19)),n(16);var r=o(n(1));function o(e){return e&&e.__esModule?e:{default:e}}var a=r.default.oneOfType([r.default.string,r.default.func]),i=["default"],s=["default","date","time","header","footer","weekday","dayOfMonth","month","year","decade","century"],l=h(),u={propType:function(){var e;return(e=l).propType.apply(e,arguments)},getFormat:function(e,t){return t||l.formats[e]},parse:function(){var e;return(e=l).parse.apply(e,arguments)},format:function(){var e;return(e=l).format.apply(e,arguments)},decimalChar:function(){var e;return(e=l).decimalChar.apply(e,arguments)},precision:function(){var e;return(e=l).precision.apply(e,arguments)}};t.number=u;var c=h(),d={propType:function(){var e;return(e=c).propType.apply(e,arguments)},getFormat:function(e,t){return t||c.formats[e]},parse:function(){var e;return(e=c).parse.apply(e,arguments)},format:function(){var e;return(e=c).format.apply(e,arguments)},firstOfWeek:function(){var e;return(e=c).firstOfWeek.apply(e,arguments)}};t.date=d;var p=function(e){return function(t,n,r){var o="function"==typeof n?n(t,r,this):e.call(this,t,n,r);return null!=o&&"string"!=typeof o&&invariant(!1),o}};function f(e,t){0}function h(){return{}}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=s(n(0)),o=s(n(1)),a=s(n(9)),i=n(21);function s(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u={className:o.default.string,role:o.default.string,nodeRef:o.default.func,emptyListMessage:o.default.node},c=function(e){var t,n;function o(){return e.apply(this,arguments)||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.render=function(){var e=this.props,t=e.className,n=e.role,o=e.children,s=e.emptyListMessage,u=e.nodeRef,c=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["className","role","children","emptyListMessage","nodeRef"]),d=(0,i.instanceId)(this);return r.default.createElement("ul",l({id:d,tabIndex:"-1",ref:u,className:(0,a.default)(t,"rw-list"),role:void 0===n?"listbox":n},c),r.default.Children.count(o)?o:r.default.createElement("li",{className:"rw-list-empty"},s))},o}(r.default.Component);c.propTypes=u;var d=c;t.default=d,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=s(n(0)),o=s(n(1)),a=s(n(9)),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(20));function s(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u=function(e){var t,n;function o(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleSelect=function(e){var n=t.props,r=n.onSelect,o=n.disabled,a=n.dataItem;r&&!o&&r(a,e)},t}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.render=function(){var e=this.props,t=e.className,n=e.children,o=e.focused,s=e.selected,u=e.disabled,c=e.activeId,d=this.props.component||"li",p=i.omitOwn(this),f={"rw-state-focus":o,"rw-state-selected":s,"rw-state-disabled":u},h=o?c:void 0;return r.default.createElement(d,l({id:h,role:"option",tabIndex:u?void 0:"-1","aria-selected":!!s,className:(0,a.default)("rw-list-option",t,f),onClick:this.handleSelect},p),n)},o}(r.default.Component);u.propTypes={activeId:o.default.string,dataItem:o.default.any,index:o.default.number,focused:o.default.bool,selected:o.default.bool,disabled:o.default.bool,onSelect:o.default.func,component:o.default.string};var c=u;t.default=c,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=i(n(9)),o=i(n(0)),a=i(n(1));function i(e){return e&&e.__esModule?e:{default:e}}var s={className:a.default.string,component:a.default.string};function l(e){var t=e.children,n=e.className,a=e.component,i=void 0===a?"li":a;return o.default.createElement(i,{tabIndex:"-1",role:"separator",className:(0,r.default)(n,"rw-list-optgroup")},t)}l.propTypes=s;var u=l;t.default=u,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=l(n(9)),o=l(n(1)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(0)),i=l(n(89)),s=n(15);function l(e){return e&&e.__esModule?e:{default:e}}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function d(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var p=function(e){function t(){return e.apply(this,arguments)||this}d(t,e);var n=t.prototype;return n.shouldComponentUpdate=function(e){return!!e.shouldUpdate},n.render=function(){var e=this.props,t=e.className,n=e.children,o=c(e,["className","children"]);return delete o.shouldUpdate,(0,a.cloneElement)(n,u({},o,{className:(0,r.default)(t,n.props.className,"rw-popup")}))},t}(a.default.Component);p.propTypes={shouldUpdate:function(){}};var f=function(e){function t(){return e.apply(this,arguments)||this}return d(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.dropUp,o=e.open,i=e.transition,s=c(e,["className","dropUp","open","transition"]);return a.default.createElement(i,u({},s,{in:o,dropUp:n,className:(0,r.default)(t,"rw-popup-container")}),a.default.createElement(p,{shouldUpdate:o},a.default.Children.only(this.props.children)))},t}(a.default.Component);f.defaultProps={open:!1,transition:i.default},f.propTypes={open:o.default.bool,dropUp:o.default.bool,onEntering:o.default.func,onEntered:o.default.func,transition:s.elementType};var h=f;t.default=h,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o=p(n(9)),a=p(n(90)),i=p(n(38)),s=p(n(23)),l=n(40),u=p(n(1)),c=p(n(0)),d=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(100));function p(e){return e&&e.__esModule?e:{default:e}}function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var h=((r={})[d.ENTERING]="rw-popup-transition-entering",r[d.EXITING]="rw-popup-transition-exiting",r[d.EXITED]="rw-popup-transition-exited",r),m={in:u.default.bool.isRequired,dropUp:u.default.bool,onEntering:u.default.func,onEntered:u.default.func};var g=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).setContainerHeight=function(e){e.style.height=t.getHeight()+"px"},t.clearContainerHeight=function(e){e.style.height=""},t.handleEntered=function(e){t.clearContainerHeight(e),t.props.onEntered&&t.props.onEntered()},t.handleEntering=function(){t.props.onEntering&&t.props.onEntering()},t.handleTransitionEnd=function(e,t){var n=function(e){var t=(0,i.default)(e,l.transitionDuration),n=-1===t.indexOf("ms")?1e3:1;return parseFloat(t)*n}(e.lastChild)||0,r=function n(){a.default.off(e,l.transitionEnd,n,!1),t()};setTimeout(r,1.5*n),a.default.on(e,l.transitionEnd,r,!1)},t.attachRef=function(e){return t.element=e},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var u=r.prototype;return u.getHeight=function(){var e,t=this.element,n=t.firstChild,r=parseInt((0,i.default)(n,"margin-top"),10)+parseInt((0,i.default)(n,"margin-bottom"),10),o=t.style.display;return t.style.display="block",e=((0,s.default)(n)||0)+(isNaN(r)?0:r),t.style.display=o,e},u.render=function(){var e=this,t=this.props,n=t.children,r=t.className,a=t.dropUp;return c.default.createElement(d.default,{appear:!0,in:this.props.in,timeout:5e3,onEnter:this.setContainerHeight,onEntering:this.handleEntering,onEntered:this.handleEntered,onExit:this.setContainerHeight,onExited:this.clearContainerHeight,addEndListener:this.handleTransitionEnd},function(t,i){return c.default.createElement("div",f({},i,{ref:e.attachRef,className:(0,o.default)(r,a&&"rw-dropup",h[t])}),c.default.createElement("div",{className:"rw-popup-transition"},n))})},r}(c.default.Component);g.propTypes=m;var y=g;t.default=y,e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(34));t.on=o.default;var a=r(n(35));t.off=a.default;var i=r(n(91));t.filter=i.default;var s=r(n(92));t.listen=s.default;var l={on:o.default,off:a.default,filter:i.default,listen:s.default};t.default=l},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t){return function(n){var r=n.currentTarget,i=n.target,s=(0,a.default)(r,e);s.some(function(e){return(0,o.default)(e,i)})&&t.call(this,n)}};var o=r(n(36)),a=r(n(37));e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o=r(n(12)),a=r(n(34)),i=r(n(35)),s=function(){};o.default&&(s=function(e,t,n,r){return(0,a.default)(e,t,n,r),function(){(0,i.default)(e,t,n,r)}});var l=s;t.default=l,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})};var r=/-(.)/g;e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e){return(0,o.default)(e).replace(a,"-ms-")};var o=r(n(95)),a=/^ms-/;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,"-$1").toLowerCase()};var r=/([A-Z])/g;e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var n=e.style;"float"==(t=(0,o.default)(t))&&(t="styleFloat");var r=e.currentStyle[t]||null;if(null==r&&n&&n[t]&&(r=n[t]),i.test(r)&&!a.test(t)){var s=n.left,l=e.runtimeStyle,u=l&&l.left;u&&(l.left=e.currentStyle.left),n.left="fontSize"===t?"1em":r,r=n.pixelLeft+"px",n.left=s,u&&(l.left=u)}return r}}};var o=r(n(39)),a=/^(top|right|bottom|left)$/,i=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return!(!e||!r.test(e))};var r=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e&&e.ownerDocument||document},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(1)),o=s(n(0)),a=s(n(13)),i=n(29);n(101);function s(e){return e&&e.__esModule?e:{default:e}}var l="unmounted";t.UNMOUNTED=l;var u="exited";t.EXITED=u;var c="entering";t.ENTERING=c;var d="entered";t.ENTERED=d;t.EXITING="exiting";var p=function(e){var t,n;function r(t,n){var r;r=e.call(this,t,n)||this;var o,a=n.transitionGroup,i=a&&!a.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=u,r.appearStatus=c):o=d:o=t.unmountOnExit||t.mountOnEnter?l:u,r.state={status:o},r.nextCallback=null,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===l?{status:u}:null},i.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},i.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==c&&n!==d&&(t=c):n!==c&&n!==d||(t="exiting")}this.updateStatus(!1,t)},i.componentWillUnmount=function(){this.cancelNextCallback()},i.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=r.appear),{exit:e,enter:t,appear:n}},i.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=a.default.findDOMNode(this);t===c?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===u&&this.setState({status:l})},i.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:c},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a.enter,function(){n.safeSetState({status:d},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:d},function(){n.props.onEntered(e)})},i.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:u},function(){t.props.onExited(e)})})})):this.safeSetState({status:u},function(){t.props.onExited(e)})},i.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},i.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},i.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},i.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},i.render=function(){var e=this.state.status;if(e===l)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var a=o.default.Children.only(n);return o.default.cloneElement(a,r)},r}(o.default.Component);function f(){}p.contextTypes={transitionGroup:r.object},p.childContextTypes={transitionGroup:function(){}},p.propTypes={},p.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:f,onEntering:f,onEntered:f,onExit:f,onExiting:f,onExited:f},p.UNMOUNTED=0,p.EXITED=1,p.ENTERING=2,p.ENTERED=3,p.EXITING=4;var h=(0,i.polyfill)(p);t.default=h},function(e,t,n){"use strict";t.__esModule=!0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}},t.classNamesShape=t.timeoutsShape=void 0;var r,o=(r=n(1))&&r.__esModule?r:{default:r};var a=o.default.oneOfType([o.default.number,o.default.shape({enter:o.default.number,exit:o.default.number}).isRequired]);t.timeoutsShape=a;var i=o.default.oneOfType([o.default.string,o.default.shape({enter:o.default.string,exit:o.default.string,active:o.default.string}),o.default.shape({enter:o.default.string,enterDone:o.default.string,enterActive:o.default.string,exit:o.default.string,exitDone:o.default.string,exitActive:o.default.string})]);t.classNamesShape=i},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=s(n(0)),o=s(n(1)),a=s(n(9)),i=s(n(103));function s(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u=function(e){var t,n;function o(){return e.apply(this,arguments)||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.render=function(){var e=this.props,t=e.className,n=e.bordered,o=e.children,s=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["className","bordered","children"]);return r.default.createElement("span",{className:(0,a.default)(t,"rw-select",n&&"rw-select-bordered")},o?r.default.Children.map(o,function(e){return e&&r.default.cloneElement(e,{variant:"select"})}):r.default.createElement(i.default,l({},s,{variant:"select"})))},o}(r.default.Component);u.propTypes={bordered:o.default.bool};var c=u;t.default=c,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=i(n(0)),o=i(n(1)),a=i(n(9));function i(e){return e&&e.__esModule?e:{default:e}}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var l=function(){return r.default.createElement("span",{"aria-hidden":"true",className:"rw-i rw-loading"})},u=function(e){var t,n;function o(){return e.apply(this,arguments)||this}return n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.prototype.render=function(){var e=this.props,t=e.className,n=e.disabled,o=e.label,i=e.icon,u=e.busy,c=e.active,d=e.children,p=e.variant,f=void 0===p?"primary":p,h=e.spinner,m=void 0===h?r.default.createElement(l,null):h,g=e.component,y=void 0===g?"button":g,v=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["className","disabled","label","icon","busy","active","children","variant","spinner","component"]),b=v.type;return"button"===y&&(b=b||"button"),r.default.createElement(y,s({},v,{tabIndex:"-1",title:o,type:b,disabled:n,"aria-disabled":n,"aria-label":o,className:(0,a.default)(t,"rw-btn",c&&!n&&"rw-state-active",f&&"rw-btn-"+f)}),u?m:i,d)},o}(r.default.Component);u.propTypes={disabled:o.default.bool,label:o.default.string,icon:o.default.node,busy:o.default.bool,active:o.default.bool,variant:o.default.oneOf(["primary","select"]),component:o.default.any,spinner:o.default.node};var c=u;t.default=c,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.caretSet=void 0;var r=s(n(0)),o=s(n(1)),a=n(13),i=s(n(105));function s(e){return e&&e.__esModule?e:{default:e}}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var u=function(e,t,n){void 0===n&&(n=t);try{e.setSelectionRange(t,n)}catch(e){}};t.caretSet=u;var c=function(e){var t,n;function o(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleChange=function(e){var n=t.props,r=n.placeholder,o=n.value,a=n.onChange,i=e.target.value;!!r&&!i&&i===(o||"")||(t._last=i,a(e,i))},t}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var s=o.prototype;return s.componentDidUpdate=function(){var e=(0,a.findDOMNode)(this),t=this.props.value;if(this.isSuggesting()){var n=t.toLowerCase().indexOf(this._last.toLowerCase())+this._last.length,r=t.length-n;n>=0&&0!==r&&u(e,n,n+r)}},s.accept=function(e){if(void 0===e&&(e=!1),this._last=null,e){var t=(0,a.findDOMNode)(this);u(t,t.value.length)}},s.focus=function(){(0,a.findDOMNode)(this).focus()},s.isSuggesting=function(){var e=this.props,t=e.value;return!!e.suggest&&(null!=this._last&&-1!==t.toLowerCase().indexOf(this._last.toLowerCase()))},s.render=function(){var e=this.props,t=e.onKeyDown,n=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["onKeyDown"]);return delete n.suggest,r.default.createElement(i.default,l({},n,{className:"rw-widget-input",onKeyDown:t,onChange:this.handleChange}))},o}(r.default.Component);c.defaultProps={value:""},c.propTypes={value:o.default.string,placeholder:o.default.string,suggest:o.default.bool,onChange:o.default.func.isRequired,onKeyDown:o.default.func};var d=c;t.default=d},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=i(n(0)),o=i(n(1)),a=i(n(9));function i(e){return e&&e.__esModule?e:{default:e}}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e){var t=e.className,n=e.disabled,o=e.readOnly,i=e.value,l=e.tabIndex,u=e.nodeRef,c=e.type,d=void 0===c?"text":c,p=e.component,f=void 0===p?"input":p,h=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["className","disabled","readOnly","value","tabIndex","nodeRef","type","component"]);return r.default.createElement(f,s({},h,{type:d,ref:u,tabIndex:l||0,autoComplete:"off",disabled:n,readOnly:o,"aria-disabled":n,"aria-readonly":o,value:null==i?"":i,className:(0,a.default)(t,"rw-input")}))}l.propTypes={disabled:o.default.bool,readOnly:o.default.bool,value:o.default.string,type:o.default.string,tabIndex:o.default.string,component:o.default.any,nodeRef:o.default.func};var u=l;t.default=u,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n=t.didHandle;return(0,r.focusManager)(e,a({},t,{onChange:function(t){e.setState({focused:t})},isDisabled:function(){return!0===e.props.disabled||(0,o.isInDisabledFieldset)(e)},didHandle:function(e,t){var r=this.props[e?"onFocus":"onBlur"];r&&r(t),n&&!t.isWidgetDefaultPrevented&&n(e,t)}}))};var r=n(42),o=n(44);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){(0,i.default)(e,{componentDidMount:function(){var e=this.props.autoFocus;e&&(this.focus?this.focus():(0,a.findDOMNode)(this).focus())}})},t.PropTypes=void 0;var r,o=n(1),a=n(13),i=(r=n(18))&&r.__esModule?r:{default:r};var s={autoFocus:o.bool};t.PropTypes=s},function(e,t,n){"use strict";t.__esModule=!0,t.callFocusEventHandler=function(e,t,n){var r=e.props[t?"onFocus":"onBlur"];r&&r(n)},t.default=function(e,t){var n,i=void 0===t?{}:t,s=i.willHandle,l=i.didHandle,u=i.onChange,c=i.isDisabled,d=void 0===c?function(){return!!e.props.disabled}:c,p=(0,o.default)(e),f=(0,a.default)(e);function h(t,o){o&&o.persist&&o.persist(),s&&!1===s(t,o)||p.set("focus",function(){(0,r.unstable_batchedUpdates)(function(){t!==n&&(l&&l.call(e,t,o),!f()&&t||(n=t,u&&u(t,o)))})})}return{handleBlur:function(e){d()||h(!1,e)},handleFocus:function(e){d()||h(!0,e)}}};var r=n(13),o=i(n(43)),a=i(n(24));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){var n=t.propTypes,o=t.contextTypes,a=t.childContextTypes,i=t.getChildContext,s=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(t,["propTypes","contextTypes","childContextTypes","getChildContext"]);if(n&&(e.propTypes=r({},e.propTypes,n)),o&&(e.contextTypes=r({},e.contextTypes,o)),a&&(e.childContextTypes=r({},e.childContextTypes,a)),i){var l=e.prototype.getChildContext;e.prototype.getChildContext=function(){return r({},l&&l.call(this),i.call(this))}}return r(e.prototype,s),e}t.__esModule=!0,t.mixin=o,t.default=function(e){return function(t){return o(t,e)}}},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t){if(!o&&a.default){var n=document.body,r=n.matches||n.matchesSelector||n.webkitMatchesSelector||n.mozMatchesSelector||n.msMatchesSelector;o=r?function(e,t){return r.call(e,t)}:s}return o?o(e,t):null};var o,a=r(n(12)),i=r(n(37));function s(e,t){for(var n=(0,i.default)(e.document||e.ownerDocument,t),r=0;n[r]&&n[r]!==e;)r++;return!!n[r]}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t=e.textField,n=e.valueField;return{text:function(e){return r.dataText(e,t)},value:function(e){return r.dataValue(e,n)},indexOf:function(e,t){return r.dataIndexOf(e,t,n)},matches:function(e,t){return r.valueMatcher(e,t,n)},findOrSelf:function(e,t){return r.dataItem(e,t,n)},includes:function(e,t){return-1!==r.dataIndexOf(e,t,n)}}};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(22));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){void 0===t&&(t=function(e){return e.parentNode});var n,r,i,s=(0,a.mountManager)(e);return function(e,t,a){if(!s())return;var l,u=r,c=n;r=!(!t.offsetWidth||!t.offsetHeight),n=a,l=c!==a,(r&&!u||r&&l)&&(this.props.onMove?this.props.onMove(e,t,a):(i&&i(),i=(0,o.default)(e,!1)))}.bind(e)};var r,o=(r=n(113))&&r.__esModule?r:{default:r},a=n(42);e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t){var n,r,c,d,p,f,h,m=(0,o.default)(e),g={top:0,left:0};if(!e)return;n=t||(0,i.default)(e),d=(0,u.default)(n),r=(0,s.default)(n),f=(0,a.default)(n,!0),(d=(0,u.default)(n))||(g=(0,o.default)(n));m={top:m.top-g.top,left:m.left-g.left,height:m.height,width:m.width},p=m.height,c=m.top+(d?0:r),h=c+p,r=r>c?c:h>r+f?h-f:r;var y=(0,l.default)(function(){return(0,s.default)(n,r)});return function(){return l.default.cancel(y)}};var o=r(n(41)),a=r(n(23)),i=r(n(114)),s=r(n(115)),l=r(n(116)),u=r(n(17));e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e){var t=(0,o.default)(e,"position"),n="absolute"===t,r=e.ownerDocument;if("fixed"===t)return r||document;for(;(e=e.parentNode)&&9!==e.nodeType;){var i=n&&"static"===(0,o.default)(e,"position"),s=(0,o.default)(e,"overflow")+(0,o.default)(e,"overflow-y")+(0,o.default)(e,"overflow-x");if(!i&&(/(auto|scroll)/.test(s)&&(0,a.default)(e)<e.scrollHeight))return e}return document};var o=r(n(38)),a=r(n(23));e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=function(e,t){var n=(0,o.default)(e);if(void 0===t)return n?"pageYOffset"in n?n.pageYOffset:n.document.documentElement.scrollTop:e.scrollTop;n?n.scrollTo("pageXOffset"in n?n.pageXOffset:n.document.documentElement.scrollLeft,t):e.scrollTop=t};var o=r(n(17));e.exports=t.default},function(e,t,n){"use strict";var r=n(3);t.__esModule=!0,t.default=void 0;var o,a=r(n(12)),i="clearTimeout",s=function(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-u)),r=setTimeout(e,n);return u=t,r},l=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};a.default&&["","webkit","moz","o","ms"].some(function(e){var t=l(e,"request");if(t in window)return i=l(e,"cancel"),s=function(e){return window[t](e)}});var u=(new Date).getTime();(o=function(e){return s(e)}).cancel=function(e){window[i]&&"function"==typeof window[i]&&window[i](e)};var c=o;t.default=c,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.search=t.clock=t.calendar=t.chevronLeft=t.chevronRight=t.caretDown=t.caretUp=void 0;var r=a(n(1)),o=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var i={icon:r.default.string.isRequired},s=function(e){var t=e.icon;return o.default.createElement("span",{"aria-hidden":"true",className:"rw-i rw-i-"+t})};s.propTypes=i;var l=o.default.createElement(s,{icon:"caret-up"});t.caretUp=l;var u=o.default.createElement(s,{icon:"caret-down"});t.caretDown=u;var c=o.default.createElement(s,{icon:"chevron-right"});t.chevronRight=c;var d=o.default.createElement(s,{icon:"chevron-left"});t.chevronLeft=d;var p=o.default.createElement(s,{icon:"calendar"});t.calendar=p;var f=o.default.createElement(s,{icon:"clock-o"});t.clock=f;var h=o.default.createElement(s,{icon:"search"});t.search=h;var m=s;t.default=m},function(e,t,n){var r=n(119);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .user-role-row{width:100%;float:left;padding:13px 20px;box-sizing:border-box;text-align:left}#users-container .user-role-row:not(:last-child){border-bottom:1px solid #C8C8C8}#users-container .user-role-row div.edit-row a{display:inline-block}#users-container .user-role-row .dnn-grid-cell{box-sizing:border-box}#users-container .user-role-row .dnn-grid-cell .actions{float:right;box-sizing:border-box;height:20px;text-align:right}#users-container .user-role-row .dnn-grid-cell .actions>div{text-align:left;float:left}#users-container .user-role-row .dnn-grid-cell .actions span{float:left}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker{height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:0;width:19px;height:19px}#users-container .user-role-row .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon.active{opacity:1}#users-container .user-role-row .dnn-grid-cell .actions span a svg{width:23px;height:23px}#users-container .user-role-row .dnn-grid-cell .actions a{float:left;opacity:0}#users-container .user-role-row .dnn-grid-cell .actions:hover a{display:inline-block}#users-container .user-role-row .dnn-grid-cell .actions div.edit-row a{display:inline-block}#users-container .user-role-row:hover .dnn-grid-cell .actions span .dnn-day-picker .calendar-icon{opacity:1}#users-container .user-role-row:hover .dnn-grid-cell .actions a{opacity:1}",""])},function(e,t,n){var r=n(121);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,'svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}#users-container .userroles-form-form{width:80%;margin:20px 10%;float:left;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list{float:left;width:100%;margin:15px 0;display:table;cursor:auto;box-sizing:border-box;border:1px solid #C8C8C8;text-align:left}#users-container .userroles-form-form .user-roles-list .user-role-body{color:#6F7273}#users-container .userroles-form-form .user-roles-list .user-role-body .no-roles-row{width:100%;float:left;text-align:center;font-weight:bold;padding:13px 20px;box-sizing:border-box}#users-container .userroles-form-form .user-roles-list .user-role-header-row{display:table;border-bottom:1px solid #C8C8C8;width:100%;float:left;position:relative;padding:15px 20px;box-sizing:border-box;text-transform:uppercase}#users-container .userroles-form-form .user-roles-list-paging{text-align:left}#users-container .userroles-form-form .header{width:100%;float:left;box-sizing:border-box}#users-container .userroles-form-form .header .header-title{text-align:left;width:100%;font-weight:bold;display:inline-block;text-transform:uppercase;margin-top:10px;margin-bottom:10px}#users-container .userroles-form-form .header .add-box{width:100%;float:left;box-sizing:border-box;border-bottom:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box .dnn-grid-cell{padding:0px}#users-container .userroles-form-form .header .add-box .send-email-box{width:100%;float:left}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container{float:left;margin-top:10px;margin-right:10px}#users-container .userroles-form-form .header .add-box .send-email-box .dnn-checkbox-container .checkbox{margin-bottom:0px}#users-container .userroles-form-form .header .add-box .send-email-box label{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span{width:100%;display:inline-block;border-left:1px solid #C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox{float:left;width:250px;height:34px;line-height:34px;vertical-align:middle;padding:0;border:none;color:#46292B;border-radius:0;display:inline-block;box-shadow:none;background:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox button{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-webkit-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox :-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox ::-moz-placeholder{color:#C8C8C8;opacity:1}#users-container .userroles-form-form .header .add-box span .rw-combobox :-ms-input-placeholder{color:#C8C8C8}#users-container .userroles-form-form .header .add-box span .rw-combobox input{-webkit-box-shadow:none;padding:0 0 0 12px;height:100%;vertical-align:top;background-color:transparent}#users-container .userroles-form-form .header .add-box span .rw-combobox input::-ms-clear{display:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container{box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup{border-radius:0px;border:1px solid #C8C8C8;box-shadow:none}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list{margin:0;padding:0}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li{padding-left:15px;height:30px;line-height:30px;color:#6F7273;border:none;outline:none;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li:hover{background-color:#EFF0F0;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .rw-combobox .rw-popup-container .rw-popup ul.rw-list li.rw-state-selected{background-color:transparent;color:#1E88C3}#users-container .userroles-form-form .header .add-box span .add-role-button{float:right;text-align:right;width:auto;font-weight:bolder;overflow:hidden;cursor:pointer;box-sizing:border-box;padding-top:10px}#users-container .userroles-form-form .header .add-box span .add-role-button svg{fill:#6F7273}#users-container .userroles-form-form .header .add-box span .add-role-button span{border:none}#users-container .userroles-form-form .header .add-box span .add-role-button .extension-action{float:left}#users-container .userroles-form-form .header .add-box span button[role="secondary"]{vertical-align:middle;margin:0 0 0 10px}',""])},function(e,t,n){(t=e.exports=n(7)(!1)).push([e.i,"._1zcTdybR7GYpSrjF2RU0Bv .dnn-grid-cell{overflow-wrap:break-word}._1zcTdybR7GYpSrjF2RU0Bv .dnn-grid-cell.no-users{float:left;width:100%;text-align:center;padding:10px}",""]),t.locals={usersList:"_1zcTdybR7GYpSrjF2RU0Bv"}},function(e,t,n){var r=n(124);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(8)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"svg{fill:#C8C8C8}svg:hover{fill:#6F7273}svg:active{fill:#1E88C3}.users-filter-container{float:left;box-sizing:border-box;margin-bottom:15px;width:100%;border:none}.users-filter-container .dnn-grid-cell{margin-bottom:5px}.users-filter-container .dnn-grid-cell .user-filters-filter{width:100%;border-right:1px solid #C8C8C8;font-size:13px;font-family:inherit;float:left;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-label{padding-top:4px;padding-left:0}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .dropdown-icon{top:5px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box{width:100%;height:24px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-search-box input{padding:0px 16px}.users-filter-container .dnn-grid-cell .user-filters-filter .dnn-dropdown .collapsible-toggle{width:auto}.users-filter-container .dnn-grid-cell .search-filter{float:left;width:100%}.users-filter-container .dnn-grid-cell .search-filter>div{display:block !important;border-left:1px solid #C8C8C8}.users-filter-container .dnn-grid-cell .search-filter>div input{display:block;width:100%;position:inherit !important;border:none;border-radius:none;background-color:transparent;outline:none;padding-right:45px}",""])},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"users",function(){return X});var o={};n.r(o),n.d(o,"CommonUsersActions",function(){return Y});var a={};n.r(a),n.d(a,"UserTable",function(){return hn}),n.d(a,"FiltersBar",function(){return _n});var i={};n.r(i),n.d(i,"users",function(){return Rn});var s=n(1),l=n.n(s),u=n(0),c=n.n(u),d=n(4),p=n(2),f=n.n(p);n(58);function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var b=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),g(this,y(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,u["Component"]),n=t,(r=[{key:"render",value:function(){return c.a.createElement(f.a,{columnSize:100,className:"header-row"},this.props.headers.map(function(e,t){return c.a.createElement(f.a,{key:"header-row-grid-cell-".concat(t),columnSize:e.size,className:e.header?"":"empty"},c.a.createElement("h6",null,e.header||"Default"))}))}}])&&m(n.prototype,r),o&&m(n,o),t}();b.propTypes={headers:l.a.array.isRequired};var w=b,E=n(45),x=n.n(E);var S=Object.assign({},window.dnn.utility),O=n(46),_=n.n(O);function C(e,t){return e?new Date(e).getFullYear()<1900?"-":_()(e).locale(S.getCulture()).format(!0===t?"LLL":"L"):""}function U(e){return/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)}function R(e,t,n){return n=void 0===n?"asc":n,e=e.sort(function(e,r){return e[t]>r[t]?"asc"===n?1:-1:e[t]<r[t]?"asc"===n?-1:1:0})}function T(e,t){var n=Object.assign([],S.getObjectCopy(e)),r=Object.assign({},S.getObjectCopy(t));if(n.some(function(e){return e.userId===r.userId})&&(n=n.filter(function(e){return e.userId!==r.userId})),!n.some(function(e){return e.userId===r.userId}))return n=(n=[r].concat(n)).sort(function(e,t){var n=e.createdOnDate,r=t.createdOnDate;return n>r?-1:n<r?1:0})}function D(e,t){var n=Object.assign([],S.getObjectCopy(e));return n.some(function(e){return e.userId===t})&&(n=n.filter(function(e){return e.userId!==t})),n}var P=n(47),k=n.n(P);n(28);function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function N(e){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var L=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),M(this,N(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(t,u["Component"]),n=t,(r=[{key:"render",value:function(){return c.a.createElement("ul",{className:"dnn-user-menu menu"},this.props.children)}}])&&j(n.prototype,r),o&&j(n,o),t}();L.propTypes={children:l.a.node};var A=L;function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function H(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function B(e){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function V(e,t){return(V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var q=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=H(this,B(t).call(this))).state={hover:!1},e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&V(e,t)}(t,u["Component"]),n=t,(r=[{key:"render",value:function(){var e=this;return c.a.createElement("li",{className:"dnn-user-menu menu-item",onMouseEnter:function(){return e.setState({hover:!0})},onMouseLeave:function(){return e.setState({hover:!1})},onClick:this.props.onMenuAction},this.props.children)}}])&&W(n.prototype,r),o&&W(n,o),t}();q.propTypes={onMenuAction:l.a.func.isRequired,children:l.a.node.isRequired};var G=q;var K={get:e=>S.getResx("Users",e)},X={RETRIEVED_USERS:"RETRIEVED_USERS",RETRIEVED_USER_DETAILS:"RETRIEVED_USER_DETAILS",CREATE_USER:"CREATE_USER",UPDATE_USER:"UPDATE_USER",DELETE_USER:"DELETE_USER",ERASE_USER:"ERASE_USER",RESTORE_USER:"RESTORE_USER",RETRIEVED_USER_FILTERS:"RETRIEVED_USER_FILTERS",USER_MADE_SUPERUSER:"USER_MADE_SUPERUSER",RETRIEVED_USERS_ROLES:"RETRIEVED_USERS_ROLES",RETRIEVED_SUGGEST_ROLES:"RETRIEVED_SUGGEST_ROLES",SAVE_USER_ROLE:"SAVE_USER_ROLE",REMOVE_USER_ROLE:"REMOVE_USER_ROLE",UPDATE_USER_AUTHORIZE_STATUS:"UPDATE_USER_AUTHORIZE_STATUS",USER_UNLOCKED:"USER_UNLOCKED",RETRIEVED_PASSWORD_STRENGTH_OPTIONS:"RETRIEVED_PASSWORD_STRENGTH_OPTIONS"};function $(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.join("&")}var J=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"getServiceFramework",value:function(e){var t=S.sf;return t.moduleRoot="PersonaBar",t.controller=e,t}},{key:"getUsers",value:function(e,t,n){this.getServiceFramework("Users").get("GetUsers?"+Q(e),{},t,n)}},{key:"getUserDetails",value:function(e,t,n){this.getServiceFramework("Users").get("GetUserDetail?"+Q(e),{},t,n)}},{key:"updateUserBasicInfo",value:function(e,t,n){this.getServiceFramework("Users").post("UpdateUserBasicInfo",e,t,n)}},{key:"getUserFilters",value:function(e,t){this.getServiceFramework("Users").get("GetUserFilters",{},e,t)}},{key:"createUser",value:function(e,t,n){this.getServiceFramework("Users").post("CreateUser",e,t,n)}},{key:"changePassword",value:function(e,t,n){this.getServiceFramework("Users").post("ChangePassword",e,t,n)}},{key:"forceChangePassword",value:function(e,t,n){this.getServiceFramework("Users").post("ForceChangePassword?"+Q(e),null,t,n)}},{key:"sendPasswordResetLink",value:function(e,t,n){this.getServiceFramework("Users").post("SendPasswordResetLink?"+Q(e),null,t,n)}},{key:"deleteUser",value:function(e,t,n){this.getServiceFramework("Users").post("SoftDeleteUser?"+Q(e),null,t,n)}},{key:"hardDeleteUser",value:function(e,t,n){this.getServiceFramework("Users").post("HardDeleteUser?"+Q(e),null,t,n)}},{key:"restoreUser",value:function(e,t,n){this.getServiceFramework("Users").post("RestoreDeletedUser?"+Q(e),null,t,n)}},{key:"updateSuperUserStatus",value:function(e,t,n){this.getServiceFramework("Users").post("UpdateSuperUserStatus?"+Q(e),null,t,n)}},{key:"updateAuthorizeStatus",value:function(e,t,n){this.getServiceFramework("Users").post("UpdateAuthorizeStatus?"+Q(e),null,t,n)}},{key:"unlockUser",value:function(e,t,n){this.getServiceFramework("Users").post("UnlockUser?"+Q(e),null,t,n)}},{key:"getUserRoles",value:function(e,t,n){this.getServiceFramework("Users").get("GetUserRoles?"+Q(e),{},t,n)}},{key:"getSuggestRoles",value:function(e,t,n){this.getServiceFramework("Users").get("GetSuggestRoles?"+Q(e),{},t,n)}},{key:"saveUserRole",value:function(e,t,n,r,o){this.getServiceFramework("Users").post("SaveUserRole?notifyUser="+t+"&isOwner="+n,e,r,o)}},{key:"removeUserRole",value:function(e,t,n){this.getServiceFramework("Users").post("RemoveUserRole",e,t,n)}},{key:"passwordStrengthOptions",value:function(e,t){this.getServiceFramework("Users").get("PasswordStrengthOptions",{},e,t)}}])&&$(t.prototype,n),r&&$(t,r),e}());function Z(e){S.notifyError(JSON.parse(e.responseText).Message,5e3)}var Y={getUsers:function(e,t){return function(n){J.getUsers(e,function(e){n({type:X.RETRIEVED_USERS,payload:e}),t&&t(e)},Z)}},getUserDetails:function(e,t){return function(n){J.getUserDetails(e,function(e){n({type:X.RETRIEVED_USER_DETAILS,payload:e}),t&&t(e)},Z)}},getUserFilters:function(e){return function(){J.getUserFilters(function(t){e&&e(t)},Z)}},createUser:function(e,t,n){return function(r){J.createUser(e,function(e){r({type:X.CREATE_USER,payload:e,filter:t}),n&&n(e)},Z)}},updateUserBasicInfo:function(e,t){return function(n){J.updateUserBasicInfo(e,function(e){n({type:X.UPDATE_USER,payload:e}),t&&t(e)},Z)}},changePassword:function(e,t){return function(){J.changePassword(e,function(e){t&&t(e)},Z)}},forceChangePassword:function(e,t){return function(){J.forceChangePassword(e,function(e){t&&t(e)},Z)}},sendPasswordResetLink:function(e,t){return function(){J.sendPasswordResetLink(e,function(e){t&&t(e)},Z)}},deleteUser:function(e,t,n){return function(r){var o=Object.assign({},e.userDetails);o.isDeleted=!0,J.deleteUser({userId:e.userDetails.userId},function(e){r({type:X.DELETE_USER,payload:o,filter:t}),n&&n(e)},Z)}},eraseUser:function(e,t){return function(n){J.hardDeleteUser(e,function(r){n({type:X.ERASE_USER,payload:{userId:e.userId}}),t&&t(r)},Z)}},restoreUser:function(e,t,n){return function(r){var o=Object.assign({},e.userDetails);o.isDeleted=!1,J.restoreUser({userId:e.userDetails.userId},function(e){r({type:X.RESTORE_USER,payload:o,filter:t}),n&&n(e)},Z)}},updateSuperUserStatus:function(e,t,n){return function(r){J.updateSuperUserStatus(e,function(o){r({type:X.USER_MADE_SUPERUSER,payload:{userId:e.userId,setSuperUser:e.setSuperUser},filter:t}),n&&n(o)},Z)}},updateAuthorizeStatus:function(e,t,n,r){return function(o){var a=Object.assign({},e.userDetails);a.authorized=t,J.updateAuthorizeStatus({userId:e.userDetails.userId,authorized:t},function(e){o({type:X.UPDATE_USER_AUTHORIZE_STATUS,payload:a,filter:n}),r&&r(e)},Z)}},unLockUser:function(e,t){return function(n){var r=Object.assign({},e.userDetails);J.unlockUser({userId:e.userDetails.userId},function(e){n({type:X.USER_UNLOCKED,payload:r}),t&&t(e)},Z)}},getUserRoles:function(e,t){return function(n){J.getUserRoles(e,function(e){n({type:X.RETRIEVED_USERS_ROLES,payload:e}),t&&t(e)},Z)}},passwordStrength:function(){return function(e){J.passwordStrengthOptions(function(t){e({type:X.RETRIEVED_PASSWORD_STRENGTH_OPTIONS,payload:t})})}},getSuggestRoles:function(e,t){return function(n){J.getSuggestRoles(e,function(e){n({type:X.RETRIEVED_SUGGEST_ROLES,payload:{matchedRoles:e}}),t&&t(e)},Z)}},saveUserRole:function(e,t,n,r){return function(o){J.saveUserRole(e,t,n,function(e){o({type:X.SAVE_USER_ROLE,payload:e}),r&&r(e)},Z)}},removeUserRole:function(e,t){return function(n){J.removeUserRole(e,function(r){n({type:X.REMOVE_USER_ROLE,payload:{userId:e.userId,roleId:e.roleId}}),t&&t(r)},Z)}}},ee=n(5),te=n.n(ee),ne=n(6),re=n.n(ne),oe=n(10),ae=n.n(oe);n(63);function ie(e){return(ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function le(e,t){return!t||"object"!==ie(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ue(e){return(ue=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ce(e,t){return(ce=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var de={width:"100%"},pe={userId:0,password:""},fe=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=le(this,ue(t).call(this,e))).state={changePassword:Object.assign({},pe),errors:{password:!1,confirmPassword:!1,passwordsMatch:!1},confirmPassword:""},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ce(e,t)}(t,u["Component"]),n=t,(r=[{key:"componentWillMount",value:function(){var e=this.state.changePassword;e.userId=this.props.userId,e.password="",this.setState({changePassword:e})}},{key:"componentWillReceiveProps",value:function(e){var t=this;this.clear(function(){var n=t.state.changePassword;n.userId=e.userId,t.setState({changePassword:n})})}},{key:"onChange",value:function(e,t){var n=this;if("confirmPassword"===e)this.setState({confirmPassword:t.target.value},function(){n.validateForm()});else{var r=this.state.changePassword;r[e]=t.target.value,this.setState({changePassword:r},function(){n.validateForm()})}}},{key:"save",value:function(){var e=this;this.validateForm()&&this.props.dispatch(Y.changePassword(this.state.changePassword,function(){e.cancel(),S.notify(K.get("ChangeSuccessful"),3e3)}))}},{key:"validateForm",value:function(){var e=!0,t=this.state.errors;t.password=!1,t.confirmPassword=!1,t.passwordsMatch=!1;var n=this.state.changePassword,r=this.state.confirmPassword;return""===n.password&&(t.password=!0,e=!1),""===n.confirmPassword?(t.confirmPassword=!0,e=!1):r!==n.password&&(t.passwordsMatch=!0,e=!1),this.setState({errors:t}),e}},{key:"clear",value:function(e){this.setState({changePassword:Object.assign({},pe),confirmPassword:"",errors:{password:!1,confirmPassword:!1,passwordsMatch:!1}},function(){"function"==typeof e&&e()})}},{key:"cancel",value:function(){this.clear(),"function"==typeof this.props.onCancel&&this.props.onCancel()}},{key:"render",value:function(){var e=this.state;return this.props.visible&&c.a.createElement("div",{className:"dnn-user-change-password"},c.a.createElement(f.a,{className:"do-not-close"},c.a.createElement(f.a,null,c.a.createElement("div",{className:"title"},K.get("ChangePassword")),c.a.createElement(re.a,{label:K.get("NewPassword"),error:e.errors.password,onChange:this.onChange.bind(this,"password"),tooltipMessage:K.get("NewPassword.Help"),errorMessage:K.get("NewPassword.Required"),style:de,type:"password",autoComplete:"off",inputStyle:{marginBottom:15},value:e.changePassword.password}),c.a.createElement(re.a,{label:K.get("NewConfirm"),error:e.errors.confirmPassword||e.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:K.get("NewConfirm.Help"),errorMessage:e.errors.confirmPassword?K.get("NewConfirm.Required"):K.get("NewConfirmMismatch.ErrorMessage"),style:de,type:"password",inputStyle:{marginBottom:15},autoComplete:"off",value:e.confirmPassword})),c.a.createElement(te.a,null,c.a.createElement(ae.a,{className:"right do-not-close",id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this)},K.get("btnCancel")),c.a.createElement(ae.a,{id:"confirmbtn do-not-close",type:"primary",onClick:this.save.bind(this)},K.get("btnApply")))))}}])&&se(n.prototype,r),o&&se(n,o),t}();fe.propTypes={dispatch:l.a.func.isRequired,userId:l.a.array.isRequired,visible:l.a.bool,onCancel:l.a.func},fe.defaultProps={visible:!0};var he=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(fe);n(65);function me(e,t){return!t.isSuperUser&&(e.isAdmin||e.permissions.MANAGE_ROLES)}function ge(e){return e.isAdmin||e.permissions.MANAGE_PROFILE}function ye(e){return e.isAdmin||e.permissions.VIEW_SETTINGS}function ve(e,t){return e.isAdmin||e.permissions.MANAGE_PASSWORD}function be(e){return e.isAdmin||e.permissions.EDIT_SETTINGS}function we(e){return(we="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ee(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xe(e){return(xe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Se(e,t){return(Se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Oe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var _e=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(o=xe(t).call(this,e))||"object"!==we(o)&&"function"!=typeof o?Oe(r):o).state={userDetails:e.userDetails,ChangePasswordVisible:!1},n.showMenu=!1,n.handleClick=n.handleClick.bind(Oe(Oe(n))),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Se(e,t)}(t,u["Component"]),n=t,(r=[{key:"handleClick",value:function(e){("string"!=typeof e.target.className||"string"==typeof e.target.className&&-1===e.target.className.indexOf("menu-item"))&&this.props.onClose()}},{key:"componentWillMount",value:function(){document.addEventListener("click",this.handleClick,!1);var e=this.props;void 0===e.userDetails||e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}},{key:"componentWillReceiveProps",value:function(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?(this.showMenu=!1,this.getUserDetails(e)):this.showMenu=!0}},{key:"getUserDetails",value:function(e){var t=this;e.dispatch(Y.getUserDetails({userId:e.userId},function(e){var n=Object.assign({},e);t.setState({userDetails:n},function(){t.showMenu=!0})}))}},{key:"reload",value:function(){this.getUserDetails(this.props)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleClick,!1)}},{key:"sort",value:function(e,t,n){return n=void 0===n?"asc":n,e=e.sort(function(e,r){return e[t]>r[t]?"asc"===n?1:-1:e[t]<r[t]?"asc"===n?-1:1:0})}},{key:"onItemClick",value:function(e){switch(e){case"ResetPassword":this.onSendPasswordLink(),this.props.onClose();break;case"ChangePassword":this.toggleChangePassword();break;case"ForceChangePassword":this.forcePasswordChange(),this.props.onClose();break;case"DeleteUser":this.deleteUser(),this.props.onClose();break;case"RemoveUser":this.hardDeleteUser(),this.props.onClose();break;case"RestoreUser":this.restoreUser(),this.props.onClose();break;case"cmdUnAuthorize":this.updateAuthorizeStatus(!1),this.props.onClose();break;case"cmdAuthorize":this.updateAuthorizeStatus(!0),this.props.onClose();break;case"cmdUnLock":this.unLockUser(),this.props.onClose();break;case"PromoteToSuperUser":this.updateSuperUserStatus(!0),this.props.onClose();break;case"DemoteToRegularUser":this.updateSuperUserStatus(!1),this.props.onClose();break;case"ViewProfile":this.onViewProfile(),this.props.onClose();break;default:"function"==typeof this.props.userMenuAction&&this.props.userMenuAction(e,this.state.userDetails),this.props.onClose()}}},{key:"onViewProfile",value:function(){var e=this;S.closePersonaBar(function(){window.top.location=e.state.userDetails.profileUrl})}},{key:"onSendPasswordLink",value:function(){this.props.dispatch(Y.sendPasswordResetLink({userId:this.props.userId},function(){S.notify(K.get("PasswordSent"),1e4)}))}},{key:"deleteUser",value:function(){var e=this;S.confirm(K.get("DeleteUser.Confirm"),K.get("Delete"),K.get("Cancel"),function(){e.props.dispatch(Y.deleteUser({userDetails:e.props.userDetails},e.props.filter,function(){S.notify(K.get("UserDeleted"),3e3),e.reload()}))})}},{key:"hardDeleteUser",value:function(){var e=this;S.confirm(K.get("RemoveUser.Confirm"),K.get("Delete"),K.get("Cancel"),function(){e.props.dispatch(Y.eraseUser({userId:e.props.userId}))})}},{key:"restoreUser",value:function(){var e=this;this.props.dispatch(Y.restoreUser({userDetails:this.props.userDetails},this.props.filter,function(){S.notify(K.get("UserRestored"),3e3),e.reload()}))}},{key:"forcePasswordChange",value:function(){var e=this;this.props.dispatch(Y.forceChangePassword({userId:this.props.userId},function(){S.notify(K.get("UserPasswordUpdateChanged"),1e4),e.reload()}))}},{key:"updateAuthorizeStatus",value:function(e){var t=this;this.props.dispatch(Y.updateAuthorizeStatus({userDetails:this.props.userDetails},e,this.props.filter,function(){S.notify(e?K.get("UserAuthorized"):K.get("UserUnAuthorized"),3e3),t.reload()}))}},{key:"unLockUser",value:function(){var e=this;this.props.dispatch(Y.unLockUser({userDetails:this.props.userDetails},function(){S.notify(K.get("UserUnLocked"),3e3),e.reload()}))}},{key:"updateSuperUserStatus",value:function(e){var t=this;this.props.dispatch(Y.updateSuperUserStatus({userId:this.props.userId,setSuperUser:e},this.props.filter,function(){t.reload()}))}},{key:"toggleChangePassword",value:function(e){var t=!this.state.ChangePasswordVisible;this.setState({ChangePasswordVisible:t}),e&&this.props.onClose()}},{key:"render",value:function(){var e,t,n=this,r=[{key:"ViewProfile",title:K.get("ViewProfile"),index:10}];return e=this.props.appSettings.applicationSettings.settings,t=this.state.userDetails.userId,e.isHost&&t!==e.userId&&(this.state.userDetails.isSuperUser?this.state.userDetails.isSuperUser&&(r=[{key:"DemoteToRegularUser",title:K.get("DemoteToRegularUser"),index:80}].concat(r)):r=[{key:"PromoteToSuperUser",title:K.get("PromoteToSuperUser"),index:80}].concat(r)),ve(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(r=[{key:"ResetPassword",title:K.get("ResetPassword"),index:40}].concat(r),r=[{key:"ChangePassword",title:K.get("ChangePassword"),index:30}].concat(r),this.state.userDetails.needUpdatePassword||(r=[{key:"ForceChangePassword",title:K.get("ForceChangePassword"),index:40}].concat(r))),function(e,t){return(e.isAdmin||e.permissions.DELETE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(this.state.userDetails.isDeleted?(r=[{key:"RestoreUser",title:K.get("RestoreUser"),index:70}].concat(r),r=[{key:"RemoveUser",title:K.get("RemoveUser"),index:60}].concat(r)):r=[{key:"DeleteUser",title:K.get("DeleteUser"),index:60}].concat(r)),function(e,t){return(e.isAdmin||e.permissions.AUTHORIZE_UNAUTHORIZE_USER)&&t!==e.userId}(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&(r=this.state.userDetails.authorized?[{key:"cmdUnAuthorize",title:K.get("cmdUnAuthorize"),index:50}].concat(r):[{key:"cmdAuthorize",title:K.get("cmdAuthorize"),index:50}].concat(r),this.state.userDetails.isLocked&&(r=[{key:"cmdUnLock",title:K.get("cmUnlockUser"),index:100}].concat(r))),r=r.concat(this.props.getUserMenu&&this.props.getUserMenu(this.state.userDetails)||[]),r=this.sort(r,"index"),this.showMenu?c.a.createElement(f.a,{className:"dnn-user-menu menu-popup",ref:function(e){return n.rootElement=e}},!this.state.ChangePasswordVisible&&c.a.createElement(A,null,r.map(function(e,t){return c.a.createElement(G,{key:"menu_item_".concat(t),onMenuAction:n.onItemClick.bind(n,e.key)},e.title)})),this.state.ChangePasswordVisible&&c.a.createElement(he,{onCancel:this.toggleChangePassword.bind(this,!0),userId:this.props.userId})):c.a.createElement("div",null)}}])&&Ee(n.prototype,r),o&&Ee(n,o),t}();_e.propTypes={dispatch:l.a.func.isRequired,userId:l.a.number.isRequired,onClose:l.a.func.isRequired,userDetails:l.a.object,getUserMenu:l.a.func.isRequired,userMenuAction:l.a.func.isRequired,appSettings:l.a.object,filter:l.a.number};var Ce=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(_e),Ue=n(11),Re=[{index:5,size:30},{index:10,size:30},{index:15,size:20},{index:25,size:20}],Te=n(25),De=n.n(Te);function Pe(e){return(Pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ke(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ie(e){return(Ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function je(e,t){return(je=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Me(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ne=function(e){function t(){var e,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(e=!(r=Ie(t).call(this))||"object"!==Pe(r)&&"function"!=typeof r?Me(n):r).handleClick=e.handleClick.bind(Me(Me(e))),e.state={opened:!1,showMenu:!1},e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&je(e,t)}(t,u["Component"]),n=t,(r=[{key:"componentDidMount",value:function(){document.addEventListener("click",this.handleClick),this._isMounted=!0}},{key:"componentWillUnmount",value:function(){document.removeEventListener("click",this.handleClick),this._isMounted=!1}},{key:"componentWillMount",value:function(){var e=""!==this.props.openId&&this.props.id===this.props.openId;this.setState({opened:e})}},{key:"handleClick",value:function(e){this._isMounted&&"string"==typeof e.target.className&&-1===e.target.className.indexOf("do-not-close")&&"confirmbtn"!==e.target.id&&"cancelbtn"!==e.target.id&&"add"!==this.props.openId&&""!==this.props.openId&&this.props.id===this.props.openId&&this.props.Collapse()}},{key:"toggle",value:function(e){""!==this.props.openId&&this.props.id===this.props.openId&&this.props.currentIndex===e?this.props.Collapse():this.props.OpenCollapse(this.props.id,e)}},{key:"toggleUserMenu",value:function(){var e=!this.state.showMenu;this.setState({showMenu:e})}},{key:"getUserActions",value:function(e,t){var n=this,r=[];r=r.concat(this.props.getUserTabsIcons&&this.props.getUserTabsIcons(e)||[]),ge(this.props.appSettings.applicationSettings.settings)&&(r=r.concat([{index:15,icon:Ue.UserIcon,title:K.get("ManageProfile.title")}])),ye(this.props.appSettings.applicationSettings.settings)&&(r=r.concat([{index:10,icon:Ue.SettingsIcon,title:K.get("ManageSettings.title")}])),me(this.props.appSettings.applicationSettings.settings,e)&&(r=r.concat([{index:5,icon:Ue.ShieldIcon,title:K.get("ManageRoles.title")}]));var o=0,a=R(r,"index","desc").map(function(e){var r=c.a.createElement("div",{key:"user_action_".concat(o),title:e.title,className:"extension-action "+!(t&&n.props.currentIndex===o),dangerouslySetInnerHTML:{__html:e.icon},onClick:n.toggle.bind(n,o)});return o++,r});return[c.a.createElement("div",{key:"user_action_wrapper_".concat(e.userId),style:{position:"relative"}},c.a.createElement("div",{className:"extension-action "+!this.state.showMenu,dangerouslySetInnerHTML:{__html:Ue.MoreMenuIcon},onClick:this.toggleUserMenu.bind(this)}),this.state.showMenu&&c.a.createElement(Ce,{filter:this.props.filter,appSettings:this.props.appSettings,getUserMenu:this.props.getUserMenu&&this.props.getUserMenu.bind(this),userMenuAction:this.props.userMenuAction&&this.props.userMenuAction.bind(this),onClose:this.toggleUserMenu.bind(this),userId:e.userId}))].concat(a)}},{key:"getUserColumns",value:function(e,t,n){var r=this.getUserActions(e,n),o=this.props.getUserColumns&&this.props.getUserColumns(e),a=void 0!==this.props.columnSizes?this.props.columnSizes:Re;return R([{index:5,content:c.a.createElement(f.a,{columnSize:a.find(function(e){return 5===e.index}).size,className:"user-names"+(e.isDeleted?" deleted":"")},c.a.createElement("h6",null,c.a.createElement(De.a,{className:"email-link",text:e.displayName,maxWidth:125})),"-"!==e.displayName&&c.a.createElement("p",null,e.userName))},{index:10,content:c.a.createElement(f.a,{columnSize:a.find(function(e){return 10===e.index}).size,className:"user-emails"+(e.isDeleted?" deleted":"")},c.a.createElement(De.a,{className:"email-link",isAnchor:!0,href:"mailto:"+e.email,text:e.email,maxWidth:125}))},{index:15,content:c.a.createElement(f.a,{columnSize:a.find(function(e){return 15===e.index}).size,className:"user-joined"+(e.isDeleted?" deleted":"")},"-"!==e.createdOnDate&&c.a.createElement("p",null,C(e.createdOnDate)),"-"===e.createdOnDate&&e.createdOnDate)},{index:25,content:"add"!==t&&c.a.createElement(f.a,{columnSize:a.find(function(e){return 25===e.index}).size,style:{float:"right",textAlign:"right",paddingRight:2}},r)}].concat(o||[]),"index").map(function(e){return e.content})}},{key:"render",value:function(){var e=this,t=this.props,n=this.props.user,r=""!==t.openId&&t.id===t.openId,o="userRow-"+Math.random()+Date.now();void 0===n&&(n={avatar:"-",displayName:"-",userName:"-",email:"-",createdOnDate:"-",authorized:"-"});var a=this.getUserColumns(n,t.id,r);return c.a.createElement(f.a,{className:"collapsible-component-users",id:o,ref:function(t){return e.rootElement=t}},c.a.createElement(f.a,{className:"collapsible-header-users "+!r},c.a.createElement(f.a,{className:x.a.extensionDetailRow+" "+t.addIsOpened,columnSize:100},(!t.addIsOpened||"add-opened"===t.addIsOpened)&&c.a.createElement(f.a,null,a),c.a.createElement(k.a,{accordion:!0,isOpened:r,keepCollapsedContent:!0,className:"user-detail-row"},r&&t.children))))}}])&&ke(n.prototype,r),o&&ke(n,o),t}();Ne.propTypes={user:l.a.object,OpenCollapse:l.a.func,Collapse:l.a.func,id:l.a.string,openId:l.a.string,currentIndex:l.a.number,getUserTabsIcons:l.a.func,getUserColumns:l.a.func,getUserMenu:l.a.func.isRequired,userMenuAction:l.a.func.isRequired,appSettings:l.a.object,columnSizes:l.a.array,filter:l.a.number},Ne.defaultProps={isEvoq:!1};var Fe=Ne;n(67);function Le(e){return(Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ze(e,t){return!t||"object"!==Le(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function We(e){return(We=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function He(e,t){return(He=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Be=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ze(this,We(t).call(this))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&He(e,t)}(t,u["Component"]),n=t,(r=[{key:"render",value:function(){var e=this.props;return e.renderIndex>=0&&e.children[e.renderIndex]}}])&&Ae(n.prototype,r),o&&Ae(n,o),t}();Be.propTypes={renderIndex:l.a.number,children:l.a.array},Be.defaultProps={renderIndex:0};var Ve=Be,qe=n(26),Ge=n.n(qe),Ke=n(14),Xe=n.n(Ke),$e=n(48),Qe=n.n($e);const Je="weak",Ze="fair",Ye="strong",et=(e,t)=>{if(null==t)return null;let n=tt(e,t);return e.length<=2?null:n.rating<3?Je:n.rating<5?Ze:n.rating>=5?Ye:void 0},tt=(e,t)=>{let n=0,r=t.minLength,o=!1,a=!1,i=!1,s=!1,l=!1,u=!1,c=t.minNumberOfSpecialChars||0,d=t.validationExpression||"";if(e.length>0){e.match(/[a-z]/)&&(n++,a=!0),e.match(/[A-Z]/)&&(n++,o=!0),e.match(/[0-9]/g)&&(n++,s=!0);let t=e.match(/[!,@,#,$,%,&,*,(,),\-,_,=,+,\',\",\\,|,\,,<,.,>,;,:,\/,?,\[,{,\],}]/g);t&&t.length>=c&&(n++,i=!0),e.length>=r&&(n++,l=!0),e.length>=r+3&&n++,d&&(u=new RegExp(d,"g").test(e))}return{rating:n,maxRating:5,hasOneUpperCaseChar:o,hasOneLowerCaseChar:a,hasMinNumberOfSpecialChars:i,hasOneNumericChar:s,hasLengthOfNChars:l,matchValidationExpression:u}};n(70);function nt(e){return(nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function rt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ot(e,t){return!t||"object"!==nt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function at(e){return(at=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function it(e,t){return(it=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var st=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ot(this,at(t).call(this,e))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&it(e,t)}(t,u["Component"]),n=t,(r=[{key:"componentDidMount",value:function(){this.props.loadPasswordStrengthOptions()}},{key:"render",value:function(){return c.a.createElement("div",null,c.a.createElement(re.a,{label:K.get("Password"),error:this.props.error.password,onChange:this.props.onChangePassword,tooltipMessage:K.get("Password.Help"),errorMessage:K.get("Password.Required"),style:this.props.style,inputStyle:this.props.requiresQuestionAndAnswer?{marginBottom:0}:{marginBottom:15},type:"password",autoComplete:"off",value:this.props.UserDetails.password,tabIndex:7}),c.a.createElement("div",{id:"passwordStrengthBar",className:"passwordStrength "+et(this.props.UserDetails.password,this.props.passwordStrengthOptions)}),c.a.createElement("div",{id:"passwordStrengthLabel",className:"passwordStrengthLabel "+et(this.props.UserDetails.password,this.props.passwordStrengthOptions)},et(this.props.UserDetails.password,this.props.passwordStrengthOptions)))}}])&&rt(n.prototype,r),o&&rt(n,o),t}();st.propTypes={error:l.a.object,style:l.a.object.isRequired,UserDetails:l.a.object.isRequired,requiresQuestionAndAnswer:l.a.bool.isRequired,onChangePassword:l.a.func.isRequired,passwordStrengthOptions:l.a.object,loadPasswordStrengthOptions:l.a.func};var lt=Object(d.connect)(function(e){return{passwordStrengthOptions:e.users.passwordStrengthOptions}},function(e){return{loadPasswordStrengthOptions:function(){e(Y.passwordStrength())}}})(st);function ut(e){return(ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ct(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){dt(e,t,n[t])})}return e}function dt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function pt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ft(e,t){return!t||"object"!==ut(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function ht(e){return(ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mt(e,t){return(mt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var gt={width:"100%"},yt={firstName:"",lastName:"",email:"",userName:"",password:"",question:"",answer:"",randomPassword:!1,authorize:!0,notify:!1},vt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=ft(this,ht(t).call(this,e))).state={UserDetails:Object.assign({},yt),confirmPassword:"",errors:{firstName:!1,lastName:!1,userName:!1,email:!1,password:!1,confirmPassword:!1,passwordsMatch:!1,question:!1,answer:!1}},n.submitted=!1,n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mt(e,t)}(t,u["Component"]),n=t,(r=[{key:"onChangePassword",value:function(e){this.setState({UserDetails:ct({},this.state.UserDetails,{password:e.target.value}),errors:ct({},this.state.errors,{password:!1})})}},{key:"onChange",value:function(e,t){var n=this,r=this.state.UserDetails;if("randomPassword"===e||"authorize"===e||"notify"===e)r[e]=t;else if("confirmPassword"===e){var o=this.state.confirmPassword;o=t.target.value,this.setState({confirmPassword:o})}else r[e]=t.target.value;this.setState({},function(){n.validateForm()})}},{key:"save",value:function(){var e=this;this.submitted=!0,this.validateForm()&&this.props.save(Y.createUser(this.state.UserDetails,this.props.filter,function(){e.cancel(),S.notify(K.get("UserCreated"),3e3)}))}},{key:"clearForm",value:function(e){var t=this.state.UserDetails;t=Object.assign({},yt);var n=this.state.errors;n.firstName=!1,n.lastName=!1,n.userName=!1,n.email=!1,n.password=!1,n.confirmPassword=!1,n.passwordsMatch=!1,n.question=!1,n.answer=!1,this.submitted=!1,this.setState({UserDetails:t,errors:n,confirmPassword:""},function(){"function"==typeof e&&e()})}},{key:"cancel",value:function(){var e=this;this.clearForm(function(){e.props.onCancel()})}},{key:"validateForm",value:function(){var e=!0,t=this.props.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;if(this.submitted){var n=this.state.UserDetails,r=this.state.errors;r.firstName=!1,r.lastName=!1,r.userName=!1,r.email=!1,r.password=!1,r.confirmPassword=!1,r.passwordsMatch=!1,r.question=!1,r.answer=!1,""===n.firstName&&(r.firstName=!0,e=!1),""===n.lastName&&(r.lastName=!0,e=!1),""===n.userName&&(r.userName=!0,e=!1),""!==n.email&&U(n.email)||(r.email=!0,e=!1),!1===n.randomPassword&&""===n.password&&(r.password=!0,e=!1),!1===n.randomPassword&&""===this.state.confirmPassword?(r.confirmPassword=!0,e=!1):!1===n.randomPassword&&this.state.confirmPassword!==n.password&&(r.passwordsMatch=!0,e=!1),t&&(""===n.question&&(r.question=!0,e=!1),""===n.answer&&(r.answer=!0,e=!1)),this.setState({errors:r})}return e}},{key:"render",value:function(){var e=this.props,t=this.state,n=e.appSettings.applicationSettings.settings.requiresQuestionAndAnswer;return c.a.createElement(f.a,{className:Qe.a.newExtensionModal,style:e.style},c.a.createElement(f.a,{className:"new-user-box"},c.a.createElement(te.a,{className:"with-right-border top-half"},c.a.createElement("div",null,c.a.createElement(re.a,{value:t.UserDetails.firstName,error:t.errors.firstName,onChange:this.onChange.bind(this,"firstName"),label:K.get("FirstName"),tooltipMessage:K.get("FirstName.Help"),errorMessage:K.get("FirstName.Required"),style:gt,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:1}),c.a.createElement(re.a,{value:t.UserDetails.userName,error:t.errors.userName,onChange:this.onChange.bind(this,"userName"),label:K.get("Username"),tooltipMessage:K.get("Username.Help"),errorMessage:K.get("Username.Required"),style:gt,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:3}),c.a.createElement(Ge.a,{value:t.UserDetails.authorize,label:K.get("Approved"),title:K.get("Approved.Help"),onChange:this.onChange.bind(this,"authorize"),tabIndex:5,onText:K.get("SwitchOn"),offText:K.get("SwitchOff")})),c.a.createElement("div",null,c.a.createElement(re.a,{value:t.UserDetails.lastName,error:t.errors.lastName,onChange:this.onChange.bind(this,"lastName"),label:K.get("LastName"),tooltipMessage:K.get("LastName.Help"),errorMessage:K.get("LastName.Required"),style:gt,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:2}),c.a.createElement(re.a,{value:t.UserDetails.email,error:t.errors.email,onChange:this.onChange.bind(this,"email"),label:K.get("Email"),tooltipMessage:K.get("Email.Help"),errorMessage:K.get("Email.Required"),style:gt,autoComplete:"off",inputStyle:{marginBottom:25},tabIndex:4}),c.a.createElement(Ge.a,{value:t.UserDetails.randomPassword,title:K.get("Random.Help"),label:K.get("Random")+":",onChange:this.onChange.bind(this,"randomPassword"),tabIndex:6,onText:K.get("SwitchOn"),offText:K.get("SwitchOff")}))),!t.UserDetails.randomPassword&&c.a.createElement(f.a,null,c.a.createElement("hr",null)),!t.UserDetails.randomPassword&&c.a.createElement(te.a,null,c.a.createElement(lt,{error:t.errors,onChangePassword:this.onChangePassword.bind(this),style:gt,inputStyle:n?{marginBottom:0}:{marginBottom:15},UserDetails:this.state.UserDetails}),c.a.createElement(re.a,{label:K.get("Confirm"),error:t.errors.confirmPassword||t.errors.passwordsMatch,onChange:this.onChange.bind(this,"confirmPassword"),tooltipMessage:K.get("Confirm.Help"),errorMessage:t.errors.confirmPassword?K.get("Confirm.Required"):K.get("ConfirmMismatch.ErrorMessage"),style:gt,type:"password",autoComplete:"off",inputStyle:n?{marginBottom:0}:{marginBottom:15},value:t.confirmPassword,tabIndex:8})),n&&c.a.createElement(te.a,null,c.a.createElement("div",null,c.a.createElement(re.a,{label:K.get("Question"),error:t.errors.question,onChange:this.onChange.bind(this,"question"),tooltipMessage:K.get("Question.Help"),errorMessage:K.get("Question.Required"),style:gt,inputStyle:{marginBottom:15},autoComplete:"off",value:t.UserDetails.question,tabIndex:9})),c.a.createElement("div",null,c.a.createElement(re.a,{label:K.get("Answer"),error:t.errors.answer,onChange:this.onChange.bind(this,"answer"),tooltipMessage:K.get("Answer.Help"),errorMessage:K.get("Answer.Required"),style:gt,autoComplete:"off",inputStyle:{marginBottom:15},value:t.UserDetails.answer,tabIndex:10}))),c.a.createElement(f.a,{columnSize:100,className:"email-notification-line"},c.a.createElement(Xe.a,{value:t.UserDetails.notify,label:K.get("Notify"),onChange:this.onChange.bind(this,"notify"),tabIndex:9})),c.a.createElement(f.a,{columnSize:100,className:"modal-footer"},c.a.createElement(ae.a,{id:"cancelbtn",type:"secondary",onClick:this.cancel.bind(this),tabIndex:10},K.get("btnCancel")),c.a.createElement(ae.a,{id:"confirmbtn",type:"primary",onClick:this.save.bind(this),tabIndex:11},K.get("btnSave")))))}}])&&pt(n.prototype,r),o&&pt(n,o),t}();vt.propTypes={save:l.a.func.isRequired,onCancel:l.a.func.isRequired,style:l.a.object,filter:l.a.number,appSettings:l.a.object};var bt=Object(d.connect)(function(){},function(e){return{save:function(t){e(t)}}})(vt),wt=n(49),Et=n.n(wt);function xt(e){return(xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function St(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ot(e,t){return!t||"object"!==xt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _t(e){return(_t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ct(e,t){return(Ct=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ut={width:"100%"},Rt={userId:0,displayName:"",userName:"",email:""},Tt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Ot(this,_t(t).call(this,e))).state={accountSettings:Object.assign(Rt),userDetails:e.userDetails,errors:{displayName:!1,userName:!1,loading:!1,email:!1},ChangePasswordVisible:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ct(e,t)}(t,u["Component"]),n=t,(r=[{key:"componentWillMount",value:function(){var e=this.props;void 0===e.userDetails||e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}},{key:"componentWillReceiveProps",value:function(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId?this.getUserDetails(e,e.userId):this.updateUserDetailsState(e.userDetails)}},{key:"makeBlankObj",value:function(e){var t=Object.assign({},e);return Object.keys(t).forEach(function(e){return t[e]=""}),t}},{key:"getUserDetails",value:function(e,t){var n=this,r=this.makeBlankObj(this.state.accountSettings),o=this.makeBlankObj(this.state.userDetails);this.setState({accountSettings:r,userDetails:o,loading:!0}),e.dispatch(Y.getUserDetails({userId:t},function(e){n.updateUserDetailsState(e)}))}},{key:"updateUserDetailsState",value:function(e){var t=Object.assign({},e),n=this.state.accountSettings;n.displayName=t.displayName,n.userName=t.userName,n.email=t.email,n.userId=t.userId,this.setState({accountSettings:n,userDetails:t,loading:!1})}},{key:"onChange",value:function(e,t){var n=this;if(!this.state.loading){var r=this.state.accountSettings;r[e]=t.target.value,this.setState({accountSettings:r},function(){n.validateForm(!0)})}}},{key:"save",value:function(){var e=this;this.validateForm()&&this.props.dispatch(Y.updateUserBasicInfo(this.state.accountSettings,function(){S.notify(K.get("UserUpdated"),3e3),e.getUserDetails(e.props,e.state.accountSettings.userId),e.props.collapse()}))}},{key:"validateForm",value:function(){var e=!0,t=this.state.errors;t.displayName=!1,t.userName=!1,t.email=!1;var n=this.state.accountSettings;return""===n.displayName&&(t.displayName=!0,e=!1),""===n.userName&&(t.userName=!0,e=!1),""!==n.email&&U(n.email)||(t.email=!0,e=!1),this.setState({errors:t}),e}},{key:"onCancelPassword",value:function(){this.setState({ChangePasswordVisible:!1})}},{key:"onChangePassword",value:function(){this.state.loading||this.setState({ChangePasswordVisible:!0})}},{key:"onForcePasswordChange",value:function(){var e=this;this.state.loading||this.props.dispatch(Y.forceChangePassword({userId:this.props.userId},function(){S.notify(K.get("UserPasswordUpdateChanged"),3e3);var t=e.state.userDetails;t.needUpdatePassword=!0,e.setState({userDetails:t})}))}},{key:"onSendPasswordLink",value:function(){this.state.loading||this.props.dispatch(Y.sendPasswordResetLink({userId:this.props.userId},function(){S.notify(K.get("PasswordSent"),3e3)}))}},{key:"stringifyBoolean",value:function(e){return""===e?"":e?K.get("True"):K.get("False")}},{key:"render",value:function(){var e=this.state;return c.a.createElement(f.a,{className:Et.a.userSettings},c.a.createElement(f.a,null,c.a.createElement(f.a,{className:"outer-box",columnSize:50},c.a.createElement(he,{visible:this.state.ChangePasswordVisible,onCancel:this.onCancelPassword.bind(this),userId:this.props.userId}),c.a.createElement("div",{className:"title"},K.get("AccountSettings")),c.a.createElement("div",{className:this.state.loading?"isloading":""},c.a.createElement(re.a,{value:e.accountSettings.userName,error:e.errors.userName,onChange:this.onChange.bind(this,"userName"),label:K.get("Username"),tooltipMessage:K.get("Username.Help"),errorMessage:K.get("Username.Required"),style:Ut,autoComplete:"off",enabled:be(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),c.a.createElement(re.a,{value:e.accountSettings.displayName,error:e.errors.displayName,onChange:this.onChange.bind(this,"displayName"),label:K.get("DisplayName"),tooltipMessage:K.get("DisplayName.Help"),errorMessage:K.get("DisplayName.Required"),style:Ut,autoComplete:"off",enabled:be(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}}),c.a.createElement(re.a,{value:e.accountSettings.email,error:e.errors.email,onChange:this.onChange.bind(this,"email"),label:K.get("Email"),tooltipMessage:K.get("Email.Help"),errorMessage:K.get("Email.Required"),style:Ut,autoComplete:"off",enabled:be(this.props.appSettings.applicationSettings.settings),inputStyle:{marginBottom:25}})),ve(this.props.appSettings.applicationSettings.settings,this.state.userDetails.userId)&&c.a.createElement(f.a,{className:"no-padding"},c.a.createElement("div",{className:"title"},K.get("PasswordManagement")),c.a.createElement(f.a,{className:"link"+(this.state.loading?" disabled":"")},c.a.createElement("div",{onClick:this.onChangePassword.bind(this)},"[ ",K.get("ChangePassword")," ]")),!e.userDetails.needUpdatePassword&&c.a.createElement(f.a,{className:"link"+(this.state.loading?" disabled":"")},c.a.createElement("div",{onClick:this.onForcePasswordChange.bind(this)},"[ ",K.get("ForceChangePassword")," ]")),c.a.createElement(f.a,{className:"link"+(this.state.loading?" disabled":"")},c.a.createElement("div",{onClick:this.onSendPasswordLink.bind(this)},"[ ",K.get("ResetPassword")," ]")))),c.a.createElement(f.a,{className:"outer-box right",columnSize:50},c.a.createElement("div",{className:"title"},K.get("AccountData")),c.a.createElement(te.a,{className:"first"},c.a.createElement(f.a,{title:K.get("CreatedDate.Help")},K.get("CreatedDate")),c.a.createElement(f.a,null,C(e.userDetails.createdOnDate,!0))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("LastLoginDate.Help")},K.get("LastLoginDate")),c.a.createElement(f.a,null,C(e.userDetails.lastLogin,!0))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("LastActivityDate.Help")},K.get("LastActivityDate")),c.a.createElement(f.a,null,C(e.userDetails.lastActivity,!0))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("LastPasswordChangeDate.Help")},K.get("LastPasswordChangeDate")),c.a.createElement(f.a,null,C(e.userDetails.lastPasswordChange,!0))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("LastLockoutDate.Help")},K.get("LastLockoutDate")),c.a.createElement(f.a,null,"-"===C(e.userDetails.lastLockout,!0)?K.get("Never"):C(e.userDetails.lastLockout,!0))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("IsOnLine.Help")},K.get("IsOnLine")),c.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.isOnline))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("LockedOut.Help")},K.get("LockedOut")),c.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.isLocked))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("Approved.Help")},K.get("Approved")),c.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.authorized))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("UpdatePassword.Help")},K.get("UpdatePassword")),c.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.needUpdatePassword))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("IsDeleted.Help")},K.get("IsDeleted")),c.a.createElement(f.a,null,this.stringifyBoolean(e.userDetails.isDeleted))),c.a.createElement(te.a,null,c.a.createElement(f.a,{title:K.get("UserFolder.Help")},K.get("UserFolder")),c.a.createElement(f.a,null,e.userDetails.userFolder)))),be(this.props.appSettings.applicationSettings.settings)&&c.a.createElement(f.a,{className:"buttons"},c.a.createElement(f.a,{columnSize:50,className:"leftBtn"},c.a.createElement(ae.a,{id:"cancelbtn",type:"secondary",onClick:this.props.collapse.bind(this)},K.get("btnCancel"))),c.a.createElement(f.a,{columnSize:50,className:"rightBtn"},c.a.createElement(ae.a,{id:"confirmbtn",disabled:this.state.loading,type:"primary",onClick:this.save.bind(this)},K.get("btnSave")))))}}])&&St(n.prototype,r),o&&St(n,o),t}();Tt.propTypes={dispatch:l.a.func.isRequired,userId:l.a.array.isRequired,collapse:l.a.func.isRequired,userDetails:l.a.object,appSettings:l.a.object};var Dt=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(Tt);n(73);function Pt(e){return(Pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function kt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function It(e,t){return!t||"object"!==Pt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function jt(e){return(jt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Mt(e,t){return(Mt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Nt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=It(this,jt(t).call(this,e))).state={userDetails:e.userDetails},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Mt(e,t)}(t,u["Component"]),n=t,(r=[{key:"componentWillMount",value:function(){var e=this.props;void 0!==e.userDetails&&e.userDetails.userId===e.userId||this.getUserDetails(e)}},{key:"componentWillReceiveProps",value:function(e){void 0===e.userDetails&&e.userDetails.userId!==e.userId&&this.getUserDetails(e)}},{key:"getUserDetails",value:function(e){var t=this;e.dispatch(Y.getUserDetails({userId:e.userId},function(e){var n=Object.assign({},e);t.setState({userDetails:n})}))}},{key:"render",value:function(){return void 0!==this.state.userDetails&&void 0!==this.state.userDetails.editProfileUrl&&c.a.createElement("iframe",{className:"edit-profile",seamless:!0,src:this.state.userDetails.editProfileUrl})}}])&&kt(n.prototype,r),o&&kt(n,o),t}();Nt.propTypes={userDetails:l.a.object,userId:l.a.number};var Ft=Object(d.connect)(function(e){return{userDetails:e.users.userDetails}})(Nt),Lt=n(50),At=n(51),zt=n.n(At),Wt=(n(118),n(27)),Ht=n.n(Wt);function Bt(e){return(Bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Vt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qt(e,t){return!t||"object"!==Bt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Gt(e){return(Gt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Kt(e,t){return(Kt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Xt=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=qt(this,Gt(t).call(this))).state={editIndex:-1,editCommand:"",isCalendarVisible:!1},e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Kt(e,t)}(t,u["Component"]),n=t,(r=[{key:"onStartTimeClick",value:function(e,t){this.setState({editIndex:t,editCommand:"startTime",isCalendarVisible:!0})}},{key:"onExpiresTimeClick",value:function(e,t){this.setState({editIndex:t,editCommand:"expiresTime",isCalendarVisible:!0})}},{key:"onDeleteClick",value:function(e){var t=this.props;S.confirm(function(){var e=arguments[0],t=arguments;return e.replace(/{(\d+)}/gi,function(e,n){var r=parseInt(n)+1;return t[r]})}(K.get("DeleteRole.Confirm"),e.roleName,e.displayName),K.get("Delete"),K.get("Cancel"),function(){t.dispatch(Y.removeUserRole(e))})}},{key:"isEmptyDate",value:function(e){return!e||new Date(e).getFullYear()<1970}},{key:"onChange",value:function(e,t,n){var r=this.state;r.editIndex=-1,r.editCommand="";var o="startTime"===t?n:e.startTime,a="expiresTime"===t?n:e.expiresTime;this.props.saveRole(e.roleId,o,a),this.setState({isCalendarVisible:!1})}},{key:"getBoundDate",value:function(e,t){if("startTime"===t){var n=new Date(2049,11,31);return this.isEmptyDate(e.expiresTime)||(n=new Date((new Date).setTime(new Date(e.expiresTime).getTime()-864e5))),n}if("expiresTime"===t){var r=new Date(1970,0,1);return this.isEmptyDate(e.startTime)||(r=new Date((new Date).setTime(new Date(e.startTime).getTime()+864e5))),r}}},{key:"getDate",value:function(e,t){var n=new Date;return"startTime"===t?this.isEmptyDate(e.startTime)||(n=new Date(e.startTime)):"expiresTime"===t&&(this.isEmptyDate(e.expiresTime)||(n=new Date(e.expiresTime))),n}},{key:"createRoleActions",value:function(){var e=this.props,t=this.state,n=e.roleDetails.allowExpired?c.a.createElement("span",null,c.a.createElement(Ht.a,{date:this.getDate(e.roleDetails,"startTime"),maxDate:this.getBoundDate(e.roleDetails,"startTime"),updateDate:this.onChange.bind(this,e.roleDetails,"startTime"),mode:"start",applyButtonText:K.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onStartTimeClick.bind(this,e.roleDetails,e.index)})):null,r=e.roleDetails.allowExpired?c.a.createElement("span",null,c.a.createElement(Ht.a,{date:this.getDate(e.roleDetails,"expiresTime"),minDate:this.getBoundDate(e.roleDetails,"expiresTime"),updateDate:this.onChange.bind(this,e.roleDetails,"expiresTime"),mode:"end",applyButtonText:K.get("btnApply"),showIcon:!0,showInput:!1,onIconClick:this.onExpiresTimeClick.bind(this,e.roleDetails,e.index)})):null,o=e.roleDetails.allowDelete?c.a.createElement("a",{className:"extension-action",dangerouslySetInnerHTML:{__html:Ue.XIcon},onClick:this.onDeleteClick.bind(this,e.roleDetails,e.index)}):null;return c.a.createElement("div",{className:t.editIndex===e.index?"edit-row":null},n,r,o)}},{key:"render",value:function(){var e=this.props;return c.a.createElement("div",{className:"user-role-row"},c.a.createElement(f.a,{title:e.roleDetails.roleName,columnSize:25},e.roleDetails.roleName),c.a.createElement(f.a,{columnSize:20,title:C(e.roleDetails.startTime)},C(e.roleDetails.startTime)),c.a.createElement(f.a,{columnSize:20,title:C(e.roleDetails.expiresTime)},C(e.roleDetails.expiresTime)),c.a.createElement(f.a,{columnSize:35},c.a.createElement("div",{className:"actions"},this.createRoleActions())))}}])&&Vt(n.prototype,r),o&&Vt(n,o),t}();Xt.propTypes={dispatch:l.a.func.isRequired,roleDetails:l.a.object.isRequired,index:l.a.number,saveRole:l.a.func.isRequired,deleteRole:l.a.func.isRequired};var $t=Object(d.connect)(function(){return{}})(Xt),Qt=(n(120),n(52)),Jt=n.n(Qt);function Zt(e){return(Zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Yt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function en(e,t){return!t||"object"!==Zt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function tn(e){return(tn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function nn(e,t){return(nn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var rn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=en(this,tn(t).call(this,e))).state={roleSelectState:{userId:-1,keyword:""},currentPage:0,pageSize:10,roleKeyword:"",sendEmail:!0,isOwner:!1,allowOwner:!1},n.comboBoxDom=null,n.debounceGetSuggestRoles=Object(Lt.debounce)(500,n.debounceGetSuggestRoles),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nn(e,t)}(t,u["Component"]),n=t,(r=[{key:"componentWillReceiveProps",value:function(e){this.setState(e)}},{key:"componentWillMount",value:function(){this.getRoles()}},{key:"getRoles",value:function(){var e=this.props,t=this.state,n={userId:e.userDetails.userId,keyword:t.roleKeyword,pageIndex:t.currentPage,pageSize:t.pageSize};e.dispatch(Y.getUserRoles(n))}},{key:"getSuggestRoles",value:function(){var e=this.props,t=this.state,n=t.roleSelectState.roleId>=0?"":t.roleSelectState.keyword;e.dispatch(Y.getSuggestRoles({keyword:n,count:10}))}},{key:"debounceGetSuggestRoles",value:function(){this.getSuggestRoles()}},{key:"onRoleSelectorChanged",value:function(e){e.roleId||e.roleName||(this.setState({roleSelectState:{roleId:-1,keyword:e}}),this.debounceGetSuggestRoles())}},{key:"onRoleSelectorSelected",value:function(e){var t=this;this.onRoleSelected(e.roleId,function(){t.setState({roleSelectState:{roleId:e.roleId,keyword:e.roleName}},function(){t.getSuggestRoles()})})}},{key:"onRoleSelectorToggle",value:function(){}},{key:"onAddRole",value:function(){var e=this.state.roleSelectState.roleId;-1!==e&&void 0!==e&&(this.saveRole(e),this.setState({roleSelectState:{roleId:-1,keyword:""}}))}},{key:"saveRole",value:function(e,t,n){var r=this.props,o={roleId:e,userId:r.userDetails.userId,startTime:t,expiresTime:n};r.dispatch(Y.saveUserRole(o,this.state.sendEmail,this.state.isOwner)),this.setState({sendEmail:!0,isOwner:!1,allowOwner:!1})}},{key:"onPageChanged",value:function(e,t){var n=this.state;void 0!==t&&n.pageSize!==t&&(n.pageSize=t),n.currentPage=e,this.setState({state:n}),this.getRoles()}},{key:"getRoleRows",value:function(){var e=this,t=this.props.userRoles,n=t.map(function(t,n){return c.a.createElement($t,{roleDetails:t,index:n,key:"role_row_".concat(n),saveRole:e.saveRole.bind(e)})});return c.a.createElement("div",{className:"user-role-body"},t.length>0?n:c.a.createElement("div",{className:"no-roles-row"},K.get("NoRoles")))}},{key:"onRoleSelected",value:function(e,t){if(void 0!==this.props.matchedRoles&&this.props.matchedRoles.length>0&&this.props.matchedRoles.some(function(t){return t.roleId===e})){var n=this.props.matchedRoles.filter(function(t){return t.roleId===e})[0];this.setState({allowOwner:n.allowOwner},function(){"function"==typeof t&&t()})}}},{key:"onSendEmailClick",value:function(e){this.setState({sendEmail:e})}},{key:"onIsOwnerClick",value:function(e){this.setState({isOwner:e})}},{key:"renderHeader",value:function(){var e=[{name:"Role",width:25},{name:"Start",width:20},{name:"Expires",width:20},{name:"",width:35}].map(function(e,t){return c.a.createElement(f.a,{key:"grid_cell_".concat(t),columnSize:e.width,style:{fontWeight:"bolder"}},""!==e.name?c.a.createElement("span",null,K.get(e.name+".Header")):c.a.createElement("div",null))});return c.a.createElement("div",{className:"user-role-header-row"},e)}},{key:"renderPaging",value:function(){if(this.props.totalRecords>0)return c.a.createElement(Jt.a,{showStartEndButtons:!1,showPageSizeOptions:!1,numericCounters:0,summaryText:K.get("rolesSummaryText"),pageInfoText:K.get("rolesPageInfoText"),showPageInfo:!0,pageSize:this.state.pageSize,totalRecords:this.props.totalRecords,onPageChanged:this.onPageChanged.bind(this),culture:S.getCulture()})}},{key:"render",value:function(){var e=this,t=this.state;return c.a.createElement("div",{className:"userroles-form-form"},c.a.createElement("div",{className:"header"},c.a.createElement("div",{className:"header-title"},K.get("Roles.Title")),c.a.createElement("div",{className:"add-box"},c.a.createElement(f.a,{columnSize:30},c.a.createElement("div",{className:"send-email-box"},c.a.createElement(Xe.a,{value:this.state.sendEmail,onChange:this.onSendEmailClick.bind(this),label:K.get("SendEmail"),labelPlace:"right"}),this.state.allowOwner&&c.a.createElement(Xe.a,{value:this.state.isOwner,onChange:this.onIsOwnerClick.bind(this),label:K.get("IsOwner"),labelPlace:"right"}))),c.a.createElement(f.a,{columnSize:70},c.a.createElement("span",null,c.a.createElement(zt.a,{suggest:!1,ref:function(t){e.comboBoxDom=t},placeholder:K.get("AddRolePlaceHolder"),open:this.props.matchedRoles&&this.props.matchedRoles.length>0,onToggle:this.onRoleSelectorToggle.bind(this),onChange:this.onRoleSelectorChanged.bind(this),onSelect:this.onRoleSelectorSelected.bind(this),data:this.props.matchedRoles,value:t.roleSelectState.keyword,valueField:"roleId",textField:"roleName"}),c.a.createElement("div",{className:"add-role-button",onClick:this.onAddRole.bind(this)},c.a.createElement("div",{className:"extension-action",title:K.get("Add"),dangerouslySetInnerHTML:{__html:Ue.AddIcon}}),K.get("Add")))))),c.a.createElement("div",{className:"user-roles-list"},this.renderHeader(),this.getRoleRows()),c.a.createElement("div",{className:"user-roles-list-paging"},this.renderPaging()))}}])&&Yt(n.prototype,r),o&&Yt(n,o),t}();rn.propTypes={dispatch:l.a.func.isRequired,userDetails:l.a.object.isRequired,userRoles:l.a.array.isRequired,totalRecords:l.a.number,matchedRoles:l.a.array},rn.defaultProps={matchedRoles:[]};var on=Object(d.connect)(function(e){return{matchedRoles:e.users.matchedRoles,userRoles:e.users.userRoles,totalRecords:e.users.userRolesCount}})(rn),an=n(53),sn=n.n(an);function ln(e){return(ln="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function un(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function cn(e,t){return!t||"object"!==ln(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function dn(e){return(dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function pn(e,t){return(pn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var fn=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=cn(this,dn(t).call(this))).state={openId:"",renderIndex:-1},e}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pn(e,t)}(t,u["Component"]),n=t,(r=[{key:"componentWillReceiveProps",value:function(){this.collapse()}},{key:"uncollapse",value:function(e,t){var n=this;setTimeout(function(){n.setState({openId:e,renderIndex:t})})}},{key:"collapse",value:function(){""!==this.state.openId&&this.setState({openId:"",renderIndex:-1})}},{key:"toggle",value:function(e,t){""!==e?this.uncollapse(e,t):this.collapse()}},{key:"onAddUser",value:function(){this.toggle("add"===this.state.openId?"":"add",0)}},{key:"getChildren",value:function(e){var t=[];if(t=t.concat(this.props.getUserTabs&&this.props.getUserTabs(e)||[]),ye(this.props.appSettings.applicationSettings.settings)){var n=c.a.createElement(Dt,{userId:e.userId,collapse:this.collapse.bind(this),appSettings:this.props.appSettings});t=t.concat([{index:10,content:n}])}return me(this.props.appSettings.applicationSettings.settings,e)&&(t=t.concat([{index:5,content:c.a.createElement(on,{userDetails:e})}])),ge(this.props.appSettings.applicationSettings.settings)&&(t=t.concat([{index:15,content:c.a.createElement(Ft,{userId:e.userId})}])),R(t,"index","desc").map(function(e){return e.content})}},{key:"getHeaders",value:function(){var e=void 0!==this.props.columnSizes?this.props.columnSizes:Re,t=[{index:5,size:e.find(function(e){return 5===e.index}).size,header:K.get("Name.Header")},{index:10,size:e.find(function(e){return 10===e.index}).size,header:K.get("Email.Header")},{index:15,size:e.find(function(e){return 15===e.index}).size,header:K.get("Created.Header")},{index:25,size:e.find(function(e){return 25===e.index}).size,header:""}];if(void 0!==this.props.getUserColumns&&"function"==typeof this.props.getUserColumns){var n=this.props.getUserColumns();void 0!==n&&n.length>0&&(t=R(n.map(function(t){return{index:t.index,header:t.header,size:e.find(function(e){return e.index===t.index}).size}}).concat(t),"index"))}return t}},{key:"render",value:function(){var e,t=this,n=this.props,r=0,o="add"===this.state.openId&&((e=this.props.appSettings.applicationSettings.settings).isAdmin||e.permissions.ADD_USER),a=this.getHeaders();return c.a.createElement(f.a,{className:sn.a.usersList},c.a.createElement(w,{headers:a}),c.a.createElement(Fe,{Collapse:this.collapse.bind(this),OpenCollapse:this.toggle.bind(this),currentIndex:this.state.renderIndex,openId:this.state.openId,key:"user-add",appSettings:n.appSettings,columnSizes:n.columnSizes,id:"add",addIsOpened:o?"add-opened":"closed",filter:n.filter},c.a.createElement(Ve,null,[c.a.createElement(bt,{key:"create-user-box-".concat(r),filter:n.filter,onCancel:t.collapse.bind(t),appSettings:n.appSettings})])),n.users&&n.users.length>0&&n.users.map(function(e,o){var a="row-"+r++,i=t.getChildren(e);return c.a.createElement(Fe,{user:e,Collapse:t.collapse.bind(t),OpenCollapse:t.toggle.bind(t),currentIndex:t.state.renderIndex,openId:t.state.openId,key:"user-"+o,getUserColumns:n.getUserColumns&&n.getUserColumns.bind(t),getUserTabsIcons:n.getUserTabsIcons&&n.getUserTabsIcons.bind(t),getUserMenu:n.getUserMenu&&n.getUserMenu.bind(t),userMenuAction:n.userMenuAction&&n.userMenuAction.bind(t),appSettings:n.appSettings,columnSizes:n.columnSizes,id:a,filter:n.filter},c.a.createElement(Ve,{renderIndex:t.state.renderIndex},i))}),n.users&&0===n.users.length&&c.a.createElement(f.a,{className:"no-users"},K.get("noUsers")))}}])&&un(n.prototype,r),o&&un(n,o),t}();fn.propTypes={dispatch:l.a.func.isRequired,getUserTabs:l.a.func,getUserTabsIcons:l.a.func,getUserColumns:l.a.func,getUserMenu:l.a.func,userMenuAction:l.a.func,appSettings:l.a.object,columnSizes:l.a.array,filter:l.a.number};var hn=Object(d.connect)(function(e){return{users:e.users.users}},null,null,{withRef:!0})(fn),mn=(n(123),n(54)),gn=n.n(mn),yn=n(55),vn=n.n(yn);function bn(e){return(bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function En(e,t){return!t||"object"!==bn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function xn(e){return(xn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Sn(e,t){return(Sn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var On=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=En(this,xn(t).call(this,e))).state={selectedUserFilter:{label:K.get("Authorized"),value:0},searchText:""},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Sn(e,t)}(t,u["Component"]),n=t,(r=[{key:"onSelect",value:function(e){var t=this,n=e.label,r=e.value,o=this.state.selectedUserFilter;r!==o.value&&(o.label=n,o.value=r,0===o.value||5===o.value?this.setState({selectedUserFilter:{label:"",value:-1},searchText:""},function(){t.setState({selectedUserFilter:o,searchText:""},function(){t.props.onChange(e,t.state.searchText)})}):this.setState({selectedUserFilter:o,searchText:""},function(){t.props.onChange(e,t.state.searchText)}))}},{key:"onKeywordChanged",value:function(e){var t=this;this.setState({searchText:e},function(){t.props.onChange(t.state.selectedUserFilter,e)})}},{key:"BuildUserFiltersOptions",value:function(){return this.props.userFilters.map(function(e){return{label:e.Key,value:e.Value}})}},{key:"render",value:function(){var e=this.BuildUserFiltersOptions();return c.a.createElement("div",{className:"users-filter-container"},c.a.createElement(f.a,{columnSize:35},null!=this.userFiltersOptions&&this.userFiltersOptions.length>0&&c.a.createElement("div",{className:"user-filters-filter"},c.a.createElement(gn.a,{style:{width:"100%"},withBorder:!1,options:e,label:this.state.selectedUserFilter.label,onSelect:this.onSelect.bind(this),prependWith:K.get("ShowLabel")}),c.a.createElement("div",{className:"clear"}))),c.a.createElement(f.a,{columnSize:30},c.a.createElement("div",null,"  ")),c.a.createElement(f.a,{columnSize:35},c.a.createElement("div",{className:"search-filter"},(0===this.state.selectedUserFilter.value||5===this.state.selectedUserFilter.value)&&c.a.createElement(vn.a,{placeholder:K.get("SearchPlaceHolder"),onSearch:this.onKeywordChanged.bind(this),maxLength:50,iconStyle:{right:0}}),c.a.createElement("div",{className:"clear"}))))}}])&&wn(n.prototype,r),o&&wn(n,o),t}();On.propTypes={dispatch:l.a.func.isRequired,onChange:l.a.func.isRequired,userFilters:l.a.array.isRequired};var _n=On;function Cn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Un=[{condition:X.RETRIEVED_USERS,functionToRun:function(e,t){return{users:t.payload.Results,totalUsers:t.payload.TotalResults}}},{condition:X.UPDATE_USER,functionToRun:function(e,t){return{users:T(e.users,t.payload)}}},{condition:X.CREATE_USER,functionToRun:function(e,t){var n=Object.assign(e.totalUsers);if(0===t.filter&&t.payload.authorized||1===t.filter||5===t.filter)return{users:T(e.users,t.payload),totalUsers:n+1}}},{condition:X.DELETE_USER,functionToRun:function(e,t){var n=Object.assign(e.totalUsers);return 3===t.filter||5===t.filter?{users:T(e.users,t.payload)}:{users:D(e.users,t.payload.userId),totalUsers:n-1}}},{condition:X.RESTORE_USER,functionToRun:function(e,t){var n=Object.assign(e.totalUsers);return 3===t.filter||5===t.filter?{users:T(e.users,t.payload)}:{users:D(e.users,t.payload.userId),totalUsers:n-1}}},{condition:X.USER_MADE_SUPERUSER,functionToRun:function(e,t){var n,r,o,a,i,s,l=Object.assign(e.totalUsers);return 3===t.filter?{users:D(e.users,t.payload.userId),totalUsers:l-1}:{users:(n=e.users,r=t.payload.userId,o=null,a=null,i=t.payload.setSuperUser,s=Object.assign([],S.getObjectCopy(n)),s.some(function(e){return e.userId===r})&&(s=s.filter(function(e){return e.userId===r&&(null!=o&&(e.isDeleted=o),null!=a&&(e.authorized=a),null!=i&&(e.isSuperUser=i)),!0})),s),totalUsers:l}}},{condition:X.ERASE_USER,functionToRun:function(e,t){var n=Object.assign(e.totalUsers);return{users:D(e.users,t.payload.userId),totalUsers:n-1}}},{condition:X.RETRIEVED_USER_DETAILS,functionToRun:function(e,t){return{userDetails:t.payload}}},{condition:X.RETRIEVED_USERS_ROLES,functionToRun:function(e,t){return{userRoles:t.payload.UserRoles,userRolesCount:t.payload.TotalRecords}}},{condition:X.RETRIEVED_SUGGEST_ROLES,functionToRun:function(e,t){return{matchedRoles:t.payload.matchedRoles}}},{condition:X.SAVE_USER_ROLE,functionToRun:function(e,t){return{userRoles:function(e,t){var n=Object.assign([],S.getObjectCopy(e)),r=Object.assign({},S.getObjectCopy(t));if(n.some(function(e){return e.roleId===r.roleId})&&(n=n.filter(function(e){return e.roleId!==r.roleId})),!n.some(function(e){return e.roleId===r.roleId}))return n=(n=[r].concat(n)).sort(function(e,t){var n=e.roleId,r=t.roleId;return n<r?-1:n>r?1:0})}(e.userRoles,t.payload)}}},{condition:X.UPDATE_USER_AUTHORIZE_STATUS,functionToRun:function(e,t){var n=Object.assign(e.totalUsers);return 2===t.filter||3===t.filter||5===t.filter?{users:T(e.users,t.payload)}:{users:D(e.users,t.payload.userId),totalUsers:n-1}}},{condition:X.USER_UNLOCKED,functionToRun:function(e,t){return{users:T(e.users,t.payload)}}},{condition:X.REMOVE_USER_ROLE,functionToRun:function(e,t){return{userRoles:(n=e.userRoles,r=t.payload.roleId,o=Object.assign([],S.getObjectCopy(n)),o.some(function(e){return e.roleId===r})&&(o=o.filter(function(e){return e.roleId!==r})),o)};var n,r,o}},{condition:X.RETRIEVED_PASSWORD_STRENGTH_OPTIONS,functionToRun:function(e,t){return{passwordStrengthOptions:t.payload}}}];function Rn(e,t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Object.assign({users:[],totalUsers:0,userFilters:[],userRoles:[],matchedRoles:[],userRolesCount:0,userDetails:{},passwordStrengthOptions:{}},e),r=arguments.length>1?arguments[1]:void 0,o=function(e,t){var n=e;return"[object Array]"===Object.prototype.toString.call(t)&&t.forEach(function(e){var t=!1,r=0;n.forEach(function(n,o){e.condition===n.condition&&(t=!0,r=o)}),t?n[r]=e:n.push(e)}),n}(Un,t),a=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){Cn(e,t,n[t])})}return e}({},n);return o.forEach(function(e){if(e.condition===r.type){var t=e.functionToRun(n,r);a=Object.assign(a,t)}}),a}}window.dnn||(window.dnn={}),window.dnn.Users||(window.dnn.Users={}),window.dnn.Users.CommonActionTypes=r,window.dnn.Users.CommonComponents=a,window.dnn.Users.CommonReducers=i,window.dnn.Users.CommonActions=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,